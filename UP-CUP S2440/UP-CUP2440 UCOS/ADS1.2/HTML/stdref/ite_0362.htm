<HTML><HEAD><TITLE>__iterator_category</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="ite_5554.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="ite_2405.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>__iterator_category</H2>
<PRE><HR>Iterator primitive
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Tag Types">Tag Types</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Determines the category to which an iterator belongs. This function is now obsolete. It is included for backward compatibility and to support compilers that do not include partial specialization.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;iterator&gt;
template &lt;class Category, class T, class Distance, 
          class Pointer, class Reference&gt;
inline Category __iterator_category 
  (const iterator&lt;Category, T, Distance, Pointer,
   Reference&gt;&amp;);
template &lt;class T&gt;
inline random_access_iterator_tag __iterator_category 
  (const T*)</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>__iterator_category</I></B> family of function templates allows you to determine the category to which any iterator belongs. The first function takes an iterator of a specific type and returns the tag for that type. The last takes a <SAMP>T*</SAMP> and returns <SAMP>random_access_iterator_tag</SAMP>.</P>

<A NAME="Tag Types"><H3>Tag Types</H3></A>
<UL>
<PRE>input_iterator_tag
output_iterator_tag
forward_iterator_tag
bidirectional_iterator_tag
random_access_iterator_tag</PRE>

</UL>
<P>The __<B><I>iterator_category</I></B> function is particularly useful for improving the efficiency of algorithms. An algorithm can use this function to select the most efficient implementation an iterator is capable of handling without sacrificing the ability to work with a wide range of iterator types. For instance, both the <SAMP>advance</SAMP> and <SAMP>distance</SAMP> primitives use __<B><I>iterator_category</I></B> to maximize their efficiency by using the tag returned from <B><I>iterator_category</I></B> to select from one of several different auxiliary functions. Because this is a compile time selection, use of this primitive incurs no significant runtime overhead.</P>
<P><B><I>__iterator_category</I></B> is typically used like this:</P>
<UL>
<PRE>template &lt;class Iterator&gt;
void foo(Iterator first, Iterator last)
{
  __foo(begin,end,__iterator_category(first));
}

template &lt;class Iterator&gt;
void __foo(Iterator first, Iterator last,
           input_iterator_tag&gt;
{
  // Most general implementation
}

template &lt;class Iterator&gt;
void __foo(Iterator first, Iterator last,
           bidirectional_iterator_tag&gt;
{
  // Implementation takes advantage of bi-directional
  // capability of the iterators
}

...etc.</PRE>

</UL>
<P>See the <B><I><A HREF="ite_5554.htm">iterator</A></I></B> section for a description of iterators and the capabilities associated with each type of iterator tag.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P>Other iterator primitives:  <B><I>__value_type</I></B>, <B><I><A HREF="dis_0582.htm">__distance_type</A></I></B>, <B><I><A HREF="dis_0186.htm">distance</A></I></B>, <B><I><A HREF="adv_9283.htm">advance</A></I></B>, <B><I><A HREF="ite_5554.htm">iterator</A></I></B></P>


<BR>
<HR>
<A HREF="ite_5554.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="ite_2405.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
