<HTML><HEAD><TITLE>mem_fun, mem_fun1, mem_fun_ref, mem_fun_ref1</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="max_8656.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="mer_0626.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>mem_fun, mem_fun1, mem_fun_ref, mem_fun_ref1</H2>
<PRE><HR>Function Adaptors
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Interface">Interface</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Function objects that adapt a pointer to a member function, to take the place of a global function.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;functional&gt;
template &lt;class S, class T&gt; class mem_fun_t; 
template &lt;class S, class T, class A&gt; class mem_fun1_t;
template &lt;class S, class T&gt; class mem_fun_ref_t; 
template &lt;class S, class T, class A&gt; class mem_fun1_ref_t;

template &lt;class S, class T&gt; class const_mem_fun_t; 
template &lt;class S, class T, class A&gt; class const_mem_fun1_t;
template &lt;class S, class T&gt; class const_mem_fun_ref_t; 
template &lt;class S, class T, class A&gt; 
          class const_mem_fun1_ref_t;

template&lt;class S, class T&gt; mem_fun_t&lt;S,T&gt;
   mem_fun(S, (T::*f)());
template&lt;class S, class T, class A&gt; mem_fun1_t&lt;S,T,A&gt;
   mem_fun1(S, (T::*f)(A));
template&lt;class S, class T&gt; mem_fun_ref_t&lt;S,T&gt;
   mem_fun_ref(S, (T::*f)());
template&lt;class S, class T, class A&gt; mem_fun1_ref_t&lt;S,T,A&gt;
   mem_fun1_ref(S, (T::*f)(A));

template&lt;class S, class T&gt; const_mem_fun_t&lt;S,T&gt;
   mem_fun(S, (T::*f)() const);
template&lt;class S, class T, class A&gt; const_mem_fun1_t&lt;S,T,A&gt;
   mem_fun1(S, (T::*f)(A) const);
template&lt;class S, class T&gt; const_mem_fun_ref_t&lt;S,T&gt;
   mem_fun_ref(S, (T::*f)() const);
template&lt;class S, class T, class A&gt;
   const_mem_fun1_ref_t&lt;S,T,A&gt;
   mem_fun1_ref(S, (T::*f)(A) const);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>mem_fun</I></B> group of templates encapsulates a pointer to a member function. Each category of template (<B><I>mem_fun</I></B>, <B><I><A HREF="mem_1443.htm">mem_fun1</A></I></B>, <B><I><A HREF="mem_5589.htm">mem_fun_ref</A></I></B>, or <B><I>mem_fun1_ref</I></B>) includes both a class template and a function template, where the class is distinguished by the addition of <SAMP>_t</SAMP> on the end of the name to identify it as a type. A set of class templates for const member functions exists, each with <SAMP>const_</SAMP> prepended to the name.</P>
<P>The class's constructor takes a pointer to a member function, and uses an <SAMP>operator()</SAMP> to forward the call to that member function. In this way the resulting object serves as a global function object for that member function. </P>
<P>The accompanying function template simplifies the use of this facility by constructing an instance of the class on the fly. </P>
<P>The library includes zero and one argument adaptors for containers of pointers and containers of references (<SAMP>_ref</SAMP>). This technique can be easily extended to include adaptors for two argument functions, and so on. </P>

<A NAME="Interface"><H3>Interface</H3></A>
<PRE>
<PRE>template &lt;class S, class T&gt; class mem_fun_t
          : public unary_function&lt;T*, S&gt; {
    public:
      explicit mem_fun_t(S (T::*p)());
      S operator()(T* p) const;
};
 
template &lt;class S, class T, class A&gt; class mem_fun1_t
          : public binary_function&lt;T*, A, S&gt; {
    public:
      explicit mem_fun1_t(S (T::*p)(A));
      S operator()(T* p, A x) const;
};
 
template&lt;class S, class T&gt; mem_fun_t&lt;S,T&gt;
   mem_fun(S, (T::*f)());

template&lt;class S, class T, class A&gt; mem_fun1_t&lt;S,T,A&gt;
    mem_fun1(S, (T::*f)(A));

template &lt;class S, class T&gt; class mem_fun_ref_t
          : public unary_function&lt;T, S&gt; {
    public:
      explicit mem_fun_ref_t(S (T::*p)());
      S operator()(T* p) const;
};
 
template &lt;class S, class T, class A&gt; class mem_fun1_ref_t
          : public binary_function&lt;T, A, S&gt; {
    public:
      explicit mem_fun1_ref_t(S (T::*p)(A));
      S operator()(T* p, A x) const;
};
template&lt;class S, class T&gt; mem_fun_ref_t&lt;S,T&gt;
     mem_fun_ref(S, (T::*f)());
template&lt;class S, class T, class A&gt; mem_fun1_ref_t&lt;S,T,A&gt;
     mem_fun1_ref(S, (T::*f)(A));

// For const member functions

template &lt;class S, class T&gt; class const_mem_fun_t
          : public unary_function&lt;T*, S&gt; {
    public:
      explicit const_mem_fun_t(S (T::*p)() const);
      S operator()(T* p) const;
};
 
template &lt;class S, class T, class A&gt; class const_mem_fun1_t
          : public binary_function&lt;T*, A, S&gt; {
    public:
      explicit const_mem_fun1_t(S (T::*p)(A) const);
      S operator()(T* p, A x) const;
};
 
template&lt;class S, class T&gt; const_mem_fun_t&lt;S,T&gt;
   mem_fun(S, (T::*f)() const);

template&lt;class S, class T, class A&gt; const_mem_fun1_t&lt;S,T,A&gt;
    mem_fun1(S, (T::*f)(A) const);

template &lt;class S, class T&gt; class const_mem_fun_ref_t
          : public unary_function&lt;T, S&gt; {
    public:
      explicit const_mem_fun_ref_t(S (T::*p)() const);
      S operator()(T* p) const;
};
 
template &lt;class S, class T, class A&gt; 
          class const_mem_fun1_ref_t
          : public binary_function&lt;T, A, S&gt; {
    public:
      explicit const_mem_fun1_ref_t(S (T::*p)(A) const);
      S operator()(T* p, A x) const;
};
template&lt;class S, class T&gt; const_mem_fun_ref_t&lt;S,T&gt;
     mem_fun_ref(S, (T::*f)() const);
template&lt;class S, class T, class A&gt;
     const_mem_fun1_ref_t&lt;S,T,A&gt; 
     mem_fun1_ref(S, (T::*f)(A) const);</PRE>

</PRE>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// mem_fun example
//

#include &lt;functional&gt;
#include &lt;list&gt;
using namespace std;

int main(void)
{
  int a1[] = {2,1,5,6,4};
  int a2[] = {11,4,67,3,14};
  list&lt;int&gt; s1(a1,a1+5);
  list&lt;int&gt; s2(a2,a2+5);

  // Build a list of lists
  list&lt;list&lt;int&gt;* &gt; l;
  l.insert(l.begin(),s1);
  l.insert(l.begin(),s2);

  // Sort each list in the list
  for_each(l.begin(),l.end(),mem_fun(&amp;list&lt;int&gt;::sort));
}</PRE>

</UL>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="bin_7851.htm">binary_function</A></I></B>, <B><I><A HREF="Fun_4316.htm">Function Objects</A></I></B>, <B><I><A HREF="poi_7375.htm">pointer_to_unary_function</A></I></B>, <B><I><A HREF="ptr_4059.htm">ptr_fun</A></I></B></P>


<BR>
<HR>
<A HREF="max_8656.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="mer_0626.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
