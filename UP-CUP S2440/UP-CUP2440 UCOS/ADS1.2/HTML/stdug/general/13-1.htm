<HTML><HEAD><TITLE>13.1 Overview</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="13.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="13-2.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>13.1 Overview</H2>
<A NAME="idx234"><!></A>
<P>In this chapter and in <A HREF="14.htm">Chapter 14</A> we examine and illustrate each of the generic algorithms provided by the Standard C++ Library. The names and a short description of each of the algorithms in this chapter are given in <A HREF="#Table 19">Table 19</A>. We have divided the algorithms into several categories, based on how they are typically used. This division differs from the categories used in the Standard C++ Library definition, which is based upon whether or not the algorithms modify their arguments.</P>
<TABLE BORDER CELLPADDING=3 CELLSPACING=3>
<H4><A NAME="Table 19">Table 19 -- Generic algorithms of the Standard C++ Library</A> </H4><tr><td valign=top><B>Algorithm</B><td valign=top><B>Purpose</B>
<A NAME="idx235"><!></A>
<tr><td valign=top colspan=2 rowspan=1>
<B><I>Algorithms initializing a sequence</I></B><BR>

<tr><td valign=top>
<SAMP>fill()</SAMP><BR>
<td valign=top>
Fills a sequence with an initial value<BR>

<tr><td valign=top>
<SAMP>fill_n()</SAMP><BR>
<td valign=top>
Fills n positions with an initial value<BR>

<tr><td valign=top>
<SAMP>copy()</SAMP><BR>
<td valign=top>
Copies a sequence into another sequence<BR>

<tr><td valign=top>
<SAMP>copy_backward()</SAMP><BR>
<td valign=top>
Copies a sequence into another sequence<BR>

<tr><td valign=top>
<SAMP>generate()</SAMP><BR>
<td valign=top>
Initializes a sequence using a generator<BR>

<tr><td valign=top>
<SAMP>generate_n()</SAMP><BR>
<td valign=top>
Initializes n positions using a generator <BR>

<tr><td valign=top>
<SAMP>swap_ranges()</SAMP><BR>
<td valign=top>
Swaps values from two parallel sequences <BR>

<A NAME="idx236"><!></A>
<tr><td valign=top colspan=2 rowspan=1>
<B><I>Searching algorithms</I></B><BR>

<tr><td valign=top>
<SAMP>find()</SAMP><BR>
<td valign=top>
Finds an element matching the argument <BR>

<tr><td valign=top>
<SAMP>find_if()</SAMP><BR>
<td valign=top>
Finds an element satisfying a condition <BR>

<tr><td valign=top>
<SAMP>adjacent_find()</SAMP><BR>
<td valign=top>
Finds consecutive duplicate elements <BR>

<tr><td valign=top>
<SAMP>find_first_of()</SAMP><BR>
<td valign=top>
Finds the first occurrence of one member of a sequence in another sequence<BR>

<tr><td valign=top>
<SAMP>find_end()</SAMP><BR>
<td valign=top>
Finds the last occurrence of a sub-sequence in a sequence<BR>

<tr><td valign=top>
<SAMP>search()</SAMP><BR>
<td valign=top>
Matches a sub-sequence within a sequence <BR>

<tr><td valign=top>
<SAMP>max_element()</SAMP><BR>
<td valign=top>
Finds the maximum value in a sequence <BR>

<tr><td valign=top>
<SAMP>min_element()</SAMP><BR>
<td valign=top>
Finds the minimum value in a sequence <BR>

<tr><td valign=top>
<SAMP>mismatch()</SAMP><BR>
<td valign=top>
Finds first mismatch in parallel sequences<BR>

<A NAME="idx237"><!></A>
<tr><td valign=top colspan=2 rowspan=1>
<B><I>Algorithms for in-place transformations</I></B><BR>

<tr><td valign=top>
<SAMP>reverse()</SAMP><BR>
<td valign=top>
Reverses the elements in a sequence <BR>

<tr><td valign=top>
<SAMP>replace()</SAMP><BR>
<td valign=top>
Replaces specific values with new value <BR>

<tr><td valign=top>
<SAMP>replace_if()</SAMP><BR>
<td valign=top>
Replaces elements matching predicate<BR>

<tr><td valign=top>
<SAMP>rotate()</SAMP><BR>
<td valign=top>
Rotates elements in a sequence around a point <BR>

<tr><td valign=top>
<SAMP>partition()</SAMP><BR>
<td valign=top>
Partitions elements into two groups <BR>

<tr><td valign=top>
<SAMP>stable_partition()</SAMP><BR>
<td valign=top>
Partitions preserving original ordering <BR>

<tr><td valign=top>
<SAMP>next_permutation()</SAMP><BR>
<td valign=top>
Generates permutations in sequence <BR>

<tr><td valign=top>
<SAMP>prev_permutation()</SAMP><BR>
<td valign=top>
Generates permutations in reverse sequence <BR>

<tr><td valign=top>
<SAMP>inplace_merge()</SAMP><BR>
<td valign=top>
Merges two adjacent sequences into one <BR>

<tr><td valign=top>
<SAMP>random_shuffle()</SAMP><BR>
<td valign=top>
Randomly rearranges elements in a sequence<BR>

<A NAME="idx238"><!></A>
<tr><td valign=top colspan=2 rowspan=1>
<B><I>Removal algorithms</I></B> <BR>

<tr><td valign=top>
<SAMP>remove()</SAMP><BR>
<td valign=top>
Removes elements that match condition<BR>

<tr><td valign=top>
<SAMP>unique()</SAMP><BR>
<td valign=top>
Removes all but first of duplicate values in sequences<BR>

<A NAME="idx239"><!></A>
<tr><td valign=top colspan=2 rowspan=1>
<B><I>Scalar-producing algorithms</I></B><BR>

<tr><td valign=top>
<SAMP>count()</SAMP><BR>
<td valign=top>
Counts number of elements matching value <BR>

<tr><td valign=top>
<SAMP>count_if()</SAMP><BR>
<td valign=top>
Counts elements matching predicate<BR>

<tr><td valign=top>
<SAMP>accumulate()</SAMP><BR>
<td valign=top>
Reduces sequence to a scalar value <BR>

<tr><td valign=top>
<SAMP>inner_product()</SAMP><BR>
<td valign=top>
Gives inner product of two parallel sequences<BR>

<tr><td valign=top>
<SAMP>equal()</SAMP><BR>
<td valign=top>
Checks two sequences for equality <BR>

<tr><td valign=top>
<SAMP>lexicographical_compare()</SAMP><BR>
<td valign=top>
Compares two sequences<BR>

<A NAME="idx240"><!></A>
<tr><td valign=top colspan=2 rowspan=1>
<B><I>Sequence-generating algorithms</I></B><BR>

<tr><td valign=top>
<SAMP>transform()</SAMP><BR>
<td valign=top>
Transforms each element<BR>

<tr><td valign=top>
<SAMP>partial_sum()</SAMP><BR>
<td valign=top>
Generates sequence of partial sums <BR>

<tr><td valign=top>
<SAMP>adjacent_difference()</SAMP><BR>
<td valign=top>
Generates sequence of adjacent differences<BR>

<A NAME="idx241"><!></A>
<tr><td valign=top colspan=2 rowspan=1>
 <B><I>Miscellaneous operations</I></B> <BR>

<tr><td valign=top>
<SAMP>for_each()</SAMP><BR>
<td valign=top>
Applies a function to each element of a collection <BR>


</TABLE>


</P>
<P>In this chapter, we illustrate the use of each algorithm with a series of short examples. Many of the algorithms are also used in the sample programs provided in the chapters on the various container classes. These cross references have been noted where appropriate.</P>
<A NAME="idx242"><!></A>
<P>All the short example programs described in this section are contained in a number of files, named <SAMP>alg1.cpp</SAMP> through <SAMP>alg6.cpp</SAMP>. In the files, the example programs are augmented with output statements describing the test programs and illustrating the results of executing the algorithms. So as not confuse the reader with unnecessary detail, we have generally omitted these output statements from the descriptions here. If you wish to see the text programs complete with output statements, you can compile and execute the test files. The expected output from these programs is also included in the distribution.</P>

<A NAME="1311"><H3>13.1.1 Include Files</H3></A>
<A NAME="idx243"><!></A>
<P>To use any of the generic algorithms, you must first include the appropriate header file. The majority of the functions are defined in the header file <SAMP>algorithm</SAMP>. The functions <SAMP>accumulate()</SAMP>, <SAMP>inner_product()</SAMP>, <SAMP>partial_sum()</SAMP>, and <SAMP>adjacent_difference()</SAMP> are defined in the header file <SAMP>numeric</SAMP>.</P>
<UL>
<PRE>
# include &lt;algorithm&gt;
# include &lt;numeric&gt;</PRE>
</UL>

<HR>
<A HREF="13.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="13-2.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
