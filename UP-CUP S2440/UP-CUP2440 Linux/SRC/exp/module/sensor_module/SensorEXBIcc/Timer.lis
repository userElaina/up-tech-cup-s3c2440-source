                        .module Timer.c
                        .area data(ram, con, rel)
 0000           _HoleCountH::
 0000                   .blkb 2
                        .area idata
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile C:\DOCUME~1\蔡颖鹏\桌面\SensorEXBIcc\Timer.c
 0002                   .dbsym e HoleCountH _HoleCountH i
                        .area text(rom, con, rel)
 0000                   .dbfile C:\DOCUME~1\蔡颖鹏\桌面\SensorEXBIcc\Timer.c
 0000                   .dbfunc e timer0_init _timer0_init fV
                        .even
 0000           _timer0_init::
 0000                   .dbline -1
 0000                   .dbline 7
 0000           ; #include "Generic.h"
 0000           ; #include "math.h"
 0000           ; 
 0000           ; unsigned int HoleCountH = 0;
 0000           ; 
 0000           ; void timer0_init(void)
 0000           ; {
 0000                   .dbline 9
 0000           ;       //cli();//FOR AVR Studio
 0000           ;       CLI();
 0000 F894              cli
 0002                   .dbline 10
 0002           ;       HoleCountH = 0;
 0002 2224              clr R2
 0004 3324              clr R3
 0006 30920100          sts _HoleCountH+1,R3
 000A 20920000          sts _HoleCountH,R2
 000E                   .dbline 12
 000E           ;       
 000E           ;       TIMSK = 0x01;
 000E 81E0              ldi R24,1
 0010 89BF              out 0x39,R24
 0012                   .dbline 13
 0012           ;       TCCR0 = 0x00; //stop
 0012 23BE              out 0x33,R2
 0014                   .dbline 14
 0014           ;       TCNT0 = 0x00; 
 0014 22BE              out 0x32,R2
 0016                   .dbline 15
 0016           ;       TCCR0 = 0x07; //start timer
 0016 87E0              ldi R24,7
 0018 83BF              out 0x33,R24
 001A                   .dbline 17
 001A           ;       //sei();//FOR AVR Studio
 001A           ;       SEI();
 001A 7894              sei
 001C                   .dbline -2
 001C           L1:
 001C                   .dbline 0 ; func end
 001C 0895              ret
 001E                   .dbend
                        .area vector(rom, abs)
                        .org 18
 0012 0FC0              rjmp _timer0_ovf_isr
                        .area text(rom, con, rel)
 001E                   .dbfile C:\DOCUME~1\蔡颖鹏\桌面\SensorEXBIcc\Timer.c
 001E                   .dbfunc e timer0_ovf_isr _timer0_ovf_isr fV
                        .even
 001E           _timer0_ovf_isr::
 001E 2A92              st -y,R2
 0020 8A93              st -y,R24
 0022 9A93              st -y,R25
 0024 2FB6              in R2,0x3f
 0026 2A92              st -y,R2
 0028                   .dbline -1
 0028                   .dbline 29
 0028           ; }
 0028           ; 
 0028           ; /*
 0028           ; //AVR Studio编译环境下使用一下中断函数
 0028           ; SIGNAL(TIMER0_OVF_vect)
 0028           ; {
 0028           ;       TCNT0 = 0x00;
 0028           ;       HoleCountH++;
 0028           ; }*/
 0028           ; #pragma interrupt_handler timer0_ovf_isr:10
 0028           ; void timer0_ovf_isr(void)
 0028           ; {
 0028                   .dbline 30
 0028           ;       TCNT0 = 0x00;
 0028 2224              clr R2
 002A 22BE              out 0x32,R2
 002C                   .dbline 31
 002C           ;       HoleCountH++;
 002C 80910000          lds R24,_HoleCountH
 0030 90910100          lds R25,_HoleCountH+1
 0034 0196              adiw R24,1
 0036 90930100          sts _HoleCountH+1,R25
 003A 80930000          sts _HoleCountH,R24
 003E                   .dbline -2
 003E           L2:
 003E 2990              ld R2,y+
 0040 2FBE              out 0x3f,R2
 0042 9991              ld R25,y+
 0044 8991              ld R24,y+
 0046 2990              ld R2,y+
 0048                   .dbline 0 ; func end
 0048 1895              reti
 004A                   .dbend
 004A                   .dbfunc e StartCountHole _StartCountHole fV
                        .even
 004A           _StartCountHole::
 004A                   .dbline -1
 004A                   .dbline 35
 004A           ; }
 004A           ; 
 004A           ; void StartCountHole(void)
 004A           ; {
 004A                   .dbline 36
 004A           ;       timer0_init();  
 004A DADF              rcall _timer0_init
 004C                   .dbline -2
 004C           L3:
 004C                   .dbline 0 ; func end
 004C 0895              ret
 004E                   .dbend
 004E                   .dbfunc e FinishCountHole _FinishCountHole fV
                        .even
 004E           _FinishCountHole::
 004E                   .dbline -1
 004E                   .dbline 40
 004E           ; }
 004E           ; 
 004E           ; void FinishCountHole(void)
 004E           ; {
 004E                   .dbline 41
 004E           ;       TCCR0 = 0x00;
 004E 2224              clr R2
 0050 23BE              out 0x33,R2
 0052                   .dbline -2
 0052           L4:
 0052                   .dbline 0 ; func end
 0052 0895              ret
 0054                   .dbend
 0054                   .dbfunc e EndCountHole _EndCountHole fi
                        .even
 0054           _EndCountHole::
 0054                   .dbline -1
 0054                   .dbline 45
 0054           ; }
 0054           ; 
 0054           ; unsigned int EndCountHole(void)
 0054           ; {
 0054                   .dbline 46
 0054           ;       return(HoleCountH*256+TCNT0);
 0054 20910000          lds R18,_HoleCountH
 0058 30910100          lds R19,_HoleCountH+1
 005C 00E0              ldi R16,256
 005E 11E0              ldi R17,1
 0060 00D0              rcall empy16s
 0062 1801              movw R2,R16
 0064 42B6              in R4,0x32
 0066 5524              clr R5
 0068 240C              add R2,R4
 006A 351C              adc R3,R5
 006C 8101              movw R16,R2
 006E                   .dbline -2
 006E           L5:
 006E                   .dbline 0 ; func end
 006E 0895              ret
 0070                   .dbend
 0070                   .dbfunc e timer1_init _timer1_init fV
                        .even
 0070           _timer1_init::
 0070                   .dbline -1
 0070                   .dbline 50
 0070           ; }
 0070           ; 
 0070           ; void timer1_init(void)
 0070           ; {
 0070                   .dbline 51
 0070           ;       TCCR1B = 0x00; //stop
 0070 2224              clr R2
 0072 2EBC              out 0x2e,R2
 0074                   .dbline 52
 0074           ;       TCNT1H = 0x00;
 0074 2DBC              out 0x2d,R2
 0076                   .dbline 53
 0076           ;       TCNT1L = 0x00;
 0076 2CBC              out 0x2c,R2
 0078                   .dbline 54
 0078           ;       OCR1AH = 0xFF;
 0078 8FEF              ldi R24,255
 007A 8BBD              out 0x2b,R24
 007C                   .dbline 55
 007C           ;       OCR1AL = 0xFF;
 007C 8ABD              out 0x2a,R24
 007E                   .dbline 56
 007E           ;       OCR1BH = 0xFF;
 007E 89BD              out 0x29,R24
 0080                   .dbline 57
 0080           ;       OCR1BL = 0xFF;
 0080 88BD              out 0x28,R24
 0082                   .dbline 58
 0082           ;       ICR1H  = 0xFF;
 0082 87BD              out 0x27,R24
 0084                   .dbline 59
 0084           ;       ICR1L  = 0xFF;
 0084 86BD              out 0x26,R24
 0086                   .dbline 60
 0086           ;       TCCR1A = 0x00;
 0086 2FBC              out 0x2f,R2
 0088                   .dbline 61
 0088           ;       TCCR1B = 0x07; //start Timer
 0088 87E0              ldi R24,7
 008A 8EBD              out 0x2e,R24
 008C                   .dbline -2
 008C           L6:
 008C                   .dbline 0 ; func end
 008C 0895              ret
 008E                   .dbend
 008E                   .dbfunc e GetHS1101 _GetHS1101 fi
 008E           ;             x3 -> y+8
 008E           ;             x2 -> y+4
 008E           ;           fout -> R12,R13
 008E           ;             x1 -> y+0
 008E           ;             RH -> R10,R11
                        .even
 008E           _GetHS1101::
 008E 00D0              rcall push_gset4
 0090 6097              sbiw R28,16
 0092                   .dbline -1
 0092                   .dbline 65
 0092           ; }
 0092           ; 
 0092           ; unsigned int GetHS1101(void)
 0092           ; {
 0092                   .dbline 66
 0092           ;       unsigned int fout = 0;
 0092 CC24              clr R12
 0094 DD24              clr R13
 0096                   .dbline 68
 0096           ;       double x1,x2,x3;
 0096           ;       unsigned int RH = 0;
 0096 AA24              clr R10
 0098 BB24              clr R11
 009A                   .dbline 69
 009A           ;       timer1_init();
 009A EADF              rcall _timer1_init
 009C                   .dbline 70
 009C           ;       delay_s(1);
 009C 01E0              ldi R16,1
 009E 10E0              ldi R17,0
 00A0 00D0              rcall _delay_s
 00A2                   .dbline 71
 00A2           ;       TCCR1B = 0x00; //stop
 00A2 2224              clr R2
 00A4 2EBC              out 0x2e,R2
 00A6                   .dbline 72
 00A6           ;       fout = TCNT1;//TCNT1H<<8+TCNT1L;//TCNT1H*256+TCNT1L;
 00A6 CCB4              in R12,0x2c
 00A8 DDB4              in R13,0x2d
 00AA                   .dbline 77
 00AA           ;       //在ICCAVR编译环境下，使用上述第二、三种计算方法，无论先访问高字节，
 00AA           ;       //还是先访问低字节，都会出错，郁闷~~~
 00AA           ;       
 00AA           ;       //电阻参数需调整
 00AA           ;       x1=6216.006216/(double)fout;
 00AA 00E0              ldi R16,<L8
 00AC 10E0              ldi R17,>L8
 00AE 00D0              rcall lpm32
 00B0 3A93              st -y,R19
 00B2 2A93              st -y,R18
 00B4 1A93              st -y,R17
 00B6 0A93              st -y,R16
 00B8 00E0              ldi R16,<L9
 00BA 10E0              ldi R17,>L9
 00BC 00D0              rcall lpm32
 00BE 3A93              st -y,R19
 00C0 2A93              st -y,R18
 00C2 1A93              st -y,R17
 00C4 0A93              st -y,R16
 00C6 8601              movw R16,R12
 00C8 1695              lsr R17
 00CA 0795              ror R16
 00CC 00D0              rcall int2fp
 00CE 3A93              st -y,R19
 00D0 2A93              st -y,R18
 00D2 1A93              st -y,R17
 00D4 0A93              st -y,R16
 00D6 00D0              rcall empy32fs
 00D8 8601              movw R16,R12
 00DA 0170              andi R16,1
 00DC 1070              andi R17,0
 00DE 00D0              rcall int2fp
 00E0 3A93              st -y,R19
 00E2 2A93              st -y,R18
 00E4 1A93              st -y,R17
 00E6 0A93              st -y,R16
 00E8 00D0              rcall add32fs
 00EA 00D0              rcall div32f
 00EC FE01              movw R30,R28
 00EE 0083              std z+0,R16
 00F0 1183              std z+1,R17
 00F2 2283              std z+2,R18
 00F4 3383              std z+3,R19
 00F6                   .dbline 78
 00F6           ;       x2=x1*x1;
 00F6 FE01              movw R30,R28
 00F8 2080              ldd R2,z+0
 00FA 3180              ldd R3,z+1
 00FC 4280              ldd R4,z+2
 00FE 5380              ldd R5,z+3
 0100 5A92              st -y,R5
 0102 4A92              st -y,R4
 0104 3A92              st -y,R3
 0106 2A92              st -y,R2
 0108 FE01              movw R30,R28
 010A            ; stack offset 4
 010A 2480              ldd R2,z+4
 010C 3580              ldd R3,z+5
 010E 4680              ldd R4,z+6
 0110 5780              ldd R5,z+7
 0112 5A92              st -y,R5
 0114 4A92              st -y,R4
 0116 3A92              st -y,R3
 0118 2A92              st -y,R2
 011A 00D0              rcall empy32f
 011C FE01              movw R30,R28
 011E 0483              std z+4,R16
 0120 1583              std z+5,R17
 0122 2683              std z+6,R18
 0124 3783              std z+7,R19
 0126                   .dbline 79
 0126           ;       x3=x2*x1;
 0126 FE01              movw R30,R28
 0128 2480              ldd R2,z+4
 012A 3580              ldd R3,z+5
 012C 4680              ldd R4,z+6
 012E 5780              ldd R5,z+7
 0130 5A92              st -y,R5
 0132 4A92              st -y,R4
 0134 3A92              st -y,R3
 0136 2A92              st -y,R2
 0138 FE01              movw R30,R28
 013A            ; stack offset 4
 013A 2480              ldd R2,z+4
 013C 3580              ldd R3,z+5
 013E 4680              ldd R4,z+6
 0140 5780              ldd R5,z+7
 0142 5A92              st -y,R5
 0144 4A92              st -y,R4
 0146 3A92              st -y,R3
 0148 2A92              st -y,R2
 014A 00D0              rcall empy32f
 014C FE01              movw R30,R28
 014E 0087              std z+8,R16
 0150 1187              std z+9,R17
 0152 2287              std z+10,R18
 0154 3387              std z+11,R19
 0156                   .dbline 80
 0156           ;       RH=(unsigned int)(-3.4656*1000*x3+1.0732*10000*x2-1.0457*10000*x1+3.2459*1000);
 0156 00E0              ldi R16,<L12
 0158 10E0              ldi R17,>L12
 015A 00D0              rcall lpm32
 015C 3A93              st -y,R19
 015E 2A93              st -y,R18
 0160 1A93              st -y,R17
 0162 0A93              st -y,R16
 0164 FE01              movw R30,R28
 0166            ; stack offset 4
 0166 2484              ldd R2,z+12
 0168 3584              ldd R3,z+13
 016A 4684              ldd R4,z+14
 016C 5784              ldd R5,z+15
 016E 5A92              st -y,R5
 0170 4A92              st -y,R4
 0172 3A92              st -y,R3
 0174 2A92              st -y,R2
 0176 00D0              rcall empy32fs
 0178 00E0              ldi R16,<L13
 017A 10E0              ldi R17,>L13
 017C 00D0              rcall lpm32
 017E 3A93              st -y,R19
 0180 2A93              st -y,R18
 0182 1A93              st -y,R17
 0184 0A93              st -y,R16
 0186 FE01              movw R30,R28
 0188            ; stack offset 8
 0188 2484              ldd R2,z+12
 018A 3584              ldd R3,z+13
 018C 4684              ldd R4,z+14
 018E 5784              ldd R5,z+15
 0190 5A92              st -y,R5
 0192 4A92              st -y,R4
 0194 3A92              st -y,R3
 0196 2A92              st -y,R2
 0198 00D0              rcall empy32fs
 019A 00D0              rcall add32fs
 019C 00E0              ldi R16,<L14
 019E 10E0              ldi R17,>L14
 01A0 00D0              rcall lpm32
 01A2 3A93              st -y,R19
 01A4 2A93              st -y,R18
 01A6 1A93              st -y,R17
 01A8 0A93              st -y,R16
 01AA FE01              movw R30,R28
 01AC            ; stack offset 8
 01AC 2084              ldd R2,z+8
 01AE 3184              ldd R3,z+9
 01B0 4284              ldd R4,z+10
 01B2 5384              ldd R5,z+11
 01B4 5A92              st -y,R5
 01B6 4A92              st -y,R4
 01B8 3A92              st -y,R3
 01BA 2A92              st -y,R2
 01BC 00D0              rcall empy32fs
 01BE 00D0              rcall sub32fs
 01C0 00E0              ldi R16,<L15
 01C2 10E0              ldi R17,>L15
 01C4 00D0              rcall lpm32
 01C6 3A93              st -y,R19
 01C8 2A93              st -y,R18
 01CA 1A93              st -y,R17
 01CC 0A93              st -y,R16
 01CE 00D0              rcall add32f
 01D0 FE01              movw R30,R28
 01D2 0487              std z+12,R16
 01D4 1587              std z+13,R17
 01D6 2687              std z+14,R18
 01D8 3787              std z+15,R19
 01DA FE01              movw R30,R28
 01DC 2484              ldd R2,z+12
 01DE 3584              ldd R3,z+13
 01E0 4684              ldd R4,z+14
 01E2 5784              ldd R5,z+15
 01E4 5A92              st -y,R5
 01E6 4A92              st -y,R4
 01E8 3A92              st -y,R3
 01EA 2A92              st -y,R2
 01EC 00E0              ldi R16,<L16
 01EE 10E0              ldi R17,>L16
 01F0 00D0              rcall lpm32
 01F2 3A93              st -y,R19
 01F4 2A93              st -y,R18
 01F6 1A93              st -y,R17
 01F8 0A93              st -y,R16
 01FA 00D0              rcall cmp32f
 01FC BCF0              brlt L10
 01FE FE01              movw R30,R28
 0200 2484              ldd R2,z+12
 0202 3584              ldd R3,z+13
 0204 4684              ldd R4,z+14
 0206 5784              ldd R5,z+15
 0208 5A92              st -y,R5
 020A 4A92              st -y,R4
 020C 3A92              st -y,R3
 020E 2A92              st -y,R2
 0210 00E0              ldi R16,<L16
 0212 10E0              ldi R17,>L16
 0214 00D0              rcall lpm32
 0216 3A93              st -y,R19
 0218 2A93              st -y,R18
 021A 1A93              st -y,R17
 021C 0A93              st -y,R16
 021E 00D0              rcall sub32f
 0220 00D0              rcall fp2int
 0222 C801              movw R24,R16
 0224 8050              subi R24,0  ; offset = 32768
 0226 9048              sbci R25,128
 0228 6C01              movw R12,R24
 022A 07C0              rjmp L11
 022C           L10:
 022C FE01              movw R30,R28
 022E 0485              ldd R16,z+12
 0230 1585              ldd R17,z+13
 0232 2685              ldd R18,z+14
 0234 3785              ldd R19,z+15
 0236 00D0              rcall fp2int
 0238 6801              movw R12,R16
 023A           L11:
 023A 5601              movw R10,R12
 023C                   .dbline 82
 023C           ; 
 023C           ;       if(RH>99)RH=99;
 023C 83E6              ldi R24,99
 023E 90E0              ldi R25,0
 0240 8C15              cp R24,R12
 0242 9D05              cpc R25,R13
 0244 08F4              brsh L17
 0246                   .dbline 82
 0246 5C01              movw R10,R24
 0248           L17:
 0248                   .dbline 83
 0248           ;       if(RH<0.01)RH=0;
 0248 00E0              ldi R16,<L9
 024A 10E0              ldi R17,>L9
 024C 00D0              rcall lpm32
 024E 3A93              st -y,R19
 0250 2A93              st -y,R18
 0252 1A93              st -y,R17
 0254 0A93              st -y,R16
 0256 8501              movw R16,R10
 0258 1695              lsr R17
 025A 0795              ror R16
 025C 00D0              rcall int2fp
 025E 3A93              st -y,R19
 0260 2A93              st -y,R18
 0262 1A93              st -y,R17
 0264 0A93              st -y,R16
 0266 00D0              rcall empy32fs
 0268 8501              movw R16,R10
 026A 0170              andi R16,1
 026C 1070              andi R17,0
 026E 00D0              rcall int2fp
 0270 3A93              st -y,R19
 0272 2A93              st -y,R18
 0274 1A93              st -y,R17
 0276 0A93              st -y,R16
 0278 00D0              rcall add32fs
 027A 00E0              ldi R16,<L21
 027C 10E0              ldi R17,>L21
 027E 00D0              rcall lpm32
 0280 3A93              st -y,R19
 0282 2A93              st -y,R18
 0284 1A93              st -y,R17
 0286 0A93              st -y,R16
 0288 00D0              rcall cmp32f
 028A 14F4              brge L19
 028C                   .dbline 83
 028C AA24              clr R10
 028E BB24              clr R11
 0290           L19:
 0290                   .dbline 84
 0290           ;       return RH;
 0290 8501              movw R16,R10
 0292                   .dbline -2
 0292           L7:
 0292 6096              adiw R28,16
 0294 00D0              rcall pop_gset4
 0296                   .dbline 0 ; func end
 0296 0895              ret
 0298                   .dbsym l x3 8 D
 0298                   .dbsym l x2 4 D
 0298                   .dbsym r fout 12 i
 0298                   .dbsym l x1 0 D
 0298                   .dbsym r RH 10 i
 0298                   .dbend
                        .area lit(rom, con, rel)
 0000           L21:
 0000 0AD7233C          .word 0xd70a,0x3c23
 0004           L16:
 0004 00000047          .word 0x0,0x4700
 0008           L15:
 0008 66DE4A45          .word 0xde66,0x454a
 000C           L14:
 000C 00642346          .word 0x6400,0x4623
 0010           L13:
 0010 00B02746          .word 0xb000,0x4627
 0014           L12:
 0014 9A9958C5          .word 0x999a,0xc558
 0018           L9:
 0018 00000040          .word 0x0,0x4000
 001C           L8:
 001C 0D40C245          .word 0x400d,0x45c2
