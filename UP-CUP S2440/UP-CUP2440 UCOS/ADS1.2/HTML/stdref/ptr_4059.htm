<HTML><HEAD><TITLE>ptr_fun</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="pri_2327.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="pus_5295.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>ptr_fun</H2>
<PRE><HR>Function Adaptor
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>A function that is overloaded to adapt a pointer to a function, to take the place of a function.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;functional&gt;
template&lt;class Arg, class Result&gt;
pointer_to_unary_function&lt;Arg, Result&gt;
  <B>ptr_fun</B> (Result (*f)(Arg));

template&lt;class Arg1, class Arg2, class Result&gt;
pointer_to_binary_function&lt;Arg1, Arg2, Result&gt;
  <B>ptr_fun</B> (Result (*x)(Arg1, Arg2));</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I><A HREF="poi_7375.htm">pointer_to_unary_function</A></I></B> and <B><I><A HREF="poi_3537.htm">pointer_to_binary_function</A></I></B> classes encapsulate pointers to functions and use <SAMP>operator()</SAMP> so that the resulting object serves as a function object for the function.</P>
<P>The <SAMP>ptr_fun</SAMP> function is overloaded to create instances of <B><I><A HREF="poi_7375.htm">pointer_to_unary_function</A></I></B> or <B><I><A HREF="poi_3537.htm">pointer_to_binary_function</A></I></B> when included with the appropriate pointer to a function. </P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// pnt2fnct.cpp
//
 #include &lt;functional&gt;
 #include &lt;deque&gt;
 #include &lt;vector&gt;
 #include &lt;algorithm&gt;
 #include &lt;iostream&gt;
 using namespace std;

 //Create a function
 int factorial(int x)
 {
   int result = 1;
   for(int i = 2; i &lt;= x; i++)
       result *= i;
   return result;
 }

 int main()
 {
   //Initialize a deque with an array of ints
   int init[7] = {1,2,3,4,5,6,7};
   deque&lt;int&gt; d(init, init+7);

   //Create an empty vector to store the factorials
   vector&lt;int&gt; v((size_t)7);

   //Transform the numbers in the deque to their 
   //factorials and store in the vector
   transform(d.begin(), d.end(), v.begin(),
             <B>ptr_fun</B>(factorial));

   //Print the results
   cout &lt;&lt; "The following numbers: " &lt;&lt; endl &lt;&lt; "     ";
   copy(d.begin(),d.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));

   cout &lt;&lt; endl &lt;&lt; endl;
   cout &lt;&lt; "Have the factorials: " &lt;&lt; endl &lt;&lt; "     ";
   copy(v.begin(),v.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));

   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
The following numbers:
     1 2 3 4 5 6 7
Have the factorials:
     1 2 6 24 120 720 5040</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you need to write:</P>
<P><SAMP>vector&lt;int, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="Fun_4316.htm">Function Objects</A></I></B>, <B><I><A HREF="poi_3537.htm">pointer_to_binary_function</A></I></B>, <B><I><A HREF="poi_7375.htm">pointer_to_unary_function</A></I></B></P>


<BR>
<HR>
<A HREF="pri_2327.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="pus_5295.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
