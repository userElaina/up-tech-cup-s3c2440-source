<HTML><HEAD><TITLE>11.2 The priority queue Operations</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="11-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="11-3.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>11.2 The priority queue Operations</H2>
<A NAME="idx198"><!></A>
<P>A <B><I><A HREF="../../stdref/pri_2327.htm">priority_queue</A></I></B> is a data structure that can hold elements of type <SAMP>T</SAMP> and implement the five operations given in <A HREF="#Table 18">Table 18</A>:</P>
<TABLE BORDER CELLPADDING=3 CELLSPACING=3>
<H4><A NAME="Table 18">Table 18 -- priority_queue operations</A></H4><tr><td valign=top><B>Function</B><td valign=top><B>Implemented operation</B>
<A NAME="idx199"><!></A>
<tr><td valign=top>
<SAMP>push(T)</SAMP><BR>
<td valign=top>
 Adds a new value to the collection being maintained<BR>

<A NAME="idx200"><!></A>
<tr><td valign=top>
<SAMP>top()</SAMP><BR>
<td valign=top>
 Returns a reference to the smallest element in the collection<BR>

<A NAME="idx201"><!></A>
<tr><td valign=top>
<SAMP>pop()</SAMP><BR>
<td valign=top>
 Deletes the smallest element from the collection<BR>

<A NAME="idx202"><!></A>
<tr><td valign=top>
<SAMP>size()</SAMP><BR>
<td valign=top>
 Returns the number of elements in the collection<BR>

<A NAME="idx203"><!></A>
<tr><td valign=top>
<SAMP>empty()</SAMP><BR>
<td valign=top>
 Returns true if the collection is empty <BR>


</TABLE>


</P>
<P>Elements of type <SAMP>T</SAMP> must be comparable to each other, either through the use of the default less-than operator <SAMP>&lt;</SAMP>, or through a comparison function passed either as a template argument or as an optional argument on the constructor. The latter form will be illustrated in the example program provided later in this chapter. As with all the containers in the Standard Library, there are several constructors. The <I>default constructor</I> requires either no arguments or the optional comparison function. An <I>alternative constructor</I> takes an iterator <B><I><A HREF="../../stdref/pai_5818.htm">pair</A></I></B>, and initializes the values in the container from the argument sequence. Once more, an optional third argument can be used to define the comparison function.</P>
<P>The <B><I><A HREF="../../stdref/pri_2327.htm">priority_queue</A></I></B> datatype is built on top of a container class, which is the structure actually used to maintain the values in the collection. There are two containers in the Standard C++ Library that can be used to construct <B><I>priority_queues</I></B>: <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B><I>s</I> or <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B><I>s</I>. By default, a <B><I>priority_queue</I></B> will use <B><I>vector</I></B>.</P>

<A NAME="1121"><H3>11.2.1 Declaration and Initialization of priority queue</H3></A>
<A NAME="idx204"><!></A>
<A NAME="fn3"><!></A>
<P>The following illustrates the declaration of several <B><I><A HREF="../../stdref/pri_2327.htm">priority_queue</A></I></B>s<SUP><A HREF="endnotes.htm#fn3">3</A></SUP>:</P>
<UL>
<PRE>
priority_queue&lt; int &gt; queue_one;      //uses vector and less&lt;int&gt;
priority_queue&lt; int, vector&lt;int&gt;, greater&lt;int&gt; &gt; queue_two;
priority_queue&lt; double, deque&lt;double&gt; &gt; 
      queue_three(aList.begin(), aList.end());
priority_queue&lt; eventStruct, vector&lt;eventStruct&gt; &gt; 
      queue_four(eventComparison);
priority_queue&lt; eventStruct, deque&lt;eventStruct&gt; &gt; 
      queue_five(aVector.begin(), aVector.end(), eventComparison);</PRE>
</UL>
<P>The <B><I><A HREF="../../stdref/que_0953.htm">queue</A></I></B>s constructed out of <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B>s tend to be somewhat smaller, while the <B><I>queue</I></B>s constructed out of <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B>s can be somewhat faster, particularly if the number of elements in the <B><I>queue</I></B> varies widely over the course of execution. However, these differences are slight, and either form generally works in most circumstances.</P>
<P>Because the <B><I><A HREF="../../stdref/pri_2327.htm">priority_queue</A></I></B> data structure does not itself know how to construct iterators, very few of the algorithms noted in <A HREF="13.htm">Chapter 13</A> can be used with <B><I>priority_queue</I></B>s. Instead of iterating over values, a typical algorithm that uses a <B><I>priority_queue</I></B> constructs a loop, which repeatedly pulls values from the structure (using the <SAMP>top()</SAMP> and <SAMP>pop()</SAMP> operations) until the collection becomes empty (tested using the <SAMP>empty()</SAMP> operation). The example program described in <A HREF="11-3.htm">Section 11.3</A> will illustrate this use.</P>
<A NAME="idx205"><!></A>
<A NAME="fn4"><!></A>
<P>A <B><I><A HREF="../../stdref/pri_2327.htm">priority_queue</A></I></B> is implemented by internally building a data structure called a <B><I>heap</I></B>. Abstractly, a <B><I>heap</I></B><SUP><A HREF="endnotes.htm#fn4">4</A></SUP> is a binary tree in which the value associated with every node is smaller than or equal to the value associated with either child node.</P>

<HR>
<A HREF="11-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="11-3.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
