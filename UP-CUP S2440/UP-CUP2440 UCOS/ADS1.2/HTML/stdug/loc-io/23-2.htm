<HTML><HEAD><TITLE>23.2 The Locking Mechanism</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="23-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="23-3.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>23.2 The Locking Mechanism</H2>

<A NAME="idx494"><!></A>
<P>The locking mechanism has been designed for maximum efficiency, with no reentrant locks needed. There are two different mutex objects involved in this scheme: </P>
<UL>
<LI><P>The first mutex object is located in the class <B><I><A HREF="../../stdref/ios_8948.htm">ios_base</A></I></B>. It enforces multithread safety for all formatting operations performed on the stream, for imbuing the stream with a new locale object, and for accessing the raw storage mechanism (pword, iword). All functions performing these operations lock the mutex object beforehand and release it afterwards. These operations are not time-critical and do not occur often in comparison to buffer operations like inserting a character. They are located in classes <B><I>ios_base</I></B> or <B><I><A HREF="../../stdref/bas_6405.htm">basic_ios</A></I></B>. </P>
</LI>
<LI><P>The second mutex object, located in the <B><I><A HREF="../../stdref/bas_0582.htm">basic_streambuf</A></I></B> class, protects the buffer. The locking and unlocking of this mutex object is critical, since buffer operations are on the direct path of performance issues. </P>
</LI>
</UL>
<A NAME="idx495"><!></A>
<P>It is easy to see that locking and unlocking the buffer after each independent buffer operation would be disastrous. For example, when inserting a <SAMP>char*</SAMP> sequence of characters, a call to an inline <B><I><A HREF="../../stdref/bas_0582.htm">basic_streambuf</A></I></B> function is made for each character inserted; therefore, the locking mechanism is carried out at a higher level. For all formatted and unformatted stream functions, the locking is performed in the <B><I>sentry</I></B> object constructor, and the release in the <B><I>sentry</I></B> object destructor. If the function does not make use of the <B><I>sentry</I></B> class, the lock is directly performed inside the function. This is the case with basic_istream::seekg and basic_ostream::seekg. </P>
<P>Consider the following example: </P>
<TABLE BORDER=0 CELLPADDING=3 CELLSPACING=3>

<tr><td valign=top>
<B>Thread 1:</B><BR>
<td valign=top>
<B>Thread 2:</B><BR>

<tr><td valign=top>
<SAMP>cout &lt;&lt; "Hello Thread 1" &lt;&lt; endl;</SAMP><BR>
<td valign=top>
<SAMP>cout &lt;&lt; "Hello Thread 2" &lt;&lt; endl;</SAMP><BR>


</TABLE>


</P>
<P>If <B>Thread 1</B> is the first thread locking the buffer, the sequence of characters <SAMP>"Hello Thread 1"</SAMP> is output to <SAMP>stdout</SAMP> and the lock is released; <B>Thread 2</B> then acquires the lock, outputs its sequence of characters, and releases it. </P>

<A NAME="2321"><H3>23.2.1 Protecting the Buffer</H3></A>
<A NAME="idx496"><!></A>
<P>Notice that only one lock occurs on the <B><I><A HREF="../../stdref/bas_0582.htm">basic_streambuf</A></I></B> mutex object for each stream operation. The advantage of this scheme is obviously high performance, but the drawback is that while buffer functionality is directly accessed, the buffer is left unprotected. We therefore provide functions and manipulators to solve this problem. The following example explains how they work:</P>
<TABLE BORDER=0 CELLPADDING=3 CELLSPACING=3>

<tr><td valign=top>
<B>Thread 1:</B><BR>
<td valign=top>
<B>Thread 2:</B><BR>

<tr><td valign=top>
<SAMP>cout &lt;&lt; "Hello Thread 1" &lt;&lt; endl;</SAMP><BR>
<td valign=top>
<SAMP>cout&lt;&lt; __lock;</SAMP><BR>
  do {<BR>
  cout.rdbuf()-&gt;sputc(*t);<BR>
  } while ( *t++!=0 )<BR>
cout &lt;&lt; __unlock;<BR>


</TABLE>


</P>
<P>In this scheme, if <B>Thread 2</B> is the first one to execute, when it gets to the statement <SAMP>cout&lt;&lt; __lock;</SAMP>, it locks the <B><I><A HREF="../../stdref/bas_0582.htm">basic_streambuf</A></I></B> object pointed at by <SAMP>cout.rdbuf()</SAMP>. <B>Thread 1</B> cannot output its sequence of characters until <B>Thread 2</B> reaches the statement <SAMP>cout &lt;&lt; __unlock;</SAMP>, which releases the lock. This technique is easy to use and allows high performance for both stream and buffer operations.</P>

<A NAME="2322"><H3>23.2.2 Locking Several Stream Operations</H3></A>
<A NAME="idx497"><!></A>
<P>There is also a way to lock several stream operations within one thread in order to preserve the global order of operations carried out by several threads running concurrently. The following example illustrates this technique:</P>
<TABLE BORDER=0 CELLPADDING=3 CELLSPACING=3>

<tr><td valign=top>
<B>Thread 1:</B><BR>
<td valign=top>
<B>Thread 2:</B><BR>

<tr><td valign=top>
<SAMP>cout &lt;&lt; __lock;</SAMP><BR>
<SAMP>cout &lt;&lt; "Thread 1 begin" &lt;&lt; endl;</SAMP><BR>
<SAMP>cout &lt;&lt; "Thread 1 completion" &lt;&lt; endl;</SAMP><BR>
<SAMP>cout &lt;&lt; __unlock;</SAMP><BR>
<td valign=top>
<SAMP>cout &lt;&lt; "Thread 2 begin" &lt;&lt; endl;</SAMP><BR>


</TABLE>


</P>
<P>In this example, if <B>Thread 1</B> is the first thread locking the <B><I><A HREF="../../stdref/bas_0582.htm">basic_streambuf</A></I></B> object attached to cout, <B>Thread 2</B> cannot output its sequence of characters until <B>Thread 1</B> reaches the statement cout &lt;&lt; __unlock<SAMP>;</SAMP>. The result is to preserve the order of the output, which is:</P>
<TABLE BORDER=0 CELLPADDING=3 CELLSPACING=3>

<tr><td valign=top>
<B>Thread 1 locking first:</B><BR>
<td valign=top>
<SAMP>Thread 1 begin</SAMP><BR>
<SAMP>Thread 1 completion</SAMP><BR>
<SAMP>Thread 2 begin</SAMP><BR>

<tr><td valign=top>
<B>Thread 2 locking first:</B><BR>
<td valign=top>
<SAMP>Thread 2 begin</SAMP><BR>
<SAMP>Thread 1 begin</SAMP><BR>
<SAMP>Thread 1 completion</SAMP><BR>


</TABLE>


</P>

<HR>
<A HREF="23-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="23-3.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
