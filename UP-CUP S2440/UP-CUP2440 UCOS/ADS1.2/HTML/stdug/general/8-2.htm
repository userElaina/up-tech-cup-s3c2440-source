<HTML><HEAD><TITLE>8.2 set and multiset Operations</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="8-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="8-3.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>8.2 set and multiset Operations</H2>
<A NAME="idx125"><!></A>
<P>The member functions provided by the <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B> and <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B> datatypes are described in the following sections. Note that while member functions provide basic operations, the utility of these data structures is greatly extended through the use of the generic algorithms described in <A HREF="IV.htm">Part IV</A>.</P>

<A NAME="821"><H3>8.2.1 Declaration and Initialization of set</H3></A>
<A NAME="idx126"><!></A>
<P>A <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B> is a template data structure, specialized by the type of the elements it contains and the operator used to compare keys. The latter argument is optional and, if not provided, the less-than operator for the key type is assumed. The element type can be a primitive language type, such as <SAMP>integer</SAMP> or <SAMP>double</SAMP>; a pointer type; or a user-defined type. The element type must recognize both the equality testing operator <SAMP>==</SAMP> and the less-than comparison operator <SAMP>&lt;</SAMP>.</P>
<P>A <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B> can be declared with no initial elements, or initialized from another container by providing a pair of iterators. The initialization of containers using a pair of iterators requires a mechanism that is still not widely supported by compilers. If not provided, the equivalent effect can be produced by declaring an empty set and using the <SAMP>copy()</SAMP> generic algorithm to copy values into the set. </P>
<P>Whether a set is declared with no initial elements or initialized from another container, an optional argument is an alternative comparison function; this value overrides the value provided by the template parameter. This mechanism is useful if a program contains two or more sets with the same values but different orderings, as it prevents more than one copy of the set member function from being instantiated. However, the contained template parameter type and the type passed to the container constructor must be the same. The copy constructor can be used to form a new set that is a clone, or copy, of an existing set.</P>
<UL>
<PRE>
set &lt;int&gt; set_one;

set &lt;int, greater&lt;int&gt; &gt; set_two;
set &lt;int, greater&lt;int&gt; &gt; set_three(greater&lt;int&gt;());

set &lt;gadget, less&lt;gadget&gt; &gt; gset;
set &lt;gadget&gt; gset(less&lt;gadget&gt;());

set &lt;int&gt; set_four (aList.begin(), aList.end());
set &lt;int, greater&lt;int&gt;&gt; set_five 
   (aList.begin(), aList.end(), greater&lt;int&gt;());

   set &lt;int&gt; set_six (set_four);                // copy constructor</PRE>
</UL>
<A NAME="idx127"><!></A>
<P>A set can be assigned to another set, and two sets can exchange their values using the <SAMP>swap()</SAMP> operation in a manner analogous to other Standard C++ Library containers.</P>
<UL>
<PRE>
set_one = set_five;
set_six.swap(set_two);</PRE>
</UL>

<A NAME="822"><H3>8.2.2 Type Definitions</H3></A>
<A NAME="idx128"><!></A>
<P>The classes <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B> and <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B> include a number of type definitions, most commonly used in declaration statements. For example, an iterator for a set of <SAMP>integer</SAMP>s can be declared in the following fashion:</P>
<UL>
<PRE>
set&lt;int&gt;::iterator location;</PRE>
</UL>
<P>In addition to <SAMP>iterator</SAMP>, <A HREF="#Table 13">Table 13</A> defines the following types:</P>

<TABLE BORDER CELLPADDING=3 CELLSPACING=3>
<H4><A NAME="Table 13">Table 13 -- Type definitions for class set and class multiset</A> </H4><tr><td valign=top><B>Type</B><td valign=top><B>Definition</B>&nbsp;
<tr><td valign=top>
<SAMP>value_type</SAMP><BR>
<td valign=top>
The type associated with the elements the set maintains.<BR>

<tr><td valign=top>
<SAMP>const_iterator</SAMP><BR>
<td valign=top>
An iterator that does not allow modification of the underlying sequence.<BR>

<tr><td valign=top>
<SAMP>reverse_iterator</SAMP><BR>
<td valign=top>
An iterator that moves in a backward direction.<BR>

<tr><td valign=top>
<SAMP>const_reverse_iterator</SAMP><BR>
<td valign=top>
A combination constant and reverse iterator.<BR>

<tr><td valign=top>
<SAMP>reference</SAMP><BR>
<td valign=top>
A reference to an underlying element.<BR>

<tr><td valign=top>
<SAMP>const_reference</SAMP><BR>
<td valign=top>
A reference to an underlying element that will not permit modification.<BR>

<tr><td valign=top>
<SAMP>size_type</SAMP><BR>
<td valign=top>
An unsigned integer type, used to refer to the size of containers.<BR>

<tr><td valign=top>
<SAMP>value_compare</SAMP><BR>
<td valign=top>
A function that can be used to compare two elements.<BR>

<tr><td valign=top>
<SAMP>difference_type</SAMP><BR>
<td valign=top>
A signed integer type, used to describe the distance between iterators.<BR>

<tr><td valign=top>
<SAMP>allocator_type</SAMP><BR>
<td valign=top>
An allocator used by the container or all storage management.<BR>


</TABLE>

<A NAME="823"><H3>8.2.3 Insertion</H3></A>
<A NAME="idx129"><!></A>
<P>Unlike a <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B> or <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B>, there is only one way to add a new element to a <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>. A value can be inserted into a <B><I>set</I></B> or a <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B> using the <SAMP>insert()</SAMP> member function. With a <B><I>multiset</I></B>, the function returns an iterator that denotes the value just inserted. Insert operations into a <B><I>set</I></B> return a <B><I><A HREF="../../stdref/pai_5818.htm">pair</A></I></B> of values, in which the first field contains an iterator, and the second field contains a boolean value that is true if the element was inserted, and false otherwise. </P>
<BLOCKQUOTE><HR>
<B>NOTE: If you want to use the pair datatype without using maps, you should include the header file named utility.
</B><HR></BLOCKQUOTE>
<P>Recall that in a <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>, an element will not be inserted if it matches an element already contained in the collection.</P>
<UL>
<PRE>
set_one.insert (18);

if (set_one.insert(18).second)
   cout &lt;&lt; "element was inserted" &lt;&lt; endl;
else
   cout &lt;&lt; "element was not inserted " &lt;&lt; endl;</PRE>
</UL>
<P>Insertions of several elements from another container can also be performed using an iterator pair:</P>
<UL>
<PRE>
set_one.insert (set_three.begin(), set_three.end());</PRE>
</UL>
<P>The <B><I><A HREF="../../stdref/pai_5818.htm">pair</A></I></B> data structure is a tuple of values. The first value is accessed through the field name <SAMP>first</SAMP>, while the second is, naturally, named <SAMP>second</SAMP>. A function named <SAMP>make_pair()</SAMP> simplifies the task of producing an instance of class <B><I>pair</I></B>.</P>
<UL>
<PRE>
template &lt;class T1, class T2&gt;
struct pair {
   T1 first;
   T2 second;
   pair (const T1 &amp; x, const T2 &amp; y) : first(x), second(y) { }
};

template &lt;class T1, class T2&gt;
inline pair&lt;T1, T2&gt; make_pair(const T1&amp; x, const T2&amp; y)
   { return pair&lt;T1, T2&gt;(x, y); }</PRE>
</UL>
<P>In determining the equivalence of keys, for example, to determine if the key portion of a new element matches any existing key, the comparison function for keys is used, and not the equivalence operator <SAMP>==</SAMP>. Two keys are deemed equivalent if the comparison function used to order key values yields false in both directions; that is, if <SAMP>Compare(key1, key2)</SAMP> is false, and if <SAMP>Compare(key2, key1)</SAMP> is false, then <SAMP>key1</SAMP> and <SAMP>key2</SAMP> are considered equivalent.</P>

<A NAME="824"><H3>8.2.4 Removal of Elements from a set</H3></A>
<A NAME="idx130"><!></A>
<P>Values are removed from a <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B> using the member function <SAMP>erase()</SAMP>. The argument can be either a specific value, an iterator that denotes a single value, or a pair of iterators that denote a range of values. When the first form is used on a <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B>, all arguments matching the argument value are removed, and the return value indicates the number of elements that have been erased:</P>
<UL>
<PRE>
// erase element equal to 4
set_three.erase(4);

// erase element five    set&lt;int&gt;::iterator five = set_three.find(5);
set_three.erase(five);

// erase all values between seven and eleven
set&lt;int&gt;::iterator seven = set_three.find(7);
set&lt;int&gt;::iterator eleven = set_three.find(11);
set_three.erase (seven, eleven);
</PRE>
</UL>
<P>If the underlying element type provides a destructor, then the destructor is invoked prior to removing the element from the collection.</P>

<A NAME="825"><H3>8.2.5 Searching and Counting</H3></A>
<A NAME="idx131"><!></A>
<P>The member function <SAMP>size()</SAMP> yields the number of elements held by a container. The member function <SAMP>empty()</SAMP> returns a boolean true value if the container is empty, and is generally faster than testing the size against zero.</P>
<A NAME="idx132"><!></A>
<P>The member function <SAMP>find()</SAMP> takes an element value, and returns an iterator denoting the location of the value in the <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B> if it is present, or a value matching the end-of-set value yielded by the function <SAMP>end()</SAMP> if it is not. If a <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B> contains more than one matching element, the value returned can be any appropriate value.</P>
<UL>
<PRE>
set&lt;int&gt;::iterator five = set_three.find(5);
if (five != set_three.end())
    cout &lt;&lt; "set contains a five" &lt;&lt; endl;</PRE>
</UL>
<A NAME="idx133"><!></A>
<P>The member functions <SAMP>lower_bound()</SAMP> and <SAMP>upper_bound()</SAMP> are most useful with <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B>s, since with <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>s they simply mimic the function <SAMP>find()</SAMP>. The member function <SAMP>lower_bound()</SAMP> yields the first entry that matches the argument key, while the member function <SAMP>upper_bound()</SAMP> returns the first value past the last entry matching the argument. Finally, the member function <SAMP>equal_range()</SAMP> returns a <B><I><A HREF="../../stdref/pai_5818.htm">pair</A></I></B> of iterators holding the lower and upper bounds.</P>
<A NAME="idx134"><!></A>
<P>The member function <SAMP>count()</SAMP> returns the number of elements that match the argument. For a <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>, this value is either zero or one, whereas for a <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B> it can be any nonnegative value. Since a non-zero integer value is treated as true, the <SAMP>count()</SAMP> function can be used to test for inclusion of an element, if all that is desired is to determine whether or not the element is present in the set. The alternative, using <SAMP>find(),</SAMP> requires testing the result returned by <SAMP>find()</SAMP> against the end-of-collection iterator.</P>
<UL>
<PRE>
if (set_three.count(5))
   cout &lt;&lt; "set contains a five" &lt;&lt; endl;</PRE>
</UL>

<A NAME="826"><H3>8.2.6 Iterators</H3></A>
<A NAME="idx135"><!></A>
<P>The member functions <SAMP>begin()</SAMP> and <SAMP>end()</SAMP> produce iterators for both <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>s and <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B>s. The iterators produced by these functions are constant to ensure that the ordering relation for the <B><I>set</I></B> is not inadvertently or intentionally destroyed by assigning a new value to a <B><I>set</I></B> element. The iterators generate elements in sequence, ordered by the comparison operator provided when the <B><I>set</I></B> was declared. The member functions <SAMP>rbegin(</SAMP>) and <SAMP>rend(</SAMP>) produce iterators that yield the elements in reverse order. </P>
<BLOCKQUOTE><HR>
<B>NOTE: Unlike a vector or deque, the insertion or removal of values from a set does not invalidate iterators or references to other elements in the collection.
</B><HR></BLOCKQUOTE>

<A NAME="827"><H3>8.2.7 set Operations</H3></A>
<A NAME="idx136"><!></A>
<P>The traditional set operations of <SAMP>subset</SAMP> <SAMP>test</SAMP>, <SAMP>set</SAMP> <SAMP>union</SAMP>, <SAMP>set</SAMP> <SAMP>intersection</SAMP>, and <SAMP>set</SAMP> <SAMP>difference</SAMP> are not provided as member functions, but are instead implemented as generic algorithms that work with any ordered structure. These functions are described in more detail in <A HREF="14-6.htm">Section 14.6</A>. The following sections describe how these functions can be used with the <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B> and <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B> container classes.</P>

<A NAME="8271"><H4>8.2.7.1 Subset test</H4></A>
<A NAME="idx137"><!></A>
<P>The function <SAMP>includes()</SAMP> can be used to determine if one <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B> is a subset of another; that is, if all elements from the first are contained in the second. For <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B>s the number of matching elements in the second <B><I>set</I></B> must exceed the number of elements in the first. The four arguments are a pair of iterators representing the (presumably) smaller <B><I>set</I></B>, and a pair of iterators representing the (potentially) larger <B><I>set</I></B>.:</P>
<UL>
<PRE>
if (includes(set_one.begin(), set_one.end(),
   set_two.begin(), set_two.end()))
      cout &lt;&lt; "set_one is a subset of set_two" &lt;&lt; endl;</PRE>
</UL>
<A NAME="idx138"><!></A>
<P>The less-than operator <SAMP>&lt;</SAMP> is used for the comparison of elements, regardless of the operator used in the declaration of the <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>. Where this is inappropriate, an alternative version of the <SAMP>includes()</SAMP> function is provided. This form takes a fifth argument, which is the comparison function used to order the elements in the two <B><I>set</I></B>s.</P>

<A NAME="8272"><H4>8.2.7.2 Set Union or Intersection</H4></A>
<A NAME="idx139"><!></A>
<P>The function <SAMP>set_union()</SAMP> can be used to construct a union of two <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>s. The two <B><I>set</I></B>s are specified by iterator pairs, and the union is copied into an output iterator that is supplied as a fifth argument. To form the result as a <B><I>set</I></B>, an <I>insert iterator</I> must be used to form the output iterator (<A HREF="2-4.htm">Section 2.4</A>). If the desired outcome is a union of one <B><I>set</I></B> with another, then a temporary <B><I>set</I></B> can be constructed, and the results swapped with the argument <B><I>set</I></B> prior to deletion of the temporary <B><I>set</I></B>:</P>
<UL>
<PRE>
// union two sets, copying result into a vector
vector&lt;int&gt; v_one (set_one.size() + set_two.size());

set_union(set_one.begin(), set_one.end(), 
   set_two.begin(), set_two.end(), v_one.begin());

// form union in place
set&lt;int&gt; temp_set;
set_union(set_one.begin(), set_one.end(), 
   set_two.begin(), set_two.end(), 
   inserter(temp_set, temp_set.begin()));
set_one.swap(temp_set);  // temp_set will be deleted</PRE>
</UL>
<A NAME="idx140"><!></A>
<P>The function <SAMP>set_intersection()</SAMP> is similar, and forms the intersection of the two <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>s.</P>
<P>As with the <SAMP>includes()</SAMP> function, the less-than operator <SAMP>&lt;</SAMP> is used to compare elements in the two argument <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>s, regardless of the operator provided in the declaration of the <B><I>set</I></B>s. Should this be inappropriate, alternative versions of both the <SAMP>set_union()</SAMP> or <SAMP>set_intersection()</SAMP> functions permit the comparison operator used to form the <B><I>set</I></B> to be given as a sixth argument.</P>
<A NAME="idx141"><!></A>
<P>The operation of taking the union of two <B><I><A HREF="../../stdref/mul_0958.htm">multiset</A></I></B>s should be distinguished from the operation of merging two <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>s. Imagine that one argument <B><I>set</I></B> contains three instances of the element 7, and the second <B><I>set</I></B> contains two instances of the same value. The union will contain only three such values, while the merge will contain five. To form the merge, the function <SAMP>merge()</SAMP> can be used (<A HREF="14-5.htm">Section 14.5</A>). The arguments to this function exactly match those of the <SAMP>set_union()</SAMP> function.</P>

<A NAME="8273"><H4>8.2.7.3 Set Difference</H4></A>
<A NAME="idx142"><!></A>
<P>There are two forms of <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B> difference. A simple <B><I>set</I></B> difference represents the elements in the first <B><I>set</I></B> that are not contained in the second. A symmetric <B><I>set</I></B> difference is the union of the elements in the first <B><I>set</I></B> that are not contained in the second, with the elements in the second that are not contained in the first. These two values are constructed by the functions <SAMP>set_difference()</SAMP> and <SAMP>set_symmetric_difference()</SAMP>, respectively. The use of these functions is similar to the use of the <SAMP>set_union()</SAMP> function described earlier.</P>

<A NAME="828"><H3>8.2.8 Other Generic Algorithms</H3></A>
<A NAME="idx143"><!></A>
<P>Because <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>s are ordered and have constant iterators, a number of the generic functions described in <A HREF="13.htm">Chapter 13</A> and <A HREF="14.htm">Chapter 14</A> are either not applicable to <B><I>set</I></B>s or not particularly useful. However, <A HREF="#Table 14">Table 14</A> gives a few of the functions that can be used in conjunction with the <B><I>set</I></B> datatype.</P>
<TABLE BORDER CELLPADDING=3 CELLSPACING=3>
<H4><A NAME="Table 14">Table 14 -- Functions useful for the set datatype</A></H4><tr><td valign=top><B>Purpose</B><td valign=top><B>Name</B><td valign=top><B>Where to find</B>&nbsp;
<tr><td valign=top>
Copy one sequence into another <BR>
<td valign=top>
<SAMP>copy</SAMP><BR>
<td valign=top>
<A HREF="13-2.htm#1322">Section 13.2.2</A><BR>

<tr><td valign=top>
Find an element that matches a condition <BR>
<td valign=top>
<SAMP>find_if</SAMP><BR>
<td valign=top>
<A HREF="13-3.htm#1331">Section 13.3.1</A><BR>

<tr><td valign=top>
Find a sub-sequence within a set <BR>
<td valign=top>
<SAMP>search</SAMP><BR>
<td valign=top>
<A HREF="13-3.htm#1333">Section 13.3.3</A><BR>

<tr><td valign=top>
Count number of elements that satisfy condition <BR>
<td valign=top>
<SAMP>count_if</SAMP><BR>
<td valign=top>
<A HREF="13-6.htm#1361">Section 13.6.1</A><BR>

<tr><td valign=top>
Reduce set to a single value <BR>
<td valign=top>
<SAMP>accumulate</SAMP><BR>
<td valign=top>
<A HREF="13-6.htm#1362">Section 13.6.2</A><BR>

<tr><td valign=top>
Execute function on each element <BR>
<td valign=top>
<SAMP>for_each</SAMP><BR>
<td valign=top>
<A HREF="13-8.htm">Section 13.8</A><BR>


</TABLE>


</P>

<HR>
<A HREF="8-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="8-3.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
