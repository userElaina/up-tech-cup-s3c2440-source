<HTML><HEAD><TITLE>11.3 Example Program: Event-Driven Simulation</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="11-2.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="12.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>11.3 Example Program: Event-Driven Simulation</H2>

<A NAME="idx206"><!></A>
<P>An extended example will now illustrate one of the more common uses of a priority_queues, which is to support the construction of a simulation model. A <I>discrete event-driven simulation</I> is a popular simulation technique. Objects in the simulation model objects in the real world, and are programmed to react as much as possible as the real objects would react. A <B><I><A HREF="../../stdref/pri_2327.htm">priority_queue</A></I></B> is used to store a representation of <I>events</I> that are waiting to happen. This queue is stored in order, based on the time the event should occur, so the smallest element will always be the next event to be modeled. As an event occurs, it can spawn other events. These subsequent events are placed into the queue as well. Execution continues until all events have been processed.</P>
<P>Events can be represented as subclasses of a base class, which we call <B><I>event</I></B>. The base class simply records the time at which the event will take place. A pure virtual function named <SAMP>processEvent</SAMP> is invoked to execute the event:</P>
<UL>
<PRE>
class event {
public:
   event (unsigned int t) : time(t) { }
   const unsigned int time;
   virtual void processEvent() = 0;
};</PRE>
</UL>
<A NAME="idx207"><!></A>
<A NAME="fn5"><!></A>
<P>The simulation queue needs to maintain a collection of different types of events, sometimes called a <I>heterogeneous</I> collection. Each different form of event is represented by a subclass of class <B><I>event</I></B>, but not all <B><I>event</I></B>s have the same exact type. For this reason the collection must store <I>pointers<SUP><A HREF="endnotes.htm#fn5">5</A></SUP></I> to <B><I>event</I></B>s, instead of the events themselves. </P>
<BLOCKQUOTE><HR>
<B>NOTE: Since the containers maintain pointers to values, not the values themselves, the programmer is responsible for managing the memory for the objects being manipulated.
</B><HR></BLOCKQUOTE>
<A NAME="fn6"><!></A>
<P>Since comparison of pointers cannot be specialized on the basis of the pointer types, we must instead define a new comparison function for pointers to events. In the Standard C++ Library we do this by defining a new structure whose sole purpose is to define the function invocation operator <SAMP>()</SAMP> in the appropriate fashion.   Since in this particular example we want to use the <B><I><A HREF="../../stdref/pri_2327.htm">priority_queue</A></I></B> to return the smallest<SUP><A HREF="endnotes.htm#fn6">6</A></SUP> element each time, rather than the largest, the order of the comparison is reversed, as follows:</P>
<UL>
<PRE>
struct eventComparison {
   bool operator () (event * left, event * right) const
      { return left-&gt;time &gt; right-&gt;time; }
};</PRE>
</UL>
<P>We are now ready to define the class <B><I>simulation</I></B>, which provides the structure for the simulation activities. The class <B><I>simulation</I></B> provides two functions: the first is used to insert a new event into the queue, while the second runs the simulation. A data field is also provided to hold the current simulation <B><I>time</I></B>:</P>
<UL>
<PRE>
class simulation {
public:
   simulation () : eventQueue(), time(0) { }

   void scheduleEvent (event * newEvent)
      { eventQueue.push (newEvent); }

   void run();

   unsigned int time;

protected:
   priority_queue&lt;event *, vector&lt;event *&gt;, eventComparison&gt; eventQueue;
};</PRE>
</UL>
<P>Notice the declaration of the <B><I><A HREF="../../stdref/pri_2327.htm">priority_queue</A></I></B> used to hold the pending <B><I>event</I></B>s. In this case we are using a <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B> as the underlying container, but we could just as easily have used a <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B>. </P>
<P>The heart of the simulation is the member function <SAMP>run()</SAMP>, which defines the event loop. This procedure makes use of three of the five <B><I><A HREF="../../stdref/pri_2327.htm">priority_queue</A></I></B> operations, namely <SAMP>top()</SAMP>, <SAMP>pop()</SAMP>, and <SAMP>empty().</SAMP> It is implemented as follows:</P>
<UL>
<PRE>
void simulation::run()
{
   while (! eventQueue.empty()) {
      event * nextEvent = eventQueue.top();
      eventQueue.pop();
      time = nextEvent-&gt;time;
      nextEvent-&gt;processEvent();
      delete nextEvent;   // free memory used by event
      }
}</PRE>
</UL>

<A NAME="idx208"><!></A>
<A NAME="1131"><H3>11.3.1 Example Program: An Ice Cream Store Simulation</H3></A>
<A NAME="idx209"><!></A>
<P>To illustrate the use of our simulation framework, this example program gives a simple simulation of an ice cream store. Such a simulation might be used, for example, to determine the optimal number of chairs that should be provided, based on assumptions such as the frequency with which customers arrive, the length of time they stay, and so on.</P>
<BLOCKQUOTE><HR>
<B>NOTE: The complete event simulation is in the file icecream.cpp.
</B><HR></BLOCKQUOTE>
<P>Our store simulation is based around a subclass of class <B><I>simulation</I></B>, defined as follows:</P>
<UL>
<PRE>
class storeSimulation : public simulation {
public:
   storeSimulation()
      : freeChairs(35), profit(0.0), simulation() { }

   bool canSeat (unsigned int numberOfPeople);
   void order(unsigned int numberOfScoops);
   void leave(unsigned int numberOfPeople);

private:
   unsigned int freeChairs;
   double profit;
} theSimulation;</PRE>
</UL>
<P>There are three basic activities associated with the store: arrival, ordering and eating, and leaving. This is reflected not only in the three member functions defined in the <B><I>simulation</I></B> class, but in three separate subclasses of <B><I>event</I></B>.</P>
<P>The member functions associated with the store simply record the activities taking place, producing a log that can later be studied to evaluate the simulation.</P>
<UL>
<PRE>
bool storeSimulation::canSeat (unsigned int numberOfPeople)
   // if sufficient room, then seat customers
{
   cout &lt;&lt; "Time: " &lt;&lt; time;
   cout &lt;&lt; " group of " &lt;&lt; numberOfPeople &lt;&lt; " customers arrives";
   if (numberOfPeople &lt; freeChairs) {
      cout &lt;&lt; " is seated" &lt;&lt; endl;
      freeChairs -= numberOfPeople;
      return true;
      }
   else {
      cout &lt;&lt; " no room, they leave" &lt;&lt; endl;
      return false;
      }
}

void storeSimulation::order (unsigned int numberOfScoops)
   // serve icecream, compute profits
{
   cout &lt;&lt; "Time: " &lt;&lt; time;
   cout &lt;&lt; " serviced order for " &lt;&lt; numberOfScoops &lt;&lt; endl;
   profit += 0.35 * numberOfScoops;
}

void storeSimulation::leave (unsigned int numberOfPeople)
   // people leave, free up chairs
{
   cout &lt;&lt; "Time: " &lt;&lt; time;
   cout &lt;&lt; " group of size " &lt;&lt; numberOfPeople &lt;&lt; 
         " leaves" &lt;&lt; endl;
   freeChairs += numberOfPeople;
}</PRE>
</UL>
<A NAME="idx210"><!></A>
<P>As we noted already, each activity is matched by a subclass of <B><I>event</I></B>.  Each subclass of <B><I>event</I></B> includes an integer data field, which represents the size of a group of customers. The arrival event occurs when a group enters. When executed, the arrival event creates and installs a new instance of the order event. The function <SAMP>randomInteger()</SAMP> is used to compute a random integer between 1 and the argument value (see <A HREF="2-2.htm#225">Section 2.2.5</A>).</P>
<UL>
<PRE>
class arriveEvent : public event {
public:
   arriveEvent (unsigned int time, unsigned int groupSize)
      : event(time), size(groupSize) { }
   virtual void processEvent ();
private:
   unsigned int size;
};

void arriveEvent::processEvent()
{               // see if everybody can be seated
   if (theSimulation.canSeat(size))
      theSimulation.scheduleEvent
         (new orderEvent(time + 1 + randomInteger(4), size));
}</PRE>
</UL>
<P>An order event similarly spawns a leave event:</P>
<UL>
<PRE>
class orderEvent : public event {
public:
   orderEvent (unsigned int time, unsigned int groupSize)
      : event(time), size(groupSize) { }
   virtual void processEvent ();
private:
   unsigned int size;
};

void orderEvent::processEvent()
{               // each person orders some number of scoops
   for (int i = 0; i &lt; size; i++)
      theSimulation.order(1 + rand(3));
   theSimulation.scheduleEvent
      (new leaveEvent(time + 1 + randomInteger(10), size));
};</PRE>
</UL>
<P>Finally, leave events free up chairs, but do not spawn any new events:</P>
<UL>
<PRE>
class leaveEvent : public event {
public:
   leaveEvent (unsigned int time, unsigned int groupSize)
      : event(time), size(groupSize) { }
   virtual void processEvent ();
private:
   unsigned int size;
};

void leaveEvent::processEvent ()
{               // leave and free up chairs
   theSimulation.leave(size);
}</PRE>
</UL>
<P>To run the simulation we simply create some number of initial events (say, 30 minutes worth), then invoke the <SAMP>run()</SAMP> member function:</P>
<UL>
<PRE>
void main() {
   // load queue with some number of initial events
   unsigned int t = 0;
   while (t &lt; 30) {
      t += rand(6);
      theSimulation.scheduleEvent(
         new arriveEvent(t, 1 + randomInteger(4)));
      }

   // then run simulation and print profits
   theSimulation.run();
   cout &lt;&lt; "Total profits " &lt;&lt; theSimulation.profit &lt;&lt; endl;
}</PRE>
</UL>


<BR>
<HR>
<A HREF="11-2.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="12.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
