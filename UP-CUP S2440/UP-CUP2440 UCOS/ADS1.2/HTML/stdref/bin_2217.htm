<HTML><HEAD><TITLE>binary_search</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="bin_1825.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="bin_1899.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>binary_search</H2>
<PRE><HR>Algorithm
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Performs a binary search for a value on a container.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;algorithm&gt;
template &lt;class ForwardIterator, class T&gt;
bool
<B>binary_search</B>(ForwardIterator first, ForwardIterator last,
              const T&amp; value);
template &lt;class ForwardIterator, class T, class Compare&gt;
bool
<B>binary_search</B>(ForwardIterator first, ForwardIterator last,
              const T&amp; value, Compare comp);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>binary_search</I></B> algorithm, like other related algorithms (<B><I><A HREF="equ_3232.htm">equal_range</A></I></B>, <B><I><A HREF="low_4395.htm">lower_bound</A></I></B> and <B><I><A HREF="upp_0967.htm">upper_bound</A></I></B>) performs a binary search on ordered containers. All binary search algorithms have two versions. The first version uses the less than operator (<SAMP>operator&lt;</SAMP>) to perform the comparison, and assumes that the sequence has been sorted using that operator. The second version allows you to include a function object of type <SAMP>Compare</SAMP>, which it assumes was the function used to sort the sequence. The function object must be a binary predicate. </P>
<P>The <B><I>binary_search</I></B> algorithm returns <SAMP>true</SAMP> if a sequence contains an element equivalent to the argument <SAMP>value</SAMP>. The first version of <B><I>binary_search</I></B> returns <SAMP>true</SAMP> if the sequence contains at least one element that is equal to the search value. The second version of the <B><I>binary_search</I></B> algorithm returns <SAMP>true</SAMP> if the sequence contains at least one element that satisfies the conditions of the comparison function. Formally, <B><I>binary_search</I></B> returns <SAMP>true</SAMP> if there is an iterator <SAMP>i</SAMP> in the range <SAMP>[first, last)</SAMP> that satisfies the corresponding conditions:</P>
<P><SAMP>!(*i &lt; value) &amp;&amp; !(value &lt; *i)</SAMP> </P>
<P>or </P>
<P><SAMP>comp(*i, value) == false &amp;&amp; comp(value, *i) == false</SAMP></P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P><B><I>binary_search</I></B> performs at most <SAMP>log(last - first) + 2</SAMP> comparisons.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>   //
   // b_search.cpp
   //
 #include &lt;vector&gt;
 #include &lt;algorithm&gt;
 #include &lt;iostream&gt;
 using namespace std;

 int main()
 {
   typedef vector&lt;int&gt;::iterator iterator;
   int d1[10] = {0,1,2,2,3,4,2,2,6,7};
   //
   // Set up a vector
   //
   vector&lt;int&gt; v1(d1,d1 + 10);
   //
   // Try binary_search variants
   //
   sort(v1.begin(),v1.end());
   bool b1 = binary_search(v1.begin(),v1.end(),3);
   bool b2 =
     binary_search(v1.begin(),v1.end(),11,less&lt;int&gt;());
   //
   // Output results
   //
   cout &lt;&lt; "In the vector: ";
   copy(v1.begin(),v1.end(),
           ostream_iterator&lt;int,char&gt;(cout," "));

   cout &lt;&lt; endl &lt;&lt; "The number 3 was " 
        &lt;&lt; (b1 ? "FOUND" : "NOT FOUND");
   cout &lt;&lt; endl &lt;&lt; "The number 11 was "
        &lt;&lt; (b2 ? "FOUND" : "NOT FOUND") &lt;&lt; endl;
   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
In the vector: 0 1 2 2 2 2 3 4 6 7
The number 3 was FOUND
The number 11 was NOT FOUND</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, then you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you have to write:</P>
<P><SAMP>vector&lt;int,allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="equ_3232.htm">equal_range</A></I></B>, <B><I><A HREF="low_4395.htm">lower_bound</A></I></B>, <B><I><A HREF="upp_0967.htm">upper_bound</A></I></B></P>


<BR>
<HR>
<A HREF="bin_1825.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="bin_1899.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
