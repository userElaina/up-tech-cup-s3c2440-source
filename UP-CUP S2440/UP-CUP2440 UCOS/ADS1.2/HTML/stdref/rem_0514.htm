<HTML><HEAD><TITLE>remove_if</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="rem_9276.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="rep_6131.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>remove_if</H2>
<PRE><HR>Algorithm
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Moves desired elements to the front of a container, and returns an iterator that describes where the sequence of desired elements ends.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;algorithm&gt;
template &lt;class ForwardIterator, class Predicate&gt;
ForwardIterator <B>remove_if</B> (ForwardIterator first,
                           ForwardIterator last,
                           Predicate pred);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>remove_if</I></B> algorithm eliminates all the elements referred to by iterator <SAMP>i</SAMP> in the range <SAMP>[first, last)</SAMP> for which the following corresponding condition holds: <SAMP>pred(*i) == true</SAMP>. <B><I>remove_if</I></B> returns an iterator that points to the end of the resulting range. <B><I>remove_if</I></B> is stable, which means that the relative order of the elements that are not removed is the same as their relative order in the original range. </P>
<P><B><I>remove_if</I></B> does not actually reduce the size of the sequence. It actually: 1) copies the values that are to be <I>retained</I> to the front of the sequence, and 2) returns an iterator that describes where the sequence of retained values ends. Elements that follow this iterator are simply the original sequence values, left unchanged. Here's a simple example:</P>
<P>Say we want to remove all even numbers from the following sequence:</P>
<P>      <SAMP>123456789</SAMP></P>
<P>Applying the <B><I>remove_if</I></B> algorithm results in the following sequence:</P>
<P>      <SAMP>13579|XXXX</SAMP></P>
<P>The vertical bar represents the position of the iterator returned by <B><I>remove_if</I></B>. Note that the elements to the left of the vertical bar are the original sequence with the even numbers removed. The elements to the right of the bar are simply the untouched original members of the original sequence. </P>
<P>If you want to actually delete items from the container, use the following technique:</P>
<P><SAMP>container.erase(remove(first,last,value),container.end());</SAMP></P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P>Exactly <SAMP>last1 - first1</SAMP> applications of the corresponding predicate are done. </P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// remove.cpp
//
 #include &lt;algorithm&gt;
 #include &lt;vector&gt;
 #include &lt;iterator&gt;
 #include &lt;iostream&gt; 
 using namespace std;
 template&lt;class Arg&gt;
 struct all_true : public unary_function&lt;Arg, bool&gt;
 {
   bool operator()(const Arg&amp; x){ return 1; }
 };
 int main ()
 {
   int arr[10] = {1,2,3,4,5,6,7,8,9,10};
   vector&lt;int&gt; v(arr, arr+10);
   copy(v.begin(),v.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl &lt;&lt; endl;
   // remove the 7
   vector&lt;int&gt;::iterator result = 
           remove(v.begin(), v.end(), 7);
   // delete dangling elements from the vector
   v.erase(result, v.end());
   copy(v.begin(),v.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl &lt;&lt; endl;
   // remove everything beyond the fourth element
   result = <B>remove_if</B>(v.begin()+4, 
                      v.begin()+8, all_true&lt;int&gt;());
   // delete dangling elements
   v.erase(result, v.end());
   copy(v.begin(),v.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl &lt;&lt; endl;
   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 8 9 10
1 2 3 4
1 2 4</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, then you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you need to write:</P>
<P><SAMP>vector&lt;int, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="rem_4572.htm">remove</A></I></B>, <B><I><A HREF="rem_6253.htm">remove_copy</A></I></B>, <B><I><A HREF="rem_9276.htm">remove_copy_if</A></I></B></P>


<BR>
<HR>
<A HREF="rem_9276.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="rep_6131.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
