<HTML><HEAD><TITLE>map</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="mak_0285.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="mas_2579.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>map</H2>
<PRE><HR>Container
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Interface">Interface</A></LI>
<LI><A HREF="#Constructors">Constructors</A></LI>
<LI><A HREF="#Destructors">Destructors</A></LI>
<LI><A HREF="#Allocators">Allocators</A></LI>
<LI><A HREF="#Iterators">Iterators</A></LI>
<LI><A HREF="#Member Operators">Member Operators</A></LI>
<LI><A HREF="#Member Functions">Member Functions</A></LI>
<LI><A HREF="#Non-member Operators">Non-member Operators</A></LI>
<LI><A HREF="#Specialized Algorithms">Specialized Algorithms</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>An associative container with access to non-key values using unique keys. A <B><I>map</I></B> supports bidirectional iterators.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<UL><TABLE CELLPADDING=3>
<TR><TD><B>Member Functions</B></TD></TR><TR><TD VALIGN=top><A HREF="#Iteratorsbegin()">begin()</A><BR>
 <A HREF="#Member Functionsclear()">clear()</A><BR>
 <A HREF="#Member Functionscount()">count()</A><BR>
 <A HREF="#Member Functionsempty()">empty()</A><BR>
 <A HREF="#Iteratorsend()">end()</A><BR>
 <A HREF="#Member Functionsequal_range()">equal_range()</A><BR>
 <A HREF="#Member Functionserase()">erase()</A><BR>
 <A HREF="#Member Functionsfind()">find()</A><BR>
 <A HREF="#Allocatorsget_allocator()">get_allocator()</A><BR>
 <A HREF="#Member Functionsinsert()">insert()</A><BR>
</TD>
<TD VALIGN=top> <A HREF="#Member Functionskey_comp()">key_comp()</A><BR>
 <A HREF="#Member Functionslower_bound()">lower_bound()</A><BR>
 <A HREF="#Member Functionsmax_size()">max_size()</A><BR>
 <A HREF="#Non-member Operatorsoperator!=()">operator!=()</A><BR>
 <A HREF="#Non-member Operatorsoperator&gt;()">operator&gt;()</A><BR>
 <A HREF="#Non-member Operatorsoperator&gt;=()">operator&gt;=()</A><BR>
 <A HREF="#Non-member Operatorsoperator&lt;()">operator&lt;()</A><BR>
 <A HREF="#Non-member Operatorsoperator&lt;=()">operator&lt;=()</A><BR>
 <A HREF="#Member Operatorsoperator=()">operator=()</A><BR>
 <A HREF="#Non-member Operatorsoperator==()">operator==()</A><BR>
</TD>
<TD VALIGN=top> <A HREF="#Member Operatorsoperator[]()">operator[]()</A><BR>
 <A HREF="#Iteratorsrbegin()">rbegin()</A><BR>
 <A HREF="#Iteratorsrend()">rend()</A><BR>
 <A HREF="#Member Functionssize()">size()</A><BR>
 <A HREF="#Member Functionsswap()">swap()</A><BR>
 <A HREF="#Member Functionsupper_bound()">upper_bound()</A><BR>
 <A HREF="#Member Functionsvalue_comp()">value_comp()</A><BR>
</TD></TR>
</TABLE></UL>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;map&gt;
template &lt;class Key, class T, class Compare = less&lt;Key&gt; 
          class Allocator = allocator&lt;pair&lt;const Key, T&gt;&gt; &gt;
class <B>map</B>;</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P><B><I>map &lt;Key, T, Compare, Allocator&gt;</I></B> gives fast access to stored values of type <SAMP>T</SAMP> that are indexed by unique keys of type <B><I>Key</I></B>. The default operation for key comparison is the <SAMP>&lt;</SAMP> operator. </P>
<P><B><I>map</I></B> has bidirectional iterators that point to an instance of <SAMP>pair&lt;const Key x, T y&gt;</SAMP> where <SAMP>x</SAMP> is the key and <SAMP>y</SAMP> is the stored value associated with that key. The definition of <B><I>map</I></B> includes a <SAMP>typedef</SAMP> to this pair called <SAMP>value_type</SAMP>. </P>
<P>The types used for both the template parameters <SAMP>Key</SAMP> and <SAMP>T</SAMP> must include the following (where <SAMP>T</SAMP> is the <SAMP>type</SAMP>, <SAMP>t</SAMP> is a <SAMP>value</SAMP> of <SAMP>T</SAMP> and <SAMP>u</SAMP> is a <SAMP>const</SAMP> <SAMP>value</SAMP> of <SAMP>T</SAMP>): </P>
<TABLE>
<TR><TD VALIGN=top>Copy constructors  </TD>
<TD><SAMP>T(t)</SAMP> and <SAMP>T(u)</SAMP></TD></TR>
<TR><TD VALIGN=top>Destructor  </TD>
<TD><SAMP>t.~T()</SAMP></TD></TR>
<TR><TD VALIGN=top>Address of  </TD>
<TD><SAMP>&amp;t</SAMP> and <SAMP>&amp;u</SAMP> yielding <SAMP>T*</SAMP> and <SAMP>const T*</SAMP> respectively</TD></TR>
<TR><TD VALIGN=top>Assignment  </TD>
<TD><SAMP>t = a</SAMP> where <SAMP>a</SAMP> is a (possibly <SAMP>const</SAMP>) value of <SAMP>T</SAMP></TD></TR>
</TABLE>
<P>The type used for the <SAMP>Compare</SAMP> template parameter must satisfy the requirements for binary functions. </P>

<A NAME="Interface"><H3>Interface</H3></A>
<PRE>
<PRE>template &lt;class Key, class T, class Compare = less&lt;Key&gt; 
          class Allocator = allocator&lt;pair&lt;const Key, T&gt;&gt; &gt;
 class map {

public:

// types

   typedef Key key_type;
   typedef typename Allocator::pointer pointer;
   typedef typename Allocator::const_pointer const_pointer;
   typedef T mapped_type;
   typedef pair&lt;const Key, T&gt; value_type;
   typedef Compare key_compare;
   typedef Allocator allocator_type;</PRE>

<UL>
<PRE>   typedef typename
           Allocator::reference        reference;
   typedef typename
           Allocator::const_reference  const_reference;</PRE>

</UL>
<PRE>   class iterator;
   class const_iterator;</PRE>

<UL>
<PRE>   typedef typename
           Allocator::size_type        size_type;
   typedef typename
           Allocator::difference_type  difference_type;</PRE>

</UL>
<PRE>   typedef typename std::reverse_iterator&lt;iterator&gt;
                         reverse_iterator;
   typedef typename std::reverse_iterator&lt;const_iterator&gt;
                         const_reverse_iterator;

   class value_compare
      : public binary_function&lt;value_type, value_type, bool&gt;
   {
     friend class map&lt;Key, T, Compare, Allocator&gt;;

     protected :
       Compare comp;
       value_compare(Compare c): comp(c) {}
     public :
       bool operator() (const value_type&amp;,
                        const value_type&amp;) const;
   };

// Construct/Copy/Destroy

   explicit map (const Compare&amp; = Compare(),
                 const Allocator&amp; = Allocator ());
   template &lt;class InputIterator&gt;
    map (InputIterator, InputIterator,
         const Compare&amp; = Compare(),
         const Allocator&amp; = Allocator ());
   map (const map&lt;Key, T, Compare, Allocator&gt;&amp;);
   ~map();
   map&lt;Key, T, Compare, Allocator&gt;&amp; 
    operator= (const map&lt;Key, T, Compare, Allocator&gt;&amp;);
   allocator_type get_allocator () const;

// Iterators

   iterator begin();
   const_iterator begin() const;
   iterator end();
   const_iterator end() const;
   reverse_iterator rbegin();
   const_reverse_iterator rbegin() const;
   reverse_iterator rend();
   const_reverse_iterator rend() const;

// Capacity

   bool empty() const;
   size_type size() const;
   size_type max_size() const;

// Element Access

   mapped_type&amp; operator[] (const key_type&amp;);

// Modifiers

   pair&lt;iterator, bool&gt; insert (const value_type&amp;);
   iterator insert (iterator, const value_type&amp;);
   template &lt;class InputIterator&gt;
    void insert (InputIterator, InputIterator);

   void erase (iterator);
   size_type erase (const key_type&amp;);
   void erase (iterator, iterator);
   void swap (map&lt;Key, T, Compare, Allocator&gt;&amp;);
   void clear();

// Observers

   key_compare key_comp() const;
   value_compare value_comp() const;

// Map operations

   iterator find (const key_value&amp;);
   const_iterator find (const key_value&amp;) const;
   size_type count (const key_type&amp;) const;
   iterator lower_bound (const key_type&amp;);
   const_iterator lower_bound (const key_type&amp;) const;
   iterator upper_bound (const key_type&amp;);
   const_iterator upper_bound (const key_type&amp;) const;
   pair&lt;iterator, iterator&gt; equal_range (const key_type&amp;);
   pair&lt;const_iterator, const_iterator&gt;
     equal_range (const key_type&amp;) const;
};

// Non-member Map Operators

template &lt;class Key, class T, class Compare, class Allocator&gt;
 <SAMP>bool</SAMP> operator== (const map&lt;Key, T, Compare, Allocator&gt;&amp;,
                  const map&lt;Key, T, Compare, Allocator&gt;&amp;);

template &lt;class Key, class T, class Compare, class Allocator&gt;
 <SAMP>bool</SAMP> operator!= (const map&lt;Key, T, Compare, Allocator&gt;&amp;,
                  const map&lt;Key, T, Compare, Allocator&gt;&amp;);

template &lt;class Key, class T, class Compare, class Allocator&gt;
 bool <B>operator&lt;</B> (const map&lt;Key, T, Compare, Allocator&gt;&amp;,
                 const map&lt;Key, T, Compare, Allocator&gt;&amp;);

template &lt;class Key, class T, class Compare, class Allocator&gt;
 bool <B>operator&gt;</B> (const map&lt;Key, T, Compare, Allocator&gt;&amp;,
                 const map&lt;Key, T, Compare, Allocator&gt;&amp;);

template &lt;class Key, class T, class Compare, class Allocator&gt;
 bool <B>operator&lt;=</B> (const map&lt;Key, T, Compare, Allocator&gt;&amp;,
                 const map&lt;Key, T, Compare, Allocator&gt;&amp;);

template &lt;class Key, class T, class Compare, class Allocator&gt;
 bool <B>operator&gt;=</B> (const map&lt;Key, T, Compare, Allocator&gt;&amp;,
                 const map&lt;Key, T, Compare, Allocator&gt;&amp;);


// Specialized Algorithms

template &lt;class Key, class T, class Compare, class Allocator&gt;
 void <B>swap</B> (map&lt;*Key,T,Compare,Allocator&gt;&amp;,
            map&lt;Key,T,Compare,Allocator&gt;&amp;);</PRE>

</PRE>

<A NAME="Constructors"><H3>Constructors</H3></A>


<PRE>explicit <B>map</B>(const Compare&amp; comp = Compare(),
             const Allocator&amp; alloc = Allocator());</PRE>

<UL>
<P>Constructs an empty map that uses the relation <SAMP>comp</SAMP> to order keys, if it is supplied. The map uses the allocator <SAMP>alloc</SAMP> for all storage management.</P>
</UL>



<PRE>template &lt;class InputIterator&gt;
<B>map</B>(InputIterator first, InputIterator last,
    const Compare&amp; comp = Compare(),
    const Allocator&amp; alloc = Allocator());</PRE>

<UL>
<P>Constructs a map containing values in the range <SAMP>[first, last)</SAMP>. Creation of the new map is only guaranteed to succeed if the iterators <SAMP>first</SAMP> and <SAMP>last</SAMP> return values of type <SAMP>pair&lt;class Key,       class Value&gt;</SAMP> and all values of <SAMP>Key</SAMP> in the <SAMP>range[first, last)</SAMP> are unique. The map uses the relation <SAMP>comp</SAMP> to order keys, and the allocator <SAMP>alloc</SAMP> for all storage management.</P>
</UL>



<PRE><B>map</B>(const map&lt;Key,T,Compare,Allocator&gt;&amp; x);</PRE>

<UL>
<P>Creates a new map by copying all pairs of <SAMP>key</SAMP> and <SAMP>value</SAMP> from <SAMP>x</SAMP>. </P>
</UL>


<A NAME="Destructors"><H3>Destructors</H3></A>


<PRE>~<B>map</B>();</PRE>

<UL>
<P>Releases any allocated memory for this map.</P>
</UL>


<A NAME="Allocators"><H3>Allocators</H3></A>


<A NAME="Allocatorsget_allocator()"></A><PRE>allocator_type <B>get_allocator</B>() const;</PRE>

<UL>
<P>Returns a copy of the allocator used by self for storage management.</P>
</UL>


<A NAME="Iterators"><H3>Iterators</H3></A>


<A NAME="Iteratorsbegin()"></A><PRE>iterator 
<B>begin</B>();</PRE>

<UL>
<P>Returns an <SAMP>iterator</SAMP> pointing to the first element stored in the map. "First" is defined by the map's comparison operator, <SAMP>Compare</SAMP>. </P>
</UL>



<PRE>const_iterator 
<B>begin</B>() const;</PRE>

<UL>
<P>Returns a <SAMP>const_iterator</SAMP> pointing to the first element stored in the map. </P>
</UL>



<A NAME="Iteratorsend()"></A><PRE>iterator 
<B>end</B>();</PRE>

<UL>
<P>Returns an <SAMP>iterator</SAMP> pointing to the last element stored in the map (in other words, the off-the-end value). </P>
</UL>



<PRE>const_iterator 
<B>end</B>() const;</PRE>

<UL>
<P>Returns a <SAMP>const_iterator</SAMP> pointing to the last element stored in the map. </P>
</UL>



<A NAME="Iteratorsrbegin()"></A><PRE>reverse_iterator 
<B>rbegin</B>();</PRE>

<UL>
<P>Returns a <SAMP>reverse_iterator</SAMP> pointing to the first element stored in the map. "First" is defined by the map's comparison operator, <SAMP>Compare</SAMP>. </P>
</UL>



<PRE>const_reverse_iterator 
<B>rbegin</B>() const;</PRE>

<UL>
<P>Returns a <SAMP>const_reverse_iterator</SAMP> pointing to the first element stored in the map. </P>
</UL>



<A NAME="Iteratorsrend()"></A><PRE>reverse_iterator 
<B>rend</B>();</PRE>

<UL>
<P>Returns a <SAMP>reverse_iterator</SAMP> pointing to the last element stored in the map (in other words, the off-the-end value).</P>
</UL>



<PRE>const_reverse_iterator 
<B>rend</B>() const;</PRE>

<UL>
<P>Returns a <SAMP>const_reverse_iterator</SAMP> pointing to the last element stored in the map.</P>
</UL>


<A NAME="Member Operators"><H3>Member Operators</H3></A>


<A NAME="Member Operatorsoperator=()"></A><PRE>map&lt;Key, T, Compare, Allocator&gt;&amp; 
<B>operator=</B>(const map&lt;Key, T, Compare, Allocator&gt;&amp; x);</PRE>

<UL>
<P>Replaces the contents of <SAMP>*this</SAMP> with a copy of the map <SAMP>x</SAMP>. </P>
</UL>



<A NAME="Member Operatorsoperator[]()"></A><PRE>mapped_type&amp; 
<B>operator[]</B>(const key_type&amp; x);</PRE>

<UL>
<P>If an element with the key <SAMP>x</SAMP> exists in the map, then a reference to its associated value is returned. Otherwise the pair <SAMP>x,T()</SAMP> is inserted into the map and a reference to the default object <SAMP>T()</SAMP> is returned. </P>
</UL>


<A NAME="Member Functions"><H3>Member Functions</H3></A>


<A NAME="Member Functionsclear()"></A><PRE>void
<B>clear</B>();</PRE>

<UL>
<P>Erases all elements from the self.</P>
</UL>



<A NAME="Member Functionscount()"></A><PRE>size_type 
<B>count</B>(const key_type&amp; x) const;</PRE>

<UL>
<P>Returns a <SAMP>1</SAMP> if a value with the key <SAMP>x</SAMP> exists in the map. Otherwise returns a <SAMP>0</SAMP>. </P>
</UL>



<A NAME="Member Functionsempty()"></A><PRE>bool 
<B>empty</B>() const;</PRE>

<UL>
<P>Returns <SAMP>true</SAMP> if the map is empty, <SAMP>false</SAMP> otherwise.</P>
</UL>



<A NAME="Member Functionsequal_range()"></A><PRE>pair&lt;iterator, iterator&gt; 
<B>equal_range</B> (const key_type&amp; x);</PRE>

<UL>
<P>Returns the pair <SAMP>(lower_bound(x), upper_bound(x))</SAMP>.</P>
</UL>



<PRE>pair&lt;const_iterator,const_iterator&gt; 
<B>equal_range</B> (const key_type&amp; x) const;</PRE>

<UL>
<P>Returns the pair <SAMP>(lower_bound(x), upper_bound(x))</SAMP>.</P>
</UL>



<A NAME="Member Functionserase()"></A><PRE>void
<B>erase</B>(iterator position);</PRE>

<UL>
<P>Deletes the map element pointed to by the iterator <SAMP>position</SAMP>. Returns an iterator pointing to the element following the deleted element, or <SAMP>end()</SAMP> if the deleted item was the last one in this list.</P>
</UL>



<PRE>void
<B>erase</B>(iterator first, iterator last);</PRE>

<UL>
<P>If the iterators <SAMP>first</SAMP> and <SAMP>last</SAMP> point to the same map and last is reachable from first, all elements in the range (<SAMP>first, last</SAMP>) are deleted from the map. Returns an iterator pointing to the element following the last deleted element, or <SAMP>end()</SAMP> if there were no elements after the deleted range.</P>
</UL>



<PRE>size_type 
<B>erase</B>(const key_type&amp; x);</PRE>

<UL>
<P>Deletes the element with the key value <SAMP>x</SAMP> from the map, if one exists. Returns <SAMP>1</SAMP> if <SAMP>x</SAMP> existed in the map, <SAMP>0</SAMP> otherwise. </P>
</UL>



<A NAME="Member Functionsfind()"></A><PRE>iterator 
<B>find</B>(const key_type&amp; x);</PRE>

<UL>
<P>Searches the map for a pair with the key value <SAMP>x</SAMP> and returns an <SAMP>iterator</SAMP> to that pair if it is found. If such a pair is not found the value <SAMP>end()</SAMP> is returned. </P>
</UL>



<PRE>const_iterator <B>find</B>(const key_type&amp; x) const; </PRE>

<UL>
<P>Same as <SAMP>find</SAMP> above but returns a <SAMP>const_iterator</SAMP>.</P>
</UL>



<A NAME="Member Functionsinsert()"></A><PRE>pair&lt;iterator, bool&gt; 
<B>insert</B>(const value_type&amp; x);
iterator 
<B>insert</B>(iterator position, const value_type&amp; x);</PRE>

<UL>
<P>If a <SAMP>value_type</SAMP> with the same key as <SAMP>x</SAMP> is not present in the map, then <SAMP>x</SAMP> is inserted into the map. Otherwise, the pair is not inserted. A position may be supplied as a hint regarding where to do the insertion. If the insertion is done right after <SAMP>position</SAMP>, then it takes amortized constant time. Otherwise it takes <SAMP>O(log N)</SAMP> time. </P>
</UL>



<PRE>template &lt;class InputIterator&gt;
void 
<B>insert</B>(InputIterator first, InputIterator last);</PRE>

<UL>
<P>Copies of each element in the range <SAMP>[first, last)</SAMP> that possess a unique key (one not already in the map) are inserted into the map. The iterators <SAMP>first</SAMP> and <SAMP>last</SAMP> must return values of <SAMP>type</SAMP> <SAMP>pair&lt;T1,T2&gt;</SAMP>. This operation takes approximately <SAMP>O(N*log(size()+N))</SAMP> time. </P>
</UL>



<A NAME="Member Functionskey_comp()"></A><PRE>key_compare 
<B>key_comp</B>() const;</PRE>

<UL>
<P>Returns a function object capable of comparing key values using the comparison operation, <SAMP>Compare</SAMP>, of the current map. </P>
</UL>



<A NAME="Member Functionslower_bound()"></A><PRE>iterator 
<B>lower_bound</B>(const key_type&amp; x);</PRE>

<UL>
<P>Returns a reference to the first entry with a key greater than or equal to <SAMP>x</SAMP>.</P>
</UL>



<PRE>const_iterator 
<B>lower_bound</B>(const key_type&amp; x) const;</PRE>

<UL>
<P>Same as <SAMP>lower_bound</SAMP> above but returns a <SAMP>const_iterator</SAMP>. </P>
</UL>



<A NAME="Member Functionsmax_size()"></A><PRE>size_type 
<B>max_size</B>() const;</PRE>

<UL>
<P>Returns the maximum possible size of the map.   This size is only constrained by the number of unique keys that can be represented by the type <SAMP>Key</SAMP>. </P>
</UL>



<A NAME="Member Functionssize()"></A><PRE>size_type 
<B>size</B>() const;</PRE>

<UL>
<P>Returns the number of elements in the map.</P>
</UL>



<A NAME="Member Functionsswap()"></A><PRE>void 
<B>swap</B>(map&lt;Key, T, Compare, Allocator&gt;&amp; x);</PRE>

<UL>
<P>Swaps the contents of the map <SAMP>x</SAMP> with the current map, <SAMP>*this</SAMP>. </P>
</UL>



<A NAME="Member Functionsupper_bound()"></A><PRE>iterator 
<B>upper_bound</B>(const key_type&amp; x);</PRE>

<UL>
<P>Returns a reference to the first entry with a key less than or equal to <SAMP>x</SAMP>.</P>
</UL>



<PRE>const_iterator 
<B>upper_bound</B>(const key_type&amp; x) const;</PRE>

<UL>
<P>Same as <SAMP>upper_bound</SAMP> above but returns a <SAMP>const_iterator.</SAMP></P>
</UL>



<A NAME="Member Functionsvalue_comp()"></A><PRE>value_compare 
<B>value_comp</B>() const;</PRE>

<UL>
<P>Returns a function object capable of comparing <SAMP>pair&lt;const Key, T&gt;</SAMP> values using the comparison operation, <SAMP>Compare</SAMP>, of the current map. This function is identical to <SAMP>key_comp</SAMP> for sets. </P>
</UL>


<A NAME="Non-member Operators"><H3>Non-member Operators</H3></A>


<A NAME="Non-member Operatorsoperator==()"></A><PRE>template &lt;class Key, class T, class Compare, class Allocator&gt;
bool <B>operator==</B>(const map&lt;Key, T, Compare, Allocator&gt;&amp; x,
                 const map&lt;Key, T, Compare, Allocator&gt;&amp; y);</PRE>

<UL>
<P>Returns <SAMP>true</SAMP> if all elements in <SAMP>x</SAMP> are element-wise equal to all elements in <SAMP>y</SAMP>, using <SAMP>(T::operator==)</SAMP>. Otherwise it returns <SAMP>false</SAMP>. </P>
</UL>



<A NAME="Non-member Operatorsoperator!=()"></A><PRE>template &lt;class Key, class T, class Compare, class Allocator&gt;
bool <B>operator!=</B>(const map&lt;Key, T, Compare, Allocator&gt;&amp; x,
                 const map&lt;Key, T, Compare, Allocator&gt;&amp; y);</PRE>

<UL>
<P>Returns !<SAMP>(x==y)</SAMP>. </P>
</UL>



<A NAME="Non-member Operatorsoperator&lt;()"></A><PRE>template &lt;class Key, class T, class Compare, class Allocator&gt;
bool <B>operator&lt;</B>(const map&lt;Key, T, Compare, Allocator&gt;&amp; x,
                const map&lt;Key, T, Compare, Allocator&gt;&amp; y);</PRE>

<UL>
<P>Returns <SAMP>true</SAMP> if <SAMP>x</SAMP> is lexicographically less than <SAMP>y</SAMP>. Otherwise, it returns <SAMP>false</SAMP>.</P>
</UL>



<A NAME="Non-member Operatorsoperator&gt;()"></A><PRE>template &lt;class Key, class T, class Compare, class Allocator&gt;
bool <B>operator&gt;</B>(const map&lt;Key, T, Compare, Allocator&gt;&amp; x,
                const map&lt;Key, T, Compare, Allocator&gt;&amp; y);</PRE>

<UL>
<P>Returns <SAMP>y &lt; x</SAMP>.</P>
</UL>



<A NAME="Non-member Operatorsoperator&lt;=()"></A><PRE>template &lt;class Key, class T, class Compare, class Allocator&gt;
bool <B>operator&lt;=</B>(const map&lt;Key, T, Compare, Allocator&gt;&amp; x,
                const map&lt;Key, T, Compare, Allocator&gt;&amp; y);</PRE>

<UL>
<P>Returns !<SAMP>(y &lt; x)</SAMP>.</P>
</UL>



<A NAME="Non-member Operatorsoperator&gt;=()"></A><PRE>template &lt;class Key, class T, class Compare, class Allocator&gt;
bool <B>operator&gt;=</B>(const map&lt;Key, T, Compare, Allocator&gt;&amp; x,
                const map&lt;Key, T, Compare, Allocator&gt;&amp; y);</PRE>

<UL>
<P>Returns !<SAMP>(x &lt; y)</SAMP>.</P>
</UL>


<A NAME="Specialized Algorithms"><H3>Specialized Algorithms</H3></A>


<PRE>template &lt;class Key, class T, class Compare, class Allocator&gt;
void <B>swap</B>(map&lt;Key, T, Compare, Allocator&gt;&amp; a,
           map&lt;Key, T, Compare, Allocator&gt;&amp; b);</PRE>

<UL>
<P>Swaps the contents of <SAMP>a</SAMP> and <SAMP>b</SAMP>.</P>
</UL>


<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// map.cpp
//
 #include &lt;string&gt;
 #include &lt;map&gt;
 #include &lt;iostream&gt;
 using namespace std;

 typedef <B>map</B>&lt;string, int, less&lt;string&gt; &gt; months_type;

 // Print out a pair
 template &lt;class First, class Second&gt;
 ostream&amp; operator&lt;&lt;(ostream&amp; out, 
                     const pair&lt;First,Second&gt; &amp; p)
 {
   cout &lt;&lt; p.first &lt;&lt; " has " &lt;&lt; p.second &lt;&lt; " days";
   return out;
 }

 // Print out a map
 ostream&amp; operator&lt;&lt;(ostream&amp; out, const months_type &amp; l)
 {
   copy(l.begin(),l.end(), ostream_iterator
                &lt;months_type::value_type,char&gt;(cout,"\n"));
   return out;
 }


 int main(void)
 {
   // create a map of months and the number of days 
   // in the month
   months_type months;

   typedef months_type::value_type value_type;

   // Put the months in the multimap
   months.insert(value_type(string("January"),   31));
   months.insert(value_type(string("February"),   28));
   months.insert(value_type(string("February"),   29));
   months.insert(value_type(string("March"),     31));
   months.insert(value_type(string("April"),     30));
   months.insert(value_type(string("May"),       31));
   months.insert(value_type(string("June"),      30));
   months.insert(value_type(string("July"),      31));
   months.insert(value_type(string("August"),    31));
   months.insert(value_type(string("September"), 30));
   months.insert(value_type(string("October"),   31));
   months.insert(value_type(string("November"),  30));
   months.insert(value_type(string("December"),  31));

   // print out the months
   // Second February is not present
   cout &lt;&lt; months &lt;&lt; endl;

   // Find the Number of days in June
   months_type::iterator p = months.find(string("June"));

   // print out the number of days in June
   if (p != months.end())
     cout &lt;&lt; endl &lt;&lt; *p &lt;&lt; endl;
 
   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
April has 30 days
August has 31 days
December has 31 days
February has 28 days
January has 31 days
July has 31 days
June has 30 days
March has 31 days
May has 31 days
November has 30 days
October has 31 days
September has 30 days</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>Member function templates are used in all containers included in the Standard Template Library. An example of this feature is the constructor for <SAMP>map&lt;Key,T,Compare,Allocator&gt;</SAMP> that takes two templatized iterators:</P>
<UL>
<PRE>template &lt;class InputIterator&gt;
 map (InputIterator, InputIterator, 
      const Compare&amp; = Compare(),
      const Allocator&amp; = Allocator());</PRE>

</UL>
<P><B><I>map</I></B> also has an insert function of this type. These functions, when not restricted by compiler limitations, allow you to use any type of input iterator as arguments. For compilers that do not support this feature, substitute functions allow you to use an iterator obtained from the same type of container as the one you are constructing (or calling a member function on), or you can use a pointer to the type of element you have in the container. </P>
<P>For example, if your compiler does not support member function templates, you can construct a <B><I>map</I></B> in the following two ways: </P>
<UL>
<PRE>map&lt;int, int, less&lt;int&gt; &gt;::value_type intarray[10];
map&lt;int, int, less&lt;int&gt; &gt; first_map(intarray, 
                                    intarray + 10);
map&lt;int, int, less&lt;int&gt; &gt; second_map(first_map.begin(),
                                     first_map.end());</PRE>

</UL>
<P>But not this way:</P>
<UL>
<PRE>map&lt;long, long, less&lt;long&gt; &gt; long_map(first_map.begin(),
                                      first_map.end());</PRE>

</UL>
<P>Since the <SAMP>long_map</SAMP> and <SAMP>first_map</SAMP> are not the same type.</P>
<P>Also, many compilers do not support default template arguments. If your compiler is one of these, you always need to supply the <SAMP>Compare</SAMP> template argument and the <SAMP>Allocator</SAMP> template argument. For instance, you have to write: </P>
<P><SAMP>map&lt;int, int, less&lt;int&gt;, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>map&lt;int, int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="all_7029.htm">allocator</A></I></B>, <B><I><A HREF="Con_2487.htm">Containers</A></I></B>, <B><I><A HREF="Ite_5295.htm">Iterators</A></I></B>, <B><I><A HREF="mul_8396.htm">multimap</A></I></B></P>


<BR>
<HR>
<A HREF="mak_0285.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="mas_2579.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
