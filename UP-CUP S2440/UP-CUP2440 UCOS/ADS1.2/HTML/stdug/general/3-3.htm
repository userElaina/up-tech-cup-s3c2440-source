<HTML><HEAD><TITLE>3.3 Function Objects</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="3-2.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="3-4.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>3.3 Function Objects</H2>

<A NAME="331"><H3>3.3.1 Definition</H3></A>
<A NAME="idx42"><!></A>
<P>A <I>function object</I> is an instance of a class that defines the parenthesis operator as a member function. When a function object is used as a function, the parenthesis operator is invoked whenever the function is called. Consider the following class definition:</P>
<UL>
<PRE>
class biggerThanThree 
 {
   public:
   bool operator () (int val)
   { return val &gt; 3; }
};</PRE>
</UL>
<P>If we create an instance of class <B><I>biggerThanThree</I></B>, every time we reference this object using the function call syntax, the parenthesis operator member function is invoked. To generalize this class, we add a constructor and a constant data field, which is set by the constructor:</P>
<UL>
<PRE>
class biggerThan {
   public:
      const int testValue;
      biggerThan (int x) : testValue(x) { }

      bool operator () (int val)
      { return val &gt; testValue; }
};</PRE>
</UL>
<P>The result is a general <B><I>biggerthanX</I></B> function, where the value of X is determined when we create an instance of the class. We can do so, for example, as an argument to one of the generic functions that require a predicate. In this manner the following code finds the first value in a list that is larger than 12:</P>
<UL>
<PRE>
list&lt;int&gt;::iterator firstBig =
   find_if (aList.begin(), aList.end(), biggerThan(12));</PRE>
</UL>

<A NAME="332"><H3>3.3.2 Use</H3></A>
<A NAME="idx43"><!></A>
<P>There are a number of situations where it is convenient to substitute function objects in place of functions: to use an existing function object provided by the Standard C++ Library instead of a new function; to improve execution by using inline function calls; and to allow a function object to access or set state information that is held by an object. Let's deal with each of these in the next three sections.</P>

<A NAME="3321"><H4>3.3.2.1 To Employ Existing Standard Library Function Objects</H4></A>
<A NAME="idx44"><!></A>
<P><A HREF="#Table 5">Table 5</A> illustrates the function objects provided by the Standard C++ Library.</P>
<TABLE BORDER CELLPADDING=3 CELLSPACING=3>
<H4><A NAME="Table 5">Table 5 -- Function objects provided by the Standard C++ Library</A></H4><A NAME="idx45"><!></A>
<tr><td valign=top><B>Function object</B><td valign=top> <B>Implemented operations</B>&nbsp;
<tr><td valign=top>
<B><I>Arithmetic functions</I></B><BR>
<td valign=top>&nbsp;

<tr><td valign=top>
<SAMP>plus</SAMP><BR>
<td valign=top>
addition <SAMP>x + y</SAMP> <BR>

<tr><td valign=top>
<SAMP>minus</SAMP><BR>
<td valign=top>
subtraction <SAMP>x - y</SAMP><BR>

<tr><td valign=top>
<SAMP>multiplies</SAMP><BR>
<td valign=top>
multiplication <SAMP>x * y</SAMP><BR>

<tr><td valign=top>
<SAMP>divides</SAMP><BR>
<td valign=top>
division <SAMP>x / y</SAMP><BR>

<tr><td valign=top>
<SAMP>modulus</SAMP><BR>
<td valign=top>
remainder <SAMP>x % y</SAMP><BR>

<tr><td valign=top>
<SAMP>negate</SAMP><BR>
<td valign=top>
negation <SAMP>- x</SAMP><BR>

<tr><td valign=top>
<B><I>Comparison functions</I></B><BR>
<td valign=top>&nbsp;

<tr><td valign=top>
<SAMP>equal_to</SAMP><BR>
<td valign=top>
equality test <SAMP>x == y</SAMP> <BR>

<tr><td valign=top>
<SAMP>not_equal_to</SAMP><BR>
<td valign=top>
inequality test <SAMP>x != y</SAMP><BR>

<tr><td valign=top>
<SAMP>greater</SAMP><BR>
<td valign=top>
greater comparison <SAMP>x &gt; y</SAMP><BR>

<tr><td valign=top>
<SAMP>less</SAMP><BR>
<td valign=top>
less-than comparison <SAMP>x &lt; y</SAMP><BR>

<tr><td valign=top>
<SAMP>greater_equal</SAMP><BR>
<td valign=top>
greater than or equal comparison <SAMP>x &gt;= y</SAMP><BR>

<tr><td valign=top>
<SAMP>less_equal</SAMP><BR>
<td valign=top>
less than or equal comparison <SAMP>x &lt;= y</SAMP><BR>

<tr><td valign=top>
<B><I>Logical functions</I></B><BR>
<td valign=top>&nbsp;

<tr><td valign=top>
<SAMP>logical_and</SAMP><BR>
<td valign=top>
logical conjunction <SAMP>x &amp;&amp; y</SAMP><BR>

<tr><td valign=top>
<SAMP>logical_or</SAMP><BR>
<td valign=top>
logical disjunction <SAMP>x || y</SAMP><BR>

<tr><td valign=top>
<SAMP>logical_not</SAMP><BR>
<td valign=top>
logical negation <SAMP>! x</SAMP><BR>


</TABLE>


</P>
<P>Let's look at a couple of examples that show how these might be used. The first example uses <SAMP>plus()</SAMP> to compute the by-element addition of two lists of integer values, placing the result back into the first list. This can be performed by the following code:</P>
<UL>
<PRE>
transform (listOne.begin(), listOne.end(), listTwo.begin(), 
   listOne.begin(), plus&lt;int&gt;() );</PRE>
</UL>
<P>The second example negates every element in a vector of boolean values:</P>
<UL>
<PRE>
transform (aVec.begin(), aVec.end(), aVec.begin(), 
   logical_not&lt;bool&gt;() );</PRE>
</UL>
<P>The base classes used by the Standard C++ Library to define the functions in <A HREF="#Table 5">Table 5</A> are also available for creating new unary and binary function objects. The class definitions for <B><I><A HREF="../../stdref/una_4659.htm">unary_function</A></I></B> and <B><I><A HREF="../../stdref/bin_7851.htm">binary_function</A></I></B> can be incorporated by #including <SAMP>functional</SAMP>.</P>
<A NAME="idx46"><!></A>
<P>The base classes are defined as follows:</P>
<UL>
<PRE>
template &lt;class Arg, class Result&gt;
struct unary_function {
   typedef Arg argument_type;
   typedef Result result_type;
};

template &lt;class Arg1, class Arg2, class Result&gt;
struct binary_function {
   typedef Arg1 first_argument_type;
   typedef Arg2 second_argument_type;
   typedef Result result_type;
};</PRE>
</UL>
<P>An example of the use of these functions is found in <A HREF="6-3.htm">Section 6.3</A>. There we want to take a binary function of type <SAMP>Widget</SAMP> and an argument of type <SAMP>integer</SAMP>, and compare the widget identification number against the integer value. A function to do this is written in the following manner:</P>
<UL>
<PRE>
struct WidgetTester : binary_function&lt;Widget, int, bool&gt; {
public:
   bool operator () (const Widget &amp; wid, int testid) const
      { return wid.id == testid; }
};</PRE>
</UL>

<A NAME="3322"><H4>3.3.2.2 To Improve Execution</H4></A>
<A NAME="idx47"><!></A>
<P>A second reason to consider using function objects instead of functions is faster code. In many cases an invocation of a function object, as in the examples on <SAMP>transform()</SAMP> in <A HREF="3-3.htm#3321">Section 3.3.2.1</A>, can be expanded in-line, eliminating the overhead of a function call.</P>

<A NAME="3323"><H4>3.3.2.3 To Access or Set State Information</H4></A>
<A NAME="idx48"><!></A>
<P>The third major reason to use a function object in place of a function is when each invocation of the function must remember some state set by earlier invocations. An example of this occurs in the creation of a generator, to be used with the generic algorithm <SAMP>generate().</SAMP> A <I>generator</I> is simply a function that returns a different value each time it is invoked. The most commonly used form of generator is a <I>random number generator</I>, but there are other uses for the concept. A <I>sequence generator</I> simply returns the values of an increasing sequence of natural numbers (1, 2, 3, 4 and so on). We can call this object <B><I>iotaGen</I></B> after the similar operation in the programming language APL, and define it as follows:</P>
<UL>
<PRE>
class iotaGen {
public:
   iotaGen (int start = 0) : current(start) { }
   int operator () () { return current++; }
private:
   int current;
};</PRE>
</UL>
<P>An iota object maintains a current value, which can be set by the constructor, or defaults to zero. Each time the function-call operator is invoked, the current value is returned, and also incremented. Using this object, the following call on the Standard C++ Library function <SAMP>generate()</SAMP> initializes a vector of 20 elements with the values 1 through 20:</P>
<UL>
<PRE>
vector&lt;int&gt; aVec(20);
generate (aVec.begin(), aVec.end(), iotaGen(1));</PRE>
</UL>
<P>A more complex example of using a function object occurs in the radix sorting example program, which is given as an example of using the list datatype in <A HREF="6-3.htm">Section 6.3</A>. In this program references are initialized in the function object, so that during the sequence of invocations the function object can access and modify local values in the calling program.</P>

<HR>
<A HREF="3-2.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="3-4.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
