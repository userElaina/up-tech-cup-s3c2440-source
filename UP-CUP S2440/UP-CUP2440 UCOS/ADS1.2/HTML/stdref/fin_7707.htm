<HTML><HEAD><TITLE>find_end</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="fin_7988.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="fin_8583.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>find_end</H2>
<PRE><HR>Algorithm
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Finds the last occurrence of a sub-sequence in a sequence.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;algorithm&gt;

template &lt;class ForwardIterator1, class ForwardIterator2&gt;
ForwardIterator1 <B>find_end</B>(ForwardIterator1 first1, 
                          ForwardIterator1 last1,
                          ForwardIterator2 first2, 
                          ForwardIterator2 last2);
template &lt;class Forward Iterator1, class ForwardIterator2, 
          class BinaryPredicate&gt;
  ForwardIterator1 <B>find_end</B>(ForwardIterator1 first1, 
                            ForwardIterator1 last1,
                            ForwardIterator2 first2,
                            ForwardIterator2 last2,
                            BinaryPredicate pred);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>find_end</I></B> algorithm finds the last occurrence of a sub-sequence, indicated by <SAMP>[first2, last2)</SAMP>, in a sequence, <SAMP>[first1,last1)</SAMP>. The algorithm returns an iterator pointing to the first element of the found sub-sequence, or <SAMP>last1</SAMP> if no match is found.</P>
<P>More precisely, the <B><I>find_end</I></B> algorithm returns the last iterator <SAMP>i</SAMP> in the range <SAMP>[first1, last1 - (last2-first2))</SAMP> such that for any non-negative integer <SAMP>n &lt; (last2-first2)</SAMP>, the following   corresponding   conditions hold: </P>
<UL>
<PRE>*(i+n)  ==  *(first2+n),    
pred(*(i+n),*(first2+n)) == true.</PRE>

</UL>
<P>Or returns <SAMP>last1</SAMP> if no such iterator is found.</P>
<P>Two versions of the algorithm exist. The first uses the equality operator as the default binary predicate, and the second allows you to specify a binary predicate.</P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P>At most <SAMP>(last2-first2)*(last1-first1-(last2-first2)+1)</SAMP> applications of the corresponding predicate are done.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// find_end.cpp
//
#include&lt;vector&gt;
#include&lt;iterator&gt;
#include&lt;algorithm&gt;
#include&lt;functional&gt;
#include&lt;iostream&gt;
using namespace std;

int main()
{
   typedef vector&lt;int&gt;::iterator iterator;
   int d1[10] = {0,1,6,5,3,2,2,6,5,7};
   int d2[4] = {6,5,0,0}
   //
   // Set up two vectors.
   //
   vector&lt;int&gt; v1(d1+0, d1+10), v2(d2+0, d2+2);
   //
   // Try both find_first_of variants.
   //
   iterator it1 = find_first_of (v1.begin(), v1.end(),
                             v2.begin(), v2.end());
   iterator it2 = find_first_of (v1.begin(), v1.end(),
                             v2.begin(), 
                                 v2.end(), equal_to&lt;int&gt;());
   //
   // Try both find_end variants.
   //
   iterator it3 = <B>find_end</B> (v1.begin(), v1.end(),
                            v2.begin(), v2.end());
   iterator it4 = <B>find_end</B> (v1.begin(), v1.end(),
                            v2.begin(), 
                            v2.end(), equal_to&lt;int&gt;());
   //
   // Output results of find_first_of.
    // Iterator now points to the first element that matches    
   // one of a set of values
   //
   cout &lt;&lt; "For the vectors: ";
   copy (v1.begin(), v1.end(), 
         ostream_iterator&lt;int&gt;(cout," "));
   cout &lt;&lt; " and ";
   copy (v2.begin(), v2.end(), 
         ostream_iterator&lt;int&gt;(cout," "));
   cout&lt;&lt; endl ,, endl
       &lt;&lt; "both versions of find_first_of point to: "
       &lt;&lt; *it1 &lt;&lt; endl;

   //
   //Output results of find_end.
   //Iterator now points to the first element of the last
   //find sub-sequence.
   //
   cout &lt;&lt; endl &lt;&lt; endl
        &lt;&lt; "both versions of find_end point to: "
        &lt;&lt; *it3 &lt;&lt; endl;

   return 0;
}</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
For the vectors: 0 1 6 5 3 2 2 6 5 7  and 6 5
both versions of find_first_of point to: 6
both versions of find_end point to: 6</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, then you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you have to write:</P>
<P><SAMP>vector&lt;int, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="Alg_5157.htm">Algorithms</A></I></B>, <B><I><A HREF="fin_7988.htm">find</A></I></B>, <B><I><A HREF="fin_2105.htm">find_if</A></I></B>, <B><I><A HREF="adj_8817.htm">adjacent_find</A></I></B></P>


<BR>
<HR>
<A HREF="fin_7988.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="fin_8583.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
