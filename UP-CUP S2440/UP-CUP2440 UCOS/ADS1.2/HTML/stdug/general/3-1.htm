<HTML><HEAD><TITLE>3.1 Functions</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="3.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="3-2.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>3.1 Functions</H2>
<A NAME="idx40"><!></A>
<P>A number of algorithms provided in the Standard C++ Library require functions as arguments. A simple example is the algorithm <SAMP>for_each()</SAMP>, which invokes a function, passed as an argument, on each value held in a container. For example, the following code applies the <SAMP>printElement()</SAMP> function to produce output describing each element in a list of integer values:</P>
<UL>
<PRE>
void printElement (int value)
{
   cout &lt;&lt; "The list contains " &lt;&lt; value &lt;&lt; endl;
}

main () 
{
   list&lt;int&gt; aList;
      ...
   for_each (aList.begin(), aList.end(), printElement);
}</PRE>
</UL>
<P><I>Binary functions</I> take two arguments, and are often applied to values from two different sequences. For example, suppose we have a list of strings and a list of integers. For each element in the first list we wish to replicate the string the number of times given by the corresponding value in the second list. We can perform this easily using the function <SAMP>transform()</SAMP> from the Standard C++ Library. First, we define a binary function with the desired characteristics:</P>
<UL>
<PRE>
string stringRepeat (const string &amp; base, int number)
                    // replicate base the given number of times
{
   string result;   // initially the result is empty
   while (number--)  result += base;
   return result;
}</PRE>
</UL>
<P>The following call on <SAMP>transform()</SAMP> then produces the desired effect:</P>
<UL>
<PRE>
list&lt;string&gt; words;
list&lt;int&gt; counts;
   ...
transform (words.begin(), words.end(), 
   counts.begin(), words.begin(), stringRepeat);</PRE>
</UL>
<P>Transforming the words <SAMP>one,two,three</SAMP> with the values 3, 2, 3 would yield the result <SAMP>oneoneone,twotwo,threethreethree</SAMP>.</P>

<HR>
<A HREF="3.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="3-2.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
