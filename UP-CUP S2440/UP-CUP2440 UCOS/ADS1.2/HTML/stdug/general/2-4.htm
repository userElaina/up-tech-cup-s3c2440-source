<HTML><HEAD><TITLE>2.4 Insert Iterators</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="2-3.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="2-5.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>2.4 Insert Iterators</H2>
<A NAME="idx35"><!></A>
<P>Assignment to the dereferenced value of an output iterator is normally used to <I>overwrite</I> the contents of an existing location. For example, the following invocation of the function <SAMP>copy()</SAMP> transfers values from one vector to another, although the space for the second vector was already set aside and even initialized by the declaration statement:</P>
<UL>
<PRE>
vector&lt;int&gt; a(10);
vector&lt;int&gt; b(10);
   ...
copy (a.begin(), a.end(), b.begin());</PRE>
</UL>
<P>Even structures such as lists can be overwritten in this fashion. In the following code, the list named <SAMP>c</SAMP> is assumed to have at least ten elements. The initial ten locations in the list will be replaced by the contents of the vector <SAMP>a</SAMP>.</P>
<UL>
<PRE>
list&lt;int&gt; c;
   ...
copy (a.begin(), a.end(), c.begin());</PRE>
</UL>
<P>With structures such as lists and sets, which are dynamically enlarged as new elements are added, it is frequently more appropriate to <I>insert</I> new values into the structure, rather than to <I>overwrite</I> existing locations. A type of adaptor called an <I>insert iterator</I> allows us to use algorithms such as <SAMP>copy()</SAMP> to insert into the associated container, rather than overwrite elements in the container. The output operations of the iterator are changed into insertions into the associated container. For example, the following code inserts the values of the vector <SAMP>a</SAMP> into an initially empty list:</P>
<UL>
<PRE>
list&lt;int&gt; d;

copy (a.begin(), a.end(), front_inserter(d));</PRE>
</UL>
<A NAME="idx36"><!></A>
<P>There are three forms of insert iterators, all of which can be used to change a <I>copy</I> operation into an <I>insert</I> operation. The iterator generated using <SAMP>front_inserter</SAMP>, shown above, inserts values into the front of the container. The iterator generated by <SAMP>back_inserter</SAMP> places elements into the back of the container. Both forms can be used with <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B>s and <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B>s, but not with <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>s or <B><I><A HREF="../../stdref/map_8018.htm">map</A></I></B>s. The iterator <SAMP>back_inserter</SAMP>, but not <SAMP>front_inserter</SAMP>, can be used with <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B>.</P>
<A NAME="idx37"><!></A>
<P>The third and most general form of insert iterator is <SAMP>inserter</SAMP>, which takes two arguments: a container and an iterator within the container. This form copies elements into the specified location in the container. (For a <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B>, this means elements are copied immediately before the specified location). This form can be used with all the structures for which the previous two forms work, as well as with sets and maps.</P>
<P>The following simple program illustrates the use of all three forms of insert iterators. First, the values 3, 2, and 1 are inserted into the front of an initially empty list. Note that as each value is inserted, it becomes the new front, so that the resultant list is ordered 1, 2, 3. Next, the values 7, 8, and 9 are inserted into the end of the list. Finally, the <SAMP>find()</SAMP> operation is used to locate an iterator that denotes the 7 value, and the numbers 4, 5, and 6 are inserted immediately prior. The result is the list of numbers from 1 to 9 in order.</P>
<UL>
<PRE>
void main() {
   int threeToOne [ ] = {3, 2, 1};
   int fourToSix [ ] = {4, 5, 6};
   int sevenToNine [ ] = {7, 8, 9};

   list&lt;int&gt; aList;

                          // first insert into the front
                          // note that each value becomes new front
   copy (threeToOne, threeToOne+3, front_inserter(aList));

                          // then insert into the back
   copy (sevenToNine, sevenToNine+3, back_inserter(aList));

   
                          // find the seven, and insert into middle
   list&lt;int&gt;::iterator seven = find(aList.begin(), aList.end(), 7);
   copy (fourToSix, fourToSix+3, inserter(aList, seven));

                          // copy result to output
   copy (aList.begin(), aList.end(), 
         ostream_iterator&lt;int,char&gt;(cout, " "));
   cout &lt;&lt; endl;
}</PRE>
</UL>
<P>Note that there is an important and subtle difference between the iterators created by <SAMP>inserter(aList, aList.begin())</SAMP> and <SAMP>front_inserter(aList).</SAMP> The call on <SAMP>inserter(aList, aList.begin())</SAMP> copies values in sequence, adding each one to the front of a list, whereas <SAMP>front_inserter(aList)</SAMP> copies values making each value the new front. The result is that <SAMP>front_inserter(aList)</SAMP> reverses the order of the original sequence, while <SAMP>inserter(aList, aList.begin())</SAMP> retains the original order.</P>

<HR>
<A HREF="2-3.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="2-5.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
