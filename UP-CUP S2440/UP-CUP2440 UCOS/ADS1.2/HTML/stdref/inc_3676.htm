<HTML><HEAD><TITLE>includes</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="Hea_4489.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="ind_9304.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>includes</H2>
<PRE><HR>Algorithm
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>A basic set of operation for sorted sequences.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;algorithm&gt;
template &lt;class InputIterator1, class InputIterator2&gt;
 bool <B>includes</B> (InputIterator1 first1, InputIterator1 last1,
                InputIterator2 first2, 
                InputIterator2 last2);

template &lt;class InputIterator1, class InputIterator2, 
          class Compare&gt;
 bool <B>includes</B> (InputIterator1 first1, InputIterator1 last1,
              InputIterator2 first2, 
              InputIterator2 last2, Compare comp);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>includes</I></B> algorithm compares two sorted sequences and returns <SAMP>true</SAMP> if every element in the range <SAMP>[first2, last2)</SAMP> is contained in the range <SAMP>[first1, last1)</SAMP>. It returns <SAMP>false</SAMP> otherwise. <B><I>include</I></B> assumes that the sequences are sorted using the less than operator (<SAMP>operator&lt;</SAMP>), unless an alternative comparison operator (<SAMP>comp</SAMP>) is included.</P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P>At most <SAMP>((last1 - first1) + (last2 - first2)) * 2 -1</SAMP> comparisons are performed.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// includes.cpp 
//
 #include &lt;algorithm&gt;
 #include &lt;set&gt;
 #include &lt;iostream&gt;
 using namespace std;

 int main()
 {

   //Initialize some sets
   int a1[10] = {1,2,3,4,5,6,7,8,9,10};
   int a2[6]  = {2,4,6,8,10,12};
   int a3[4]  = {3,5,7,8};
   set&lt;int, less&lt;int&gt; &gt; all(a1, a1+10), even(a2, a2+6), 
                         small(a3,a3+4);

  //Demonstrate includes
  cout &lt;&lt; "The set: ";
  copy(all.begin(),all.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
  bool answer = includes(all.begin(), all.end(), 
                small.begin(), small.end());
  cout &lt;&lt; endl 
       &lt;&lt; (answer ? "INCLUDES " : "DOES NOT INCLUDE ");
  copy(small.begin(),small.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
  answer = includes(all.begin(), all.end(), 
                    even.begin(), even.end());
  cout &lt;&lt; ", and" &lt;&lt; endl 
       &lt;&lt; (answer ? "INCLUDES" : "DOES NOT INCLUDE ");
  copy(even.begin(),even.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
  cout &lt;&lt; endl &lt;&lt; endl;

  return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
The set: 1 2 3 4 5 6 7 8 9 10
INCLUDES 3 5 7 8 , and
DOES NOT INCLUDE 2 4 6 8 10 12</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, then you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you have to write:</P>
<P><SAMP>set&lt;int, less&lt;int&gt;, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>set&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I> <A HREF="set_1649.htm">set</A></I></B>,<B><I><A HREF="set_6462.htm">set_union</A></I></B>,<B><I> <A HREF="set_9182.htm">set_intersection</A></I></B>, <B><I><A HREF="set_0972.htm">set_difference</A></I></B>, <B><I><A HREF="set_1735.htm">set_symmetric_difference</A></I></B></P>


<BR>
<HR>
<A HREF="Hea_4489.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="ind_9304.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
