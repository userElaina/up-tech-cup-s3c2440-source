<HTML><HEAD><TITLE>min_element</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="min_9233.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="min_5058.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>min_element</H2>
<PRE><HR>Algorithm
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Finds the minimum value in a range.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;algorithm&gt;
template &lt;class ForwardIterator&gt;
 ForwardIterator
 <B>min_element</B>(ForwardIterator first, ForwardIterator last);

template &lt;class ForwardIterator, class Compare&gt;
 InputIterator
 <B>min_element</B>(ForwardIterator first, ForwardIterator last,
             Compare comp);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>min_element</I></B> algorithm returns an iterator that denotes the minimum element in a sequence. If the sequence contains more than one copy of the minimum element, the iterator points to the first occurrence of the element. In the second version of the function, the optional argument <SAMP>comp</SAMP> defines a comparison function that can be used in place of the default <SAMP>operator&lt;</SAMP>.</P>
<P>Algorithm <B><I>min_element</I></B> returns the first iterator <SAMP>i</SAMP> in the range <SAMP>[first, last)</SAMP> such that for any iterator <SAMP>j</SAMP> in the same range, the following corresponding conditions hold:</P>
<P><SAMP>!(*j &lt; *i)</SAMP></P>
<P>or</P>
<P><SAMP>comp(*j, *i) == false.</SAMP> </P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P><B><I>min_element</I></B> performs exactly <SAMP>max((last - first) - 1, 0)</SAMP> applications of the corresponding comparisons.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// max_elem.cpp
//
 #include &lt;algorithm&gt;
 #include &lt;vector&gt;
 #include &lt;iostream&gt;
 using namespace std;

 int main(void)
 {
   typedef vector&lt;int&gt;::iterator iterator; 
   int d1[5] = {1,3,5,32,64}; 
 
   // set up vector 
   vector&lt;int&gt;      v1(d1,d1 + 5); 

   // find the largest element in the vector
   iterator it1 = max_element(v1.begin(), v1.end());
   // it1 = v1.begin() + 4
 
   // find the largest element in the range from
   // the beginning of the vector to the 2nd to last
   iterator it2 = max_element(v1.begin(), v1.end()-1, 
                      less&lt;int&gt;());   
   // it2 = v1.begin() + 3
 
   // find the smallest element 
   iterator it3 = <B>min_element</B>(v1.begin(), v1.end()); 
   // it3 = v1.begin() 
 
   // find the smallest value in the range from
   // the beginning of the vector plus 1 to the end
   iterator it4 = <B>min_element</B>(v1.begin()+1, v1.end(), 
                      less&lt;int&gt;());      
   // it4 = v1.begin() + 1

   cout &lt;&lt; *it1 &lt;&lt; " " &lt;&lt; *it2 &lt;&lt; " " 
        &lt;&lt; *it3 &lt;&lt; " " &lt;&lt; *it4 &lt;&lt; endl;
 
   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
64 32 1 3</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, then you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you have to write:</P>
<P><SAMP>vector&lt;int,allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="max_6671.htm">max</A></I></B>, <B><I><A HREF="max_8656.htm">max_element</A></I></B>, <B><I><A HREF="min_9233.htm">min</A></I></B></P>


<BR>
<HR>
<A HREF="min_9233.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="min_5058.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
