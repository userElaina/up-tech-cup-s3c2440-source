<HTML><HEAD><TITLE>lexicographical_compare</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="les_5595.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="lim_2532.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>lexicographical_compare</H2>
<PRE><HR>Algorithm
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Compares two ranges lexicographically.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;algorithm&gt;
template &lt;class InputIterator1, class InputIterator2&gt;
 bool
 <B>lexicographical_compare</B>(InputIterator1 first,
                         InputIterator2 last1,
                         InputIterator2 first2,
                         InputIterator last2);

template &lt;class InputIterator1, class InputIterator2, 
          class Compare&gt;
 bool
 <B>lexicographical_compare</B>(InputIterator1 first,
                         InputIterator2 last1,
                         InputIterator2 first2,
                         InputIterator last2, Compare comp);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>lexicographical_compare</I></B> functions compare each element in the range <SAMP>[first1, last1)</SAMP> to the corresponding element in the range <SAMP>[first2, last2)</SAMP> using iterators <SAMP>i</SAMP> and <SAMP>j</SAMP>. </P>
<P>The first version of the algorithm uses <SAMP>operator&lt;</SAMP> as the default comparison operator. It immediately returns <SAMP>true</SAMP> if it encounters any pair in which <SAMP>*i</SAMP> is less than <SAMP>*j</SAMP>, and immediately returns <SAMP>false</SAMP> if <SAMP>*j</SAMP> is less than <SAMP>*i</SAMP>. If the algorithm reaches the end of the first sequence before reaching the end of the second sequence, it also returns <SAMP>true</SAMP>. </P>
<P>The second version of the function takes an argument <SAMP>comp</SAMP> that defines a comparison function that is used in place of the default <SAMP>operator&lt;.</SAMP></P>
<P>The <B><I>lexicographical_compare</I></B> functions can be used with all the datatypes included in the standard library.</P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P><B><I>lexicographical_compare</I></B> performs at most <SAMP>min((last1 - first1), (last2  -  first2))</SAMP> applications of the comparison function.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// lex_comp.cpp
//
 #include &lt;algorithm&gt;
 #include &lt;vector&gt;
 #include &lt;functional&gt;
 #include &lt;iostream&gt;
 using namespace std;
 
 int main(void)
 {
   int d1[5] = {1,3,5,32,64}; 
   int d2[5] = {1,3,2,43,56};

   // set up vector 
   vector&lt;int&gt; v1(d1,d1 + 5), v2(d2,d2 + 5);    
 
   // Is v1 less than v2 (I think not)
   bool b1 = <B>lexicographical_compare</B>(v1.begin(), 
              v1.end(), v2.begin(), v2.end());

   // Is v2 less than v1 (yup, sure is)
   bool b2 = <B>lexicographical_compare</B>(v2.begin(), 
            v2.end(), v1.begin(), v1.end(), less&lt;int&gt;());
   cout &lt;&lt; (b1 ? "TRUE" : "FALSE") &lt;&lt; " " 
        &lt;&lt; (b2 ? "TRUE" : "FALSE") &lt;&lt; endl;

   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
FALSE TRUE</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, then you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you have to write:</P>
<P><SAMP>vector&lt;int, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>


<BR>
<HR>
<A HREF="les_5595.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="lim_2532.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
