<HTML><HEAD><TITLE>next_permutation</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="Neg_5086.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="not_6483.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>next_permutation</H2>
<PRE><HR>Algorithm
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Generates successive permutations of a sequence based on an ordering function. </P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;algorithm&gt;
template &lt;class BidirectionalIterator&gt;
bool <B>next_permutation</B> (BidirectionalIterator first,
                       BidirectionalIterator last);

template &lt;class BidirectionalIterator, class Compare&gt;
 bool <B>next_permutation</B> (BidirectionalIterator first,
                        BidirectionalIterator last,
                        Compare comp);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The permutation-generating algorithms (<B><I>next_permutation</I></B> and <B><I><A HREF="pre_1548.htm">prev_permutation</A></I></B>) assume that the set of all permutations of the elements in a sequence is lexicographically sorted with respect to <SAMP>operator&lt;</SAMP> or <SAMP>comp</SAMP>. For example, if a sequence includes the integers 1 2 3, that sequence has six permutations. In order from first to last, they are: 1 2 3, 1 3 2, 2 1 3, 2 3 1, 3 1 2, and 3 2 1. </P>
<P>The <B><I>next_permutation</I></B> algorithm takes a sequence defined by the range <SAMP>[first, last)</SAMP> and transforms it into its next permutation, if possible. If such a permutation does exist, the algorithm completes the transformation and returns <SAMP>true</SAMP>. If the permutation does not exist, <B><I>next_permutation</I></B> returns <SAMP>false</SAMP>, and transforms the permutation into its "first" permutation. <B><I>next_permutation</I></B> does the transformation according to the lexicographical ordering defined by either <SAMP>operator&lt;</SAMP> (the default used in the first version of the algorithm) or <SAMP>comp</SAMP> (which is user-supplied in the second version of the algorithm). </P>
<P>For example, if the sequence defined by <SAMP>[first, last)</SAMP> contains the integers 3 2 1 (in that order), there is <I>not</I> a "next permutation."  Therefore, the algorithm transforms the sequence into its first permutation (1 2 3) and returns <SAMP>false</SAMP>.</P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P>At most <SAMP>(last - first)/2</SAMP> swaps are performed.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// permute.cpp
//
 #include &lt;numeric&gt;    //for accumulate
 #include &lt;vector&gt;        //for vector
 #include &lt;functional&gt; //for less
 #include &lt;iostream&gt;
 using namespace std;

 int main()
 {
   //Initialize a vector using an array of ints
   int  a1[] = {0,0,0,0,1,0,0,0,0,0};
   char a2[] = "abcdefghji";
   //Create the initial set and copies for permuting
   vector&lt;int&gt;  m1(a1, a1+10); 
   vector&lt;int&gt;  prev_m1((size_t)10), next_m1((size_t)10);
   vector&lt;char&gt; m2(a2, a2+10);
   vector&lt;char&gt; prev_m2((size_t)10), next_m2((size_t)10);
   copy(m1.begin(), m1.end(), prev_m1.begin());
   copy(m1.begin(), m1.end(), next_m1.begin());
   copy(m2.begin(), m2.end(), prev_m2.begin());
   copy(m2.begin(), m2.end(), next_m2.begin());
   //Create permutations
   prev_permutation(prev_m1.begin(), 
                    prev_m1.end(),less&lt;int&gt;());
   <B>next_permutation</B>(next_m1.begin(), 
                    next_m1.end(),less&lt;int&gt;());
   prev_permutation(prev_m2.begin(), 
                    prev_m2.end(),less&lt;int&gt;());
   <B>next_permutation</B>(next_m2.begin(), 
                    next_m2.end(),less&lt;int&gt;());
   //Output results
   cout &lt;&lt; "Example 1: " &lt;&lt; endl &lt;&lt; "     ";
   cout &lt;&lt; "Original values:      ";
   copy(m1.begin(),m1.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl &lt;&lt; "     ";
   cout &lt;&lt; "Previous permutation: ";
   copy(prev_m1.begin(),prev_m1.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl&lt;&lt; "     ";
   cout &lt;&lt; "Next Permutation:     ";
   copy(next_m1.begin(),next_m1.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl &lt;&lt; endl;
   cout &lt;&lt; "Example 2: " &lt;&lt; endl &lt;&lt; "     ";
   cout &lt;&lt; "Original values: ";
   copy(m2.begin(),m2.end(),
        ostream_iterator&lt;char,char&gt;(cout," "));     
   cout &lt;&lt; endl &lt;&lt; "     ";
   cout &lt;&lt; "Previous Permutation: ";
   copy(prev_m2.begin(),prev_m2.end(),
        ostream_iterator&lt;char,char&gt;(cout," "));
   cout &lt;&lt; endl &lt;&lt; "     ";
   cout &lt;&lt; "Next Permutation:     ";
   copy(next_m2.begin(),next_m2.end(),
        ostream_iterator&lt;char,char&gt;(cout," "));  
   cout &lt;&lt; endl &lt;&lt; endl;

   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
Example 1:
     Original values:      0 0 0 0 1 0 0 0 0 0
     Previous permutation: 0 0 0 0 0 1 0 0 0 0
     Next Permutation:     0 0 0 1 0 0 0 0 0 0
Example 2:
     Original values: a b c d e f g h j i
     Previous Permutation: a b c d e f g h i j
     Next Permutation:     a b c d e f g i h j</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, the you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you need to write:</P>
<P><SAMP>vector&lt;int, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="pre_1548.htm">prev_permutation</A></I></B></P>


<BR>
<HR>
<A HREF="Neg_5086.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="not_6483.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
