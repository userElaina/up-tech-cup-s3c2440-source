<HTML><HEAD><TITLE>15.3 Another Look at the Date Format String</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="15-2.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="15-4.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>15.3 Another Look at the Date Format String</H2>
<A NAME="idx406"><!></A>
<P>We would like to store the date format string in the iostream storage through <SAMP>iword()</SAMP> and <SAMP>pword()</SAMP>. In this way, the input and output operations for <SAMP>date</SAMP> objects can access the format string for parsing and formatting. Format parameters are often set with manipulators (see <A HREF="7-3.htm#732">Section 7.3.2</A>), so we should add a manipulator that sets the date format string. It could be used like this:</P>
<UL>
<PRE>
date today;
ofstream ostr;
// ...
ostr &lt;&lt; setfmt("%D") &lt;&lt; today;</PRE>
</UL>
<A NAME="idx407"><!></A>
<P>Here is a suggested implementation for such a manipulator:</P>
<UL>
<PRE>
class setfmt : public smanip&lt;const char*&gt;
{
 public:
  setfmt(const char* fmt)
  : smanip&lt;const char*&gt;(setfmt_,fmt) {}
 private:
  static const int datfmtIdx ;                                //1
 
  static ios_base&amp; setfmt_(ios_base&amp; str, const char* fmt)
  {
    str.pword(datfmtIdx) = (void*) fmt;                       //2
    return str;
  }

  template&lt;class charT, class Traits&gt;
  friend basic_ostream&lt;charT, Traits&gt; &amp;                       //3
  operator &lt;&lt; (
  basic_ostream&lt;charT, Traits &gt;&amp; os, const date&amp; dat);
};
 
const int setfmt::datfmtIdx = ios_base::xalloc();             //4</PRE>
</UL>
<A NAME="idx408"><!></A>
<P>The technique applied to implement the manipulator is described in detail in Example 2 of <A HREF="12-3.htm">Section 12.3</A>, so we won't repeat it here. But regarding this manipulator and the private use of iostream storage, there are other interesting details:</P>
<TABLE CELLPADDING="3">

<TR VALIGN="top"><TD>//1</TD><TD>The manipulator class owns the index of the element in the iostream storage where we want to store the format string. It is initialized in <SAMP>//4</SAMP> by a call to <SAMP>xalloc()</SAMP>.
<A NAME="fn20"><!></A>
<TR VALIGN="top"><TD>//2</TD><TD>The manipulator accesses the array <SAMP>pword()</SAMP> using the index <SAMP>datfmtIdx</SAMP>, and stores the pointer to the date format string.<SUP><A HREF="endnotes.htm#fn20">20</A></SUP> Note that the reference returned by <SAMP>pword()</SAMP> is only used for <I>storing</I> the pointer to the date format string. Generally, you should never store a reference returned by <SAMP>iword()</SAMP> or <SAMP>pword()</SAMP> in order to access the stored data through this reference later on. This is because these references can become invalid once the array is reallocated or copied. (See the <I>Class Reference</I> for more details.)
<TR VALIGN="top"><TD>//3</TD><TD>The inserter for <SAMP>date</SAMP> objects needs to access the index into the array of pointers, so that it can read the format string and use it. Therefore, the inserter must be declared as a friend. In principle, the extractor must be a friend, too; however, the standard C++ locale falls short of supporting the use of format strings like the ones used by the standard C function <SAMP>strptime()</SAMP>. Hence, the implementation of a date extractor that supports date format strings would be a lot more complicated than the implementation for the inserter, which can use the stream's locale. We have omitted the extractor for the sake of brevity.
<TR VALIGN="top"><TD>//4</TD><TD>Initializes the index of elements in istream storage where the format string is kept.
</TABLE>
<A NAME="idx409"><!></A>
<P>The inserter for <SAMP>date</SAMP> objects given below is almost identical to the one we described in <A HREF="11-5.htm#1151">Section 11.5.1</A>:</P>
<UL>
<PRE>
template&lt;class charT, class Traits&gt;
basic_ostream&lt;charT, Traits&gt; &amp;
operator &lt;&lt; (basic_ostream&lt;charT, Traits &gt;&amp; os, const date&amp; dat)
{
 ios_base::iostate err = 0;
 char*  patt = 0;
 int    len  = 0;
 charT* fmt  = 0;
 
 try {
  typename basic_ostream&lt;charT, Traits&gt;::sentry opfx(os);
 
  if(opfx)
  {
     patt = (char*) os.pword(setfmt.datfmtIdx);               //1
     len  = strlen(patt);
     fmt  = new charT[len];
 
     use_facet&lt;ctype&lt;charT&gt; &gt;(os.getloc()).
         widen(patt, patt+len, fmt);
 
     if (use_facet&lt;time_put&lt;charT
                  ,ostreambuf_iterator&lt;charT,Traits&gt; &gt; &gt;
          (os.getloc())
          .put(os,os,os.fill(),&amp;dat.tm_date,fmt,fmt+len)      //2
          .failed()
        )
          err = ios_base::badbit;
     os.width(0);
  }
 } //try
 catch(...)
 {
    delete [] fmt;
    bool flag = FALSE;
    try {
           os.setstate(ios_base::failbit);
        }
    catch( ios_base::failure ) { flag= TRUE; }
    if ( flag ) throw;
 }
 
 delete [] fmt;
 if ( err ) os.setstate(err);
 
 return os;
}</PRE>
</UL>
<P>The only change from the previous inserter is that the format string here is read from the iostream storage (in statement <SAMP>//1</SAMP>) instead of being the fixed string <SAMP>"%x"</SAMP>. The format string is then provided to the locale's time formatting facet (in statement <SAMP>//2</SAMP>).</P>

<HR>
<A HREF="15-2.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="15-4.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
