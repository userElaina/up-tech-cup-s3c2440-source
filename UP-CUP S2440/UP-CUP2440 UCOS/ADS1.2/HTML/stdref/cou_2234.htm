<HTML><HEAD><TITLE>count, count_if</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="cop_4514.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="cou_4514.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>count, count_if</H2>
<PRE><HR>Algorithm
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Count the number of elements in a container that satisfy a given condition.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;algorithm&gt;
template&lt;class InputIterator, class T&gt;
 typename iterator_traits&lt;InputIterator&gt;::difference_type
 count(InputIterator first, InputIterator last, 
       const T&amp; value);
template &lt;class InputIterator, class T, class Size&gt;
 void count(InputIterator first, InputIterator last,
            const T&amp; value, Size&amp; n);
template&lt;class InputIterator, class Predicate&gt;
 typename iterator_traits&lt;InputIterator&gt;::difference_type
 count_if(InputIterator first, InputIterator last, 
          Predicate pred);
template &lt;class InputIterator, class Predicate, class Size&gt;
 void count_if(InputIterator first, InputIterator last,
               Predicate pred, Size&amp; n);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>count</I></B> algorithm compares <SAMP>value</SAMP> to elements in the sequence defined by iterators <SAMP>first</SAMP> and <SAMP>last</SAMP>. The first version of <B><I>count</I></B> returns the number of matches. The second version increments a counting value <SAMP>n</SAMP> each time it finds a match. In other words, <B><I>count</I></B> returns (or adds to <SAMP>n</SAMP>) the number of iterators <SAMP>i</SAMP> in the range <SAMP>[first, last)</SAMP> for which the following condition holds:</P>
<P><SAMP>*i == value</SAMP></P>
<P>Type <SAMP>T</SAMP> must be EqualityComparable.</P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P>The <B><I>count_if</I></B> algorithm lets you specify a predicate, and returns the number of times an element in the sequence satisfies the predicate (or increments <SAMP>n</SAMP> that number of times). That is, <B><I>count_if</I></B> returns (or adds to <SAMP>n</SAMP>) the number of iterators <SAMP>i</SAMP> in the range <SAMP>[first, last)</SAMP> for which the following condition holds: </P>
<P><SAMP>pred(*i) == true.</SAMP></P>
<P>Both <B><I>count</I></B> and <B><I>count_if</I></B> perform exactly <SAMP>last-first</SAMP> applications of the corresponding predicate.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// count.cpp
// 
// Does not demonstrate the partial specialization versions 
// of count and count_if
//
 #include &lt;vector&gt;
 #include &lt;algorithm&gt;
 #include &lt;iostream&gt;
 using namespace std;

 int main()
 {
   int sequence[10] = {1,2,3,4,5,5,7,8,9,10};
   int i=0,j=0,k=0;
   //
   // Set up a vector
   //
   vector&lt;int&gt; v(sequence,sequence + 10);

   count(v.begin(),v.end(),5,i);  // Count fives 
   count(v.begin(),v.end(),6,j);  // Count sixes 
   //
   // Count all less than 8 
   // I=2, j=0
   //
   count_if(v.begin(),v.end(),bind2nd(less&lt;int&gt;(),8),k);
   // k = 7

   cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; k &lt;&lt; endl;
   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
2 0 7</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support partial specialization, then the first version of both <B><I>count</I></B> and <B><I>count_if</I></B> (the one that returns the count) is not available.</P>
<P>If your compiler does not support default template parameters, then you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you have to write:</P>
<P><SAMP>vector &lt;int, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector &lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>


<BR>
<HR>
<A HREF="cop_4514.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="cou_4514.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
