<HTML><HEAD><TITLE>equal_to</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="equ_3232.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="exc_9785.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>equal_to</H2>
<PRE><HR>Function Object
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Interface">Interface</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>A binary function object that returns <SAMP>true</SAMP> if its first argument equals its second.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;functional&gt;
template &lt;class T&gt;
struct <B>equal_to</B>;</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P><B><I>equal_to</I></B> is a binary function object. Its <SAMP>operator()</SAMP> returns <SAMP>true</SAMP> if <SAMP>x</SAMP> is equal to <SAMP>y</SAMP>. You can pass an <B><I>equal_to</I></B> object to any algorithm that requires a binary function. For example, the <B><I><A HREF="tra_4787.htm">transform</A></I></B> algorithm applies a binary operation to corresponding values in two collections and stores the result.   <B><I>equal_to</I></B> would be used in that algorithm in the following manner:</P>
<UL>
<PRE>vector&lt;int&gt; vec1;
vector&lt;int&gt; vec2;
vector&lt;int&gt; vecResult;
.
.
.
transform(vec1.begin(), vec1.end(),
          vec2.begin(), vecResult.begin(), 
          <B>equal_to</B>&lt;int&gt;());</PRE>

</UL>
<P>After this call to <B><I><A HREF="tra_4787.htm">transform</A></I></B>, <SAMP>vecResult(n)</SAMP> contains a <SAMP>1</SAMP> if <SAMP>vec1(n)</SAMP> was equal to <SAMP>vec2(n)</SAMP> or a <SAMP>0</SAMP> if <SAMP>vec1(n)</SAMP> was not equal to <SAMP>vec2(n)</SAMP>.</P>

<A NAME="Interface"><H3>Interface</H3></A>
<PRE>
<PRE>template &lt;class T&gt;
    struct <B>equal_to</B> : binary_function&lt;T, T, bool&gt; </PRE>

</PRE>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="bin_7851.htm">binary_function</A></I></B>, <B><I><A HREF="Fun_4316.htm">Function Objects</A></I></B></P>


<BR>
<HR>
<A HREF="equ_3232.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="exc_9785.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
