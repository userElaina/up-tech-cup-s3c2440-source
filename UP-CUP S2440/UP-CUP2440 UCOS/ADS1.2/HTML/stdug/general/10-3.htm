<HTML><HEAD><TITLE>10.3 The queue Data Abstraction</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="10-2.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="11.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>10.3 The queue Data Abstraction</H2>
<A NAME="idx189"><!></A>
<P>As a data abstraction, a <B><I><A HREF="../../stdref/que_0953.htm">queue</A></I></B> is traditionally defined as any object that implements the following operations given in <A HREF="#Table 17">Table 17</A>:</P>
<TABLE BORDER CELLPADDING=3 CELLSPACING=3>
<H4><A NAME="Table 17">Table 17 -- Queue operations</A></H4><tr><td valign=top><B>Function</B><td valign=top><B>Implemented operation</B>&nbsp;
<tr><td valign=top>
<SAMP>empty()</SAMP><BR>
<td valign=top>
Returns true if the collection is empty<BR>

<tr><td valign=top>
<SAMP>size()</SAMP><BR>
<td valign=top>
Returns number of elements in collection<BR>

<tr><td valign=top>
<SAMP>front()</SAMP><BR>
<td valign=top>
Returns (but does not remove) the element at the front of the queue <BR>

<tr><td valign=top>
<SAMP>back()</SAMP><BR>
<td valign=top>
Returns the element at the end of the queue <BR>

<tr><td valign=top>
<SAMP>push(newElement)</SAMP><BR>
<td valign=top>
Pushes a new element on to the end of the queue <BR>

<tr><td valign=top>
<SAMP>pop()</SAMP><BR>
<td valign=top>
Removes (but does not return) the element at the front of the queue<BR>


</TABLE>


</P>
<P>Note that the operations of accessing and of removing the front elements are performed separately. </P>

<A NAME="1031"><H3>10.3.1 Include Files</H3></A>
<A NAME="idx190"><!></A>
<P>Programs that use the <B><I><A HREF="../../stdref/que_0953.htm">queue</A></I></B> data abstraction should include the file <SAMP>queue</SAMP>:</P>
<UL>
<PRE>
# include &lt;queue&gt;</PRE>
</UL>

<A NAME="idx191"><!></A>
<A NAME="1032"><H3>10.3.2 Declaration and Initialization of queue</H3></A>
<A NAME="idx192"><!></A>
<P>A declaration for a <B><I><A HREF="../../stdref/que_0953.htm">queue</A></I></B> must specify the element type, and can also specify the container that will hold the values. For a <B><I>queue</I></B> the default container is a <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B>, but a list can also be used. The <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B> version is generally smaller, while the <B><I>deque</I></B> version may be slightly faster. The following are sample declarations for a <B><I>queue</I></B>:</P>
<UL>
<PRE>
queue&lt; int, list&lt;int&gt; &gt; queueOne;
queue&lt; double&gt; &gt; queueTwo;                      // uses a deque
queue&lt; Part *, list&lt;Part * &gt; &gt; queueThree;
queue&lt; Customer, list&lt;Customer&gt; &gt; queueFour;</PRE>
</UL>
<P>The last example creates a <B><I><A HREF="../../stdref/que_0953.htm">queue</A></I></B> of a user-defined type named <B><I>Customer</I></B>. As with the <B><I><A HREF="../../stdref/sta_9602.htm">stack</A></I></B> container, all objects stored in a <B><I>queue</I></B> must understand the operators <SAMP>&lt;</SAMP> and <SAMP>==</SAMP>.</P>
<P>Because the <B><I><A HREF="../../stdref/que_0953.htm">queue</A></I></B> does not implement an iterator, none of the generic algorithms described in <A HREF="IV.htm">Part IV</A> apply to <B><I>queue</I></B>s.</P>

<A NAME="idx193"><!></A>
<A NAME="1033"><H3>10.3.3 Example Program: Bank Teller Simulation</H3></A>
<BLOCKQUOTE><HR>
<B>NOTE: The complete version of the bank teller simulation program is in teller.cpp.
</B><HR></BLOCKQUOTE>
<A NAME="idx194"><!></A>
<P>Queues are often found in businesses, such as supermarkets or banks. Suppose you are the manager of a bank, and you need to determine how many tellers to have working during certain hours. You decide to create a computer simulation, basing your simulation on certain observed behavior. For example, you note that during peak hours there is a ninety percent chance that a customer will arrive every minute.</P>
<P>We create a simulation by first defining objects to represent both customers and tellers. For customers, the information we want to know is the average amount of time they spend waiting in line. Thus, customer objects simply maintain two integer data fields: the time they arrive in line, and the time they spend at the counter. The latter is a value randomly selected between 2 and 8. (See <A HREF="2-2.htm#225">Section 2.2.5</A> for a discussion of the <SAMP>randomInteger()</SAMP> function.)</P>
<UL>
<PRE>
class Customer {
public:
   Customer (int at = 0) : arrival_Time(at), 
         processTime(2 + randomInteger(6)) {}
   int arrival_Time;
   int processTime;
   
   bool done()      // are we done with our transaction? 
      { return --processTime &lt; 0; }
      
   operator &lt; (const Customer &amp; c)   // order by arrival time
      { return arrival_Time &lt; c.arrival_Time; }
      
   operator == (const Customer &amp; c)   // no two customers are alike
      { return false; }
};</PRE>
</UL>
<P>Because objects can only be stored in Standard C++ Library containers if they can be compared for equality and ordering, it is necessary to define the operators <SAMP>&lt;</SAMP> and <SAMP>==</SAMP> for customers. Customers can also tell us when they are done with their transactions.</P>
<P>Tellers are either busy servicing customers, or they are free. Thus, each teller value holds two data fields: a customer, and a boolean flag. Tellers define a member function to answer whether they are free or not, as well as a member function that is invoked when they start servicing a customer.</P>
<UL>
<PRE>
class Teller {
public:
   Teller() { free = true; }
   
   bool isFree()   // are we free to service new customer?
      { if (free) return true;
        if (customer.done())
           free = true;
        return free;
       }

   void addCustomer(Customer c)   // start serving new customer
      {   customer = c;
         free = false;
      }

private:
   bool free;
   Customer customer;
};</PRE>
</UL>
<P>The main program, then, is a large loop cycling once each simulated minute. The probability is 0.9 that each minute a new customer is entered into the queue of waiting customers. Each teller is polled, and if any are free they take the next customer from the queue. Counts are maintained of the number of customers serviced and the total time they spent in queue. From these two values we can determine, following the simulation, the average time a customer spent waiting in the line.</P>
<UL>
<PRE>
void main() {
   int numberOfTellers = 5;
   int numberOfMinutes = 60;
   double totalWait = 0;
   int numberOfCustomers = 0;
   vector&lt;Teller&gt; teller(numberOfTellers);
   queue&lt; Customer &gt; line;
   
   for (int time = 0; time &lt; numberOfMinutes; time++) {
      if (randomInteger(10) &lt; 9)
         line.push(Customer(time));
      for (int i = 0; i &lt; numberOfTellers; i++) {
         if (teller[i].isFree() &amp; ! line.empty()) {
            Customer &amp; frontCustomer = line.front();
            numberOfCustomers++;
            totalWait += (time - frontCustomer.arrival_Time);
            teller[i].addCustomer(frontCustomer);
            line.pop();
            }
         }
      }
   cout &lt;&lt; "average wait:" &lt;&lt;
          (totalWait / numberOfCustomers) &lt;&lt; endl;
}</PRE>
</UL>
<P>By executing the program several times, using various values for the number of tellers, the manager can determine the smallest number of tellers that can service the customers while maintaining the average waiting time at an acceptable level.</P>


<BR>
<HR>
<A HREF="10-2.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="11.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
