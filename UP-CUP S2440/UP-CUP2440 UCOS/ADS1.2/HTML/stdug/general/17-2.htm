<HTML><HEAD><TITLE>17.2 Using the Traits Technique</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="17-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="18.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>17.2 Using the Traits Technique</H2>
<P>To implement a traits parameter for a class, you add it as an extra template parameter to your class. You then supply a class for this parameter that encapsulates all the specific operations. Usually that class is itself a template.</P>
<P>As an example, let's look at the matrix problem described in <A HREF="17-1.htm">Section 17.1</A>. When you want to add a new type to the matrix, you can use the traits technique and simply specialize the traits class, not the entire matrix. You do no more work than you have to, and you retain the ability to use the matrix on any reasonable number.</P>
<A NAME="idx401"><!></A>
<P>Here's how the matrix traits template and specializations for <SAMP>long</SAMP> and <SAMP>int</SAMP> might look. The example also includes a skeleton of the matrix class that uses the traits template.</P>
<UL>
<PRE>
template &lt;class Num&gt;
class matrix_traits
{
  // traits functions and literals
};</PRE>
</UL>
<UL>
<PRE>template &lt;class Num, class traits&gt;
class matrix
{
  // matrix
}

class matrix_traits&lt;long&gt; 
{
  // traits functions and literals specific to long
};

class matrix_traits&lt;int&gt;
{
  // traits functions and literals specific to int
};

... etc.

matrix&lt;int, matrix_traits&lt;int&gt; &gt; int_matrix;
matrix&lt;long, matrix_traits&lt;long&gt; &gt; long_matrix;</PRE>
</UL>
<P>Of course you don't even have to specialize on <SAMP>matrix_traits</SAMP>.  You just have to make sure that you provide the interface that <SAMP>matrix</SAMP> expects from its traits template parameter. </P>
<A NAME="idx402"><!></A>
<P>Most of the time, the operations contained in a traits class are static functions so there's no need to actually instantiate a traits object.</P>
<A NAME="idx403"><!></A>
<P>The Standard Library uses this technique to give the <B><I><A HREF="../../stdref/str_8586.htm">string</A></I></B> class maximum flexibility and efficiency across a wide range of types. The <B><I><A HREF="../../stdref/cha_3696.htm">char_traits</A></I></B> traits class provides elementary operations on character arrays. In the simplest case, this means providing <B><I>string</I></B> a <SAMP>wstring</SAMP> with access to the C library functions for skinny and wide characters, for example <SAMP>Strcpy</SAMP> and <SAMP>wcstrcpy</SAMP>.</P>
<A NAME="idx404"><!></A>
<P>See the <B><I><A HREF="../../stdref/cha_3696.htm">char_traits</A></I></B> entry in the <I>Class Reference</I> for a complete description of the traits class.</P>


<BR>
<HR>
<A HREF="17-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="18.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
