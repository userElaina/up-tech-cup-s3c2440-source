<HTML><HEAD><TITLE>14.7 heap Operations</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="14-6.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="V.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>14.7 heap Operations</H2>
<A NAME="idx359"><!></A>
<P>A <I>heap</I> is a binary tree in which every node is larger than the values associated with either child. A heap and a binary tree, for that matter, can be very efficiently stored in a <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B>, by placing the children of node <SAMP>i</SAMP> in positions <SAMP>2 * i + 1</SAMP> and <br><SAMP>2 * i + 2</SAMP>.</P>
<P>Using this encoding, the largest value in the heap is always located in the initial position, and can therefore be very efficiently retrieved. In addition, efficient logarithmic algorithms exist that permit a new element to be added to a heap and the largest element removed from a heap. For these reasons, a heap is a natural representation for the <B><I>priority queue</I></B> datatype, described in <A HREF="11.htm">Chapter 11</A>.</P>
<P>The default operator is the less-than operator <SAMP>&lt;</SAMP> appropriate to the element type. If desired, an alternative operator can be specified. For example, by using the greater-than operator <SAMP>&gt;</SAMP>, one can construct a heap that locates the smallest element in the first location, instead of the largest.</P>
<A NAME="idx360"><!></A>
<P>The algorithm <SAMP>make_heap()</SAMP> takes a range, specified by random access <B><I><A HREF="../../stdref/ite_5554.htm">iterator</A></I></B>s, and converts it into a heap. The number of steps required is a linear function of the number of elements in the range.</P>
<UL>
<PRE>
void make_heap (RandomAccessIterator first, 
      RandomAccessIterator last [, Compare ]);</PRE>
</UL>
<A NAME="idx361"><!></A>
<P>To add a new element to a heap, insert it at the end of a range using the <SAMP>push_back()</SAMP> member function of a <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B> or <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B>, for example, and invoke the algorithm <SAMP>push_heap()</SAMP>. The <SAMP>push_heap()</SAMP> algorithm restores the heap property, performing at most a logarithmic number of operations.</P>
<UL>
<PRE>
void push_heap (RandomAccessIterator first, 
      RandomAccessIterator last [, Compare ]);</PRE>
</UL>
<A NAME="idx362"><!></A>
<P>The algorithm <SAMP>pop_heap()</SAMP> swaps the first and final elements in a range, and restores to a heap the collection without the final element. The largest value of the original collection is therefore still available as the last element in the range. It can be accessed using the <SAMP>back()</SAMP> member function in a <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B>, for example, and removed using the <SAMP>pop_back()</SAMP> member function. At the same time, the remainder of the collection continues to have the heap property. The <SAMP>pop_heap()</SAMP> algorithm performs at most a logarithmic number of operations.</P>
<UL>
<PRE>
void pop_heap (RandomAccessIterator first, 
      RandomAccessIterator last [, Compare ]);</PRE>
</UL>
<A NAME="idx363"><!></A>
<P>Finally, the algorithm <SAMP>sort_heap()</SAMP> converts a heap into an ordered or <I>sorted</I> collection. Note that a sorted collection is still a heap, although the reverse is not the case. </P>
<BLOCKQUOTE><HR>
<B>NOTE: An ordered collection is a heap, but a heap need not necessarily be an ordered collection. In fact, a heap can be constructed in a sequence much more quickly than the sequence can be sorted.
</B><HR></BLOCKQUOTE>
<P>The sort is performed using approximately <SAMP>n log n</SAMP> operations, where <SAMP>n</SAMP> represents the number of elements in the range. The <SAMP>sort_heap()</SAMP> algorithm is not stable.</P>
<UL>
<PRE>
void sort_heap (RandomAccessIterator first, 
      RandomAccessIterator last [, Compare ]);</PRE>
</UL>
<P>Here is an example program that illustrates the use of these functions:</P>
<UL>
<PRE>
void heap_example ()</PRE>
<A NAME="idx364"><!></A>
<PRE>   // illustrates the use of the heap algorithms
   // see alg7.cpp for complete source code

{
      // make a heap of 15 random integers
   vector&lt;int&gt; aVec(15);
   generate (aVec.begin(), aVec.end(), randomValue);
   make_heap (aVec.begin(), aVec.end());
   cout &lt;&lt; "Largest value " &lt;&lt; aVec.front() &lt;&lt; endl;

      // remove largest and reheap
   pop_heap (aVec.begin(), aVec.end());
   aVec.pop_back();

      // add a 97 to the heap
   aVec.push_back (97);
   push_heap (aVec.begin(), aVec.end());

      // finally, make into a sorted collection
   sort_heap (aVec.begin(), aVec.end());
}</PRE>
</UL>


<BR>
<HR>
<A HREF="14-6.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="V.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
