<HTML><HEAD><TITLE>reverse_copy</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="rev_9443.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="rev_1561.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>reverse_copy</H2>
<PRE><HR>Algorithm
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Reverses the order of elements in a collection while copying them to a new collection.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;algorithm&gt;
template &lt;class BidirectionalIterator, class OutputIterator&gt;
OutputIterator <B>reverse_copy</B> (BidirectionalIterator first,
                             BidirectionalIterator last,
                             OutputIterator result);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>reverse_copy</I></B> algorithm copies the range <SAMP>[first, last)</SAMP> to the range <SAMP>[result, result + (last - first))</SAMP> such that for any non- negative integer <SAMP>i &lt; (last - first)</SAMP>, the following assignment takes place:</P>
<P><SAMP>*(result + (last - first) -i) = *(first + i)</SAMP></P>
<P><B><I>reverse_copy</I></B> returns <SAMP>result + (last - first)</SAMP>. The ranges <SAMP>[first, last)</SAMP> and <SAMP>[result, result + (last - first))</SAMP> must not overlap. </P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P><B><I>reverse_copy</I></B> performs exactly <SAMP>(last - first)</SAMP> assignments.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// reverse.cpp
//
 #include &lt;algorithm&gt;
 #include &lt;vector&gt;
 #include &lt;iostream&gt;
 using namespace std;

 int main ()
 {
   //
   // Initialize a vector with an array of integers.
   //
   int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
   vector&lt;int&gt; v(arr+0, arr+10);
   //
   // Print out elements in original (sorted) order.
   //
   cout &lt;&lt; "Elements before reverse: " &lt;&lt; endl &lt;&lt; "     ";
   copy(v.begin(), v.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl &lt;&lt; endl;
   //
   // Reverse the ordering.
   //
   reverse(v.begin(), v.end());
   //
   // Print out the reversed elements.
   //
   cout &lt;&lt; "Elements after reverse: " &lt;&lt; endl &lt;&lt; "     ";
   copy(v.begin(), v.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl &lt;&lt; endl;

   cout &lt;&lt; "A reverse_copy to cout: " &lt;&lt; endl &lt;&lt; "     ";
   <B>reverse_copy</B>(v.begin(), v.end(), <br>                ostream_iterator&lt;int,char&gt;(cout, " "));
   cout &lt;&lt; endl;

   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
Elements before reverse:
     1 2 3 4 5 6 7 8 9 10
Elements after reverse:
     10 9 8 7 6 5 4 3 2 1
A reverse_copy to cout:
     1 2 3 4 5 6 7 8 9 10</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, then you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you need to write:</P>
<P><SAMP>vector&lt;int, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="rev_6652.htm">reverse</A></I></B></P>


<BR>
<HR>
<A HREF="rev_9443.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="rev_1561.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
