<HTML><TITLE>Topic Index</TITLE><BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=O></A><H2>Topic Index</H2>
<P>Click on one of the letters below to jump immediately to that section of the index. If you get no response, that letter has no entries.</P>
<PRE><a href="#a">A</a>  <a href="#b">B</a>  <a href="#c">C</a>  <a href="#d">D</a>  <a href="#e">E</a>  <a href="#f">F</a>  <a href="#g">G</a>  <a href="#h">H</a>  <a href="#i">I</a>  <a href="#j">J</a>  <a href="#k">K</a>  <a href="#l">L</a>  <a href="#m">M</a>  <a href="#n">N</a>  <a href="#o">O</a>  <a href="#p">P</a><br><br><a href="#q">Q</a>  <a href="#r">R</a>  <a href="#s">S</a>  <a href="#t">T</a>  <a href="#u">U</a>  <a href="#v">V</a>  <a href="#w">W</a>  <a href="#x">X</a>  <a href="#y">Y</a>  <a href="#z">Z</a>
</PRE>
<A NAME="a"><H3>a</H3></A>
<DL>
<BR>abs() [in <A HREF="20-2.htm#idx425">20.2.6 Norm and Absolute Value</A>]
<BR>accumulate() [in <A HREF="13-6.htm#idx320">13.6.2 Reduce Sequence to a Single Value</A>]
<BR>adaptors
<UL>[in <A HREF="16-2.htm#idx386">16.2.2 Generic Inheritance</A>]</UL>
<UL>function [in <A HREF="3-5.htm#idx53">3.5 Negators and Binders</A>]</UL>
<UL>priority queue [in <A HREF="11-2.htm#idx204">11.2.1 Declaration and Initialization of priority queue</A>]</UL>
<UL>queue [in <A HREF="10-3.htm#idx191">10.3.1 Include Files</A>]</UL>
<UL>stack [in <A HREF="10-1.htm#idx178">10.1 Overview</A>]</UL>
<BR>adjacent difference
<UL>defined [in <A HREF="13-7.htm#idx335">13.7.3 Adjacent Differences</A>]</UL>
<BR>adjacent_difference() [in <A HREF="13-7.htm#idx335">13.7.3 Adjacent Differences</A>]
<BR>adjacent_find() [in <A HREF="13-3.htm#idx274">13.3.2 Find Consecutive Duplicate Elements</A>]
<BR>advance() [in <A HREF="2-5.htm#idx38">2.5 Iterator Operations</A>]
<BR>advance
<UL>primitive [in <A HREF="16-4.htm#idx399">16.4.2 The distance and advance Primitives</A>]</UL>
<BR>algorithms
<UL>binary search [in <A HREF="14-4.htm#idx349">14.4 Binary Search</A>]</UL>
<UL>building techniques [in <A HREF="16-4.htm#idx393">16.4 Tips and Techniques for Building Algorithms</A>]</UL>
<UL>categories [in <A HREF="16-1.htm#idx380">16.1 Extending the Library</A>]</UL>
<UL>defined [in <A HREF="1-4.htm#idx7">1.4.2 Conventions</A>]</UL>
<UL>for_each [in <A HREF="13-8.htm#idx337">13.8 The for_each Algorithm</A>]</UL>
<UL>generic [in <A HREF="13-1.htm#idx234">13.1 Overview</A>]</UL>
<UL>heap [in <A HREF="14-7.htm#idx359">14.7 heap Operations</A>]</UL>
<UL>in-place transformations [in <A HREF="13-1.htm#idx237">13.1 Overview</A>]</UL>
<UL>initialization [in <A HREF="13-2.htm#idx244">13.2 Initialization Algorithms</A>]</UL>
<UL>initializing a sequence [in <A HREF="13-1.htm#idx235">13.1 Overview</A>]</UL>
<UL>merge ordered sequences [in <A HREF="14-5.htm#idx353">14.5 Merge Ordered Sequences</A>]</UL>
<UL>miscellaneous [in <A HREF="13-1.htm#idx241">13.1 Overview</A>]</UL>
<UL>nth element [in <A HREF="14-3.htm#idx347">14.3 nth Element</A>]</UL>
<UL>ordered collection [in <A HREF="14-1.htm#idx338">14.1 Overview</A>]</UL>
<UL>removal [in <A HREF="13-1.htm#idx238">13.1 Overview</A>]</UL>
<UL><UL>[in <A HREF="13-5.htm#idx311">13.5 Removal Algorithms</A>]</UL></UL>
<UL>scalar-producing [in <A HREF="13-1.htm#idx239">13.1 Overview</A>]</UL>
<UL><UL>[in <A HREF="13-6.htm#idx317">13.6 Scalar-Producing Algorithms</A>]</UL></UL>
<UL>searching [in <A HREF="13-1.htm#idx236">13.1 Overview</A>]</UL>
<UL>sequence-generating [in <A HREF="13-1.htm#idx240">13.1 Overview</A>]</UL>
<UL><UL>[in <A HREF="13-7.htm#idx330">13.7 Sequence-Generating Algorithms</A>]</UL></UL>
<UL>set operations [in <A HREF="14-6.htm#idx356">14.6 set Operations</A>]</UL>
<UL>sorting [in <A HREF="14-2.htm#idx341">14.2 Sorting Algorithms</A>]</UL>
<UL>tips and techniques [in <A HREF="16-4.htm#idx393">16.4 Tips and Techniques for Building Algorithms</A>]</UL>
<UL>user-defined [in <A HREF="16-1.htm#idx378">16.1 Extending the Library</A>]</UL>
<BR>allocator interface requirements [in <A HREF="16-3.htm#idx391">16.3.2 Meeting the Allocator Interface Requirements</A>]
<BR>allocator interface
<UL>defined [in <A HREF="15-1.htm#idx365">15.1 An Overview</A>]</UL>
<BR>allocator&lt;T&gt; [in <A HREF="15-2.htm#idx369">15.2 Using Allocators with Existing Standard Library Containers</A>]
<BR>Allocator() [in <A HREF="15-2.htm#idx369">15.2 Using Allocators with Existing Standard Library Containers</A>]
<BR>allocators
<UL>alternative interface [in <A HREF="15-3.htm#idx374">15.3.2 Using Rogue Wave's Alternative Interface</A>]</UL>
<UL><UL>[in <A HREF="15-3.htm#idx376">15.3.3 How to Support Both Interfaces</A>]</UL></UL>
<UL>conforming [in <A HREF="15-3.htm#idx371">15.3.1 Using the Standard Allocator Interface</A>]</UL>
<UL>defined [in <A HREF="15-1.htm#idx365">15.1 An Overview</A>]</UL>
<UL>defining your own [in <A HREF="15-3.htm#idx370">15.3 Building Your Own Allocators</A>]</UL>
<UL>required member functions [in <A HREF="15-3.htm#idx372">15.3.1 Using the Standard Allocator Interface</A>]</UL>
<UL>required non-member functions [in <A HREF="15-3.htm#idx373">15.3.1 Using the Standard Allocator Interface</A>]</UL>
<UL>standard interface [in <A HREF="15-3.htm#idx376">15.3.3 How to Support Both Interfaces</A>]</UL>
<UL>supporting both interfaces [in <A HREF="15-3.htm#idx376">15.3.3 How to Support Both Interfaces</A>]</UL>
<UL>with existing containers [in <A HREF="15-2.htm#idx368">15.2 Using Allocators with Existing Standard Library Containers</A>]</UL>
<BR>allocator_interface [in <A HREF="15-3.htm#idx375">15.3.2 Using Rogue Wave's Alternative Interface</A>]
<BR>any() [in <A HREF="8-4.htm#idx148">8.4.3 Accessing and Testing Elements</A>]
<BR>append() [in <A HREF="12-2.htm#idx220">12.2.3 Assignment, Append, and Swap</A>]
<BR>arg() [in <A HREF="20-2.htm#idx426">20.2.6 Norm and Absolute Value</A>]
<BR>assign()
<UL>[in <A HREF="12-2.htm#idx220">12.2.3 Assignment, Append, and Swap</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx72">5.2.1 Declaration and Initialization of vectors</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx101">6.2.1 Declaration and Initialization of lists</A>]</UL>
<BR>associative container [in <A HREF="16-1.htm#idx379">16.1 Extending the Library</A>]
<BR>at()
<UL>[in <A HREF="12-2.htm#idx222">12.2.4 Character Access</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx76">5.2.3 Subscripting a vector</A>]</UL>
<BR>auto_ptr class
<UL>[in <A HREF="19-1.htm#idx414">19.1 Overview</A>]</UL>
<UL>declaring and initializing [in <A HREF="19-2.htm#idx416">19.2 Declaration and Initialization of Autopointers</A>]</UL>
<UL>include file [in <A HREF="19-1.htm#idx415">19.1.1 Include File</A>]</UL>
</DL>
<A NAME="b"><H3>b</H3></A>
<DL><BR>back()
<UL>[in <A HREF="5-2.htm#idx77">5.2.3 Subscripting a vector</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx113">6.2.6 Access and Iteration</A>]</UL>
<BR>back_inserter() [in <A HREF="2-4.htm#idx36">2.4 Insert Iterators</A>]
<BR>basic_string [in <A HREF="12-1.htm#idx212">12.1 The string Abstraction</A>]
<BR>begin()
<UL>[in <A HREF="2-2.htm#idx23">2.2.1.1 Kinds of Input Iterators</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx87">5.2.6 Iteration</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx135">8.2.6 Iterators</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx166">9.2.5 Iterators</A>]</UL>
<BR>bidirectional iterators
<UL>[in <A HREF="2-2.htm#idx14">2.2 Varieties of Iterators</A>]</UL>
<UL>[in <A HREF="2-2.htm#idx18">2.2 Varieties of Iterators</A>]</UL>
<UL>[in <A HREF="2-2.htm#idx27">2.2.4 Bidirectional Iterators</A>]</UL>
<BR>binary search algorithms [in <A HREF="14-4.htm#idx349">14.4 Binary Search</A>]
<BR>binary search tree [in <A HREF="4-4.htm#idx62">4.4 Container Types Not Found in the Standard Library</A>]
<BR>binary_function
<UL>[in <A HREF="3-3.htm#idx46">3.3.2.1 To Employ Existing Standard Library Function Objects</A>]</UL>
<UL>[in <A HREF="6-3.htm#idx116">6.3 Example Program - An Inventory System</A>]</UL>
<BR>binary_search() [in <A HREF="14-4.htm#idx350">14.4 Binary Search</A>]
<BR>binders
<UL>defined [in <A HREF="3-5.htm#idx52">3.5 Negators and Binders</A>]</UL>
<BR>bit-wise operators [in <A HREF="8-4.htm#idx145">8.4 The bitset Abstraction</A>]
<BR>bitset
<UL>accessing and testing elements [in <A HREF="8-4.htm#idx148">8.4.3 Accessing and Testing Elements</A>]</UL>
<UL>declaring and initializing [in <A HREF="8-4.htm#idx147">8.4.2 Declaration and Initialization of bitset</A>]</UL>
<UL>defined [in <A HREF="8-4.htm#idx145">8.4 The bitset Abstraction</A>]</UL>
<UL>include file [in <A HREF="8-4.htm#idx146">8.4.1 Include Files</A>]</UL>
<BR>bitsets
<UL>conversions on [in <A HREF="8-4.htm#idx154">8.4.5 Conversions</A>]</UL>
<UL>intersection operator [in <A HREF="8-4.htm#idx152">8.4.4 set Operations</A>]</UL>
<UL>negation operator [in <A HREF="8-4.htm#idx151">8.4.4 set Operations</A>]</UL>
<UL>set operations on [in <A HREF="8-4.htm#idx150">8.4.4 set Operations</A>]</UL>
<UL>shift operators [in <A HREF="8-4.htm#idx153">8.4.4 set Operations</A>]</UL>
<BR>boolean vectors [in <A HREF="5-3.htm#idx92">5.3 Boolean Vectors</A>]
</DL>
<A NAME="c"><H3>c</H3></A>
<DL><BR>capacity()
<UL>[in <A HREF="12-2.htm#idx215">12.2.2 Resetting Size and Capacity</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx79">5.2.4 Extent and Size-Changing Operations</A>]</UL>
<BR>catenation [in <A HREF="13-2.htm#idx253">13.2.2 Copy One Sequence Into Another Sequence</A>]
<BR>code reuse
<UL>composition [in <A HREF="16-2.htm#idx387">16.2.3 Generic Composition</A>]</UL>
<UL>generic inheritance [in <A HREF="16-2.htm#idx386">16.2.2 Generic Inheritance</A>]</UL>
<UL>inheritance [in <A HREF="16-2.htm#idx383">16.2 Building on the Standard Containers</A>]</UL>
<UL>ways to achieve [in <A HREF="16-2.htm#idx382">16.2 Building on the Standard Containers</A>]</UL>
<BR>compare() [in <A HREF="12-2.htm#idx229">12.2.8 string Comparisons</A>]
<BR>complex class
<UL>[in <A HREF="20-1.htm#idx417">20.1 Overview</A>]</UL>
<UL>header file [in <A HREF="20-1.htm#idx418">20.1.1 Include Files</A>]</UL>
<BR>complex conjugate [in <A HREF="20-2.htm#idx421">20.2.1 Declaring Complex Numbers</A>]
<BR>complex numbers
<UL>[in <A HREF="20-1.htm#idx417">20.1 Overview</A>]</UL>
<UL>accessing [in <A HREF="20-2.htm#idx422">20.2.2 Accessing Complex Number Values</A>]</UL>
<UL>comparing [in <A HREF="20-2.htm#idx423">20.2.4 Comparing Complex Values</A>]</UL>
<UL>declaring [in <A HREF="20-2.htm#idx419">20.2.1 Declaring Complex Numbers</A>]</UL>
<UL>norm and absolute value [in <A HREF="20-2.htm#idx425">20.2.6 Norm and Absolute Value</A>]</UL>
<UL>transcendental functions [in <A HREF="20-2.htm#idx428">20.2.8 Transcendental Functions</A>]</UL>
<UL>trigonometric functions [in <A HREF="20-2.htm#idx427">20.2.7 Trigonometric Functions</A>]</UL>
<UL>with streams [in <A HREF="20-2.htm#idx424">20.2.5 Stream Input and Output</A>]</UL>
<BR>concordance [in <A HREF="9-3.htm#idx175">9.3.3 Example - A Concordance</A>]
<BR>conj() [in <A HREF="20-2.htm#idx421">20.2.1 Declaring Complex Numbers</A>]
<BR>conjugate
<UL>complex [in <A HREF="20-2.htm#idx421">20.2.1 Declaring Complex Numbers</A>]</UL>
<BR>constant iterators [in <A HREF="2-2.htm#idx15">2.2 Varieties of Iterators</A>]
<BR>container adaptors [in <A HREF="4-1.htm#idx56">4.1 Overview</A>]
<BR>container iterators [in <A HREF="2-2.htm#idx23">2.2.1.1 Kinds of Input Iterators</A>]
<BR>containers
<UL>bitset [in <A HREF="8-4.htm#idx145">8.4 The bitset Abstraction</A>]</UL>
<UL>building from scratch [in <A HREF="16-3.htm#idx389">16.3 Creating Your Own Containers</A>]</UL>
<UL>characteristics of [in <A HREF="4-1.htm#idx55">4.1 Overview</A>]</UL>
<UL>creating your own [in <A HREF="16-2.htm#idx381">16.2 Building on the Standard Containers</A>]</UL>
<UL><UL>[in <A HREF="16-3.htm#idx388">16.3 Creating Your Own Containers</A>]</UL></UL>
<UL>deque [in <A HREF="7-1.htm#idx117">7.1 The deque Data Abstraction</A>]</UL>
<UL>design requirements [in <A HREF="16-3.htm#idx388">16.3 Creating Your Own Containers</A>]</UL>
<UL>designing your own [in <A HREF="16-3.htm#idx392">16.3.3 Iterator Requirements</A>]</UL>
<UL>designing [in <A HREF="15-1.htm#idx367">15.1 An Overview</A>]</UL>
<UL>how to select [in <A HREF="4-2.htm#idx57">4.2 Selecting a Container</A>]</UL>
<UL>in the Standard C++ Library [in <A HREF="4-1.htm#idx55">4.1 Overview</A>]</UL>
<UL>iterator requirements [in <A HREF="16-3.htm#idx392">16.3.3 Iterator Requirements</A>]</UL>
<UL>list [in <A HREF="6-1.htm#idx95">6.1 The list Data Abstraction</A>]</UL>
<UL>map [in <A HREF="9-1.htm#idx156">9.1 The map Data Abstraction</A>]</UL>
<UL>multimap [in <A HREF="9-1.htm#idx157">9.1 The map Data Abstraction</A>]</UL>
<UL>multiset [in <A HREF="8-1.htm#idx123">8.1 The set Data Abstraction</A>]</UL>
<UL>not in the Standard C++ Library [in <A HREF="4-4.htm#idx60">4.4 Container Types Not Found in the Standard Library</A>]</UL>
<UL>priority queue [in <A HREF="11-1.htm#idx195">11.1 The priority queue Data Abstraction</A>]</UL>
<UL>queue [in <A HREF="10-3.htm#idx189">10.3 The queue Data Abstraction</A>]</UL>
<UL>set [in <A HREF="8-1.htm#idx121">8.1 The set Data Abstraction</A>]</UL>
<UL>stack [in <A HREF="10-2.htm#idx179">10.2 The stack Data Abstraction</A>]</UL>
<UL>user-defined [in <A HREF="16-1.htm#idx378">16.1 Extending the Library</A>]</UL>
<UL><UL>[in <A HREF="16-3.htm#idx391">16.3.2 Meeting the Allocator Interface Requirements</A>]</UL></UL>
<UL>vector [in <A HREF="5-1.htm#idx68">5.1 The vector Data Abstraction</A>]</UL>
<UL>vector&lt;bool&gt; [in <A HREF="5-3.htm#idx92">5.3 Boolean Vectors</A>]</UL>
<BR>conventions [in <A HREF="1-4.htm#idx6">1.4.2 Conventions</A>]
<BR>copy constructor [in <A HREF="5-2.htm#idx71">5.2.1 Declaration and Initialization of vectors</A>]
<BR>copy()
<UL>[in <A HREF="12-2.htm#idx226">12.2.7 Copy and Substring</A>]</UL>
<UL>[in <A HREF="13-2.htm#idx252">13.2.2 Copy One Sequence Into Another Sequence</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx100">6.2.1 Declaration and Initialization of lists</A>]</UL>
<BR>copy_backward() [in <A HREF="13-2.htm#idx252">13.2.2 Copy One Sequence Into Another Sequence</A>]
<BR>count()
<UL>[in <A HREF="13-6.htm#idx318">13.6.1 Count the Number of Elements That Satisfy a Condition</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx134">8.2.5 Searching and Counting</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx170">9.2.6 Searching and Counting</A>]</UL>
<BR>count_if() [in <A HREF="13-6.htm#idx318">13.6.1 Count the Number of Elements That Satisfy a Condition</A>]
<BR>Curry, Haskell P. [in <A HREF="3-5.htm#idx54">3.5 Negators and Binders</A>]
<BR>c_str() [in <A HREF="12-2.htm#idx223">12.2.4 Character Access</A>]
</DL>
<A NAME="d"><H3>d</H3></A>
<DL><BR>data() [in <A HREF="12-2.htm#idx223">12.2.4 Character Access</A>]
<BR>datatypes
<UL>fundamental [in <A HREF="21-2.htm#idx433">21.2 Fundamental Datatypes</A>]</UL>
<BR>deep copy [in <A HREF="4-3.htm#idx58">4.3 Memory Management Issues</A>]
<BR>deque
<UL>declaring [in <A HREF="7-2.htm#idx119">7.2 deque Operations</A>]</UL>
<UL>defined [in <A HREF="7-1.htm#idx117">7.1 The deque Data Abstraction</A>]</UL>
<UL>example [in <A HREF="7-3.htm#idx120">7.3 Example Program - Radix Sort</A>]</UL>
<UL>include file [in <A HREF="7-1.htm#idx118">7.1.1 Include Files</A>]</UL>
<UL>operations for [in <A HREF="7-2.htm#idx119">7.2 deque Operations</A>]</UL>
<BR>designing your own containers
<UL>[in <A HREF="16-2.htm#idx381">16.2 Building on the Standard Containers</A>]</UL>
<UL>allocator interface requirements [in <A HREF="16-3.htm#idx391">16.3.2 Meeting the Allocator Interface Requirements</A>]</UL>
<UL>container requirements [in <A HREF="16-3.htm#idx390">16.3.1 Meeting the Container Requirements</A>]</UL>
<UL>design requirements [in <A HREF="16-3.htm#idx388">16.3 Creating Your Own Containers</A>]</UL>
<UL>iterators [in <A HREF="16-3.htm#idx392">16.3.3 Iterator Requirements</A>]</UL>
<BR>distance() [in <A HREF="2-5.htm#idx39">2.5 Iterator Operations</A>]
<BR>distance
<UL>primitive [in <A HREF="16-4.htm#idx398">16.4.2 The distance and advance Primitives</A>]</UL>
<BR>distance_type [in <A HREF="16-4.htm#idx397">16.4.2 The distance and advance Primitives</A>]
<BR>documentation [in <A HREF="1-3.htm#idx5">1.3 Documentation Overview</A>]
</DL>
<A NAME="e"><H3>e</H3></A>
<DL><BR>empty()
<UL>[in <A HREF="10-2.htm#idx180">10.2 The stack Data Abstraction</A>]</UL>
<UL>[in <A HREF="11-2.htm#idx203">11.2 The priority queue Operations</A>]</UL>
<UL>[in <A HREF="12-2.htm#idx217">12.2.2 Resetting Size and Capacity</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx81">5.2.4 Extent and Size-Changing Operations</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx111">6.2.5 Extent and Size-Changing Operations</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx131">8.2.5 Searching and Counting</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx167">9.2.6 Searching and Counting</A>]</UL>
<BR>end()
<UL>[in <A HREF="2-2.htm#idx23">2.2.1.1 Kinds of Input Iterators</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx87">5.2.6 Iteration</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx135">8.2.6 Iterators</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx166">9.2.5 Iterators</A>]</UL>
<BR>equal()
<UL>[in <A HREF="13-3.htm#idx285">13.3.7 Locate the First Mismatched Elements in Parallel Sequences</A>]</UL>
<UL>[in <A HREF="13-6.htm#idx325">13.6.4 Test Two Sequences for Pairwise Equality</A>]</UL>
<BR>equal_range()
<UL>[in <A HREF="14-4.htm#idx351">14.4 Binary Search</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx133">8.2.5 Searching and Counting</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx169">9.2.6 Searching and Counting</A>]</UL>
<BR>erase()
<UL>[in <A HREF="12-2.htm#idx225">12.2.6 Insertion, Removal, and Replacement</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx108">6.2.4 Removing Elements</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx130">8.2.4 Removal of Elements from a set</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx165">9.2.4 Removal of Values</A>]</UL>
<BR>Eratosthenes [in <A HREF="5-4.htm#idx94">5.4 Example Program - The Sieve of Eratosthenes</A>]
<BR>error model [in <A HREF="18-2.htm#idx409">18.2 The Standard Exception Hierarchy</A>]
<BR>event-driven simulation [in <A HREF="11-3.htm#idx206">11.3 Example Program - Event-Driven Simulation</A>]
<BR>example program
<UL>[in <A HREF="9-3.htm#idx175">9.3.3 Example - A Concordance</A>]</UL>
<UL>bank teller simulation [in <A HREF="10-3.htm#idx193">10.3.2 Declaration and Initialization of queue</A>]</UL>
<UL>event-driven simulation [in <A HREF="11-3.htm#idx206">11.3 Example Program - Event-Driven Simulation</A>]</UL>
<UL>graphs [in <A HREF="9-3.htm#idx173">9.3.2 An Example - Graphs</A>]</UL>
<UL>ice cream store simulation [in <A HREF="11-3.htm#idx208">11.3 Example Program - Event-Driven Simulation</A>]</UL>
<UL>input iterators [in <A HREF="2-2.htm#idx20">2.2.1 Input Iterators</A>]</UL>
<UL>inventory system [in <A HREF="6-3.htm#idx115">6.3 Example Program - An Inventory System</A>]</UL>
<UL>radix sort [in <A HREF="7-3.htm#idx120">7.3 Example Program - Radix Sort</A>]</UL>
<UL>reversing elements in a sequence [in <A HREF="13-4.htm#idx289">13.4.1 Reverse Elements in a Sequence</A>]</UL>
<UL>roots of a polynomial [in <A HREF="20-3.htm#idx430">20.3 Example Program - Roots of a Polynomial</A>]</UL>
<UL>RPN calculator [in <A HREF="10-2.htm#idx187">10.2.2 Declaration and Initialization of stack</A>]</UL>
<UL>sieve of Eratosthenes [in <A HREF="5-4.htm#idx94">5.4 Example Program - The Sieve of Eratosthenes</A>]</UL>
<UL>spelling checker [in <A HREF="8-3.htm#idx144">8.3 Example Program - A Spelling Checker</A>]</UL>
<UL>telephone database [in <A HREF="9-3.htm#idx172">9.3.1 Example - A Telephone Database</A>]</UL>
<BR>example programs
<UL>location of [in <A HREF="13-1.htm#idx242">13.1 Overview</A>]</UL>
<BR>example
<UL>a simple copy [in <A HREF="13-2.htm#idx256">13.2.2 Copy One Sequence Into Another Sequence</A>]</UL>
<UL>adjacent_find instruction [in <A HREF="13-3.htm#idx275">13.3.2 Find Consecutive Duplicate Elements</A>]</UL>
<UL>algorithm swap_ranges [in <A HREF="13-2.htm#idx270">13.2.4 Swap Values from Two Parallel Ranges</A>]</UL>
<UL>copy algorithm [in <A HREF="13-2.htm#idx254">13.2.2 Copy One Sequence Into Another Sequence</A>]</UL>
<UL>copy to output [in <A HREF="13-2.htm#idx258">13.2.2 Copy One Sequence Into Another Sequence</A>]</UL>
<UL>exceptions [in <A HREF="18-4.htm#idx413">18.4 Example Program - Exceptions</A>]</UL>
<UL>fill an array with initial values [in <A HREF="13-2.htm#idx247">13.2.1 Fill a Sequence with An Initial Value</A>]</UL>
<UL>fill in a portion of a collection [in <A HREF="13-2.htm#idx250">13.2.1 Fill a Sequence with An Initial Value</A>]</UL>
<UL>fill() [in <A HREF="13-2.htm#idx246">13.2.1 Fill a Sequence with An Initial Value</A>]</UL>
<UL>find algorithm [in <A HREF="13-3.htm#idx273">13.3.1 Find an Element Satisfying a Condition</A>]</UL>
<UL>finding max and min elements [in <A HREF="13-3.htm#idx284">13.3.6 Locate Maximum or Minimum Element</A>]</UL>
<UL>find_end algorithm [in <A HREF="13-3.htm#idx281">13.3.5 Find the Last Occurrence of a Sub-Sequence </A>]</UL>
<UL>generate a list of label values [in <A HREF="13-2.htm#idx264">13.2.3 Initialize a Sequence with Generated Values</A>]</UL>
<UL>generate algorithm [in <A HREF="13-2.htm#idx263">13.2.3 Initialize a Sequence with Generated Values</A>]</UL>
<UL>generate an arithmetic progression [in <A HREF="13-2.htm#idx265">13.2.3 Initialize a Sequence with Generated Values</A>]</UL>
<UL>mismatch algorithm [in <A HREF="13-3.htm#idx286">13.3.7 Locate the First Mismatched Elements in Parallel Sequences</A>]</UL>
<UL>next_permutation algorithm [in <A HREF="13-4.htm#idx303">13.4.5 Generate Permutations in Sequence</A>]</UL>
<UL>permute characters backwards [in <A HREF="13-4.htm#idx306">13.4.5 Generate Permutations in Sequence</A>]</UL>
<UL>permute the values 1 2 3 [in <A HREF="13-4.htm#idx304">13.4.5 Generate Permutations in Sequence</A>]</UL>
<UL>permute words [in <A HREF="13-4.htm#idx305">13.4.5 Generate Permutations in Sequence</A>]</UL>
<UL>self copies [in <A HREF="13-2.htm#idx257">13.2.2 Copy One Sequence Into Another Sequence</A>]</UL>
<UL>split a line into words [in <A HREF="12-3.htm#idx233">12.3  Example Function - Split a Line into Words</A>]</UL>
<UL>traits template [in <A HREF="17-2.htm#idx401">17.2 Using the Traits Technique</A>]</UL>
<UL>use fill to initialize a list [in <A HREF="13-2.htm#idx248">13.2.1 Fill a Sequence with An Initial Value</A>]</UL>
<UL>use fill to overwrite values in list [in <A HREF="13-2.htm#idx249">13.2.1 Fill a Sequence with An Initial Value</A>]</UL>
<UL>using copy to convert type [in <A HREF="13-2.htm#idx259">13.2.2 Copy One Sequence Into Another Sequence</A>]</UL>
<UL>using generic set algorithms [in <A HREF="14-6.htm#idx358">14.6 set Operations</A>]</UL>
<UL>using the accumulate algorithm [in <A HREF="13-6.htm#idx321">13.6.2 Reduce Sequence to a Single Value</A>]</UL>
<UL>using the adjacent difference algorithm [in <A HREF="13-7.htm#idx336">13.7.3 Adjacent Differences</A>]</UL>
<UL>using the binary search algorithm [in <A HREF="14-4.htm#idx352">14.4 Binary Search</A>]</UL>
<UL>using the copy algorithm [in <A HREF="13-2.htm#idx255">13.2.2 Copy One Sequence Into Another Sequence</A>]</UL>
<UL>using the count algorithm [in <A HREF="13-6.htm#idx319">13.6.1 Count the Number of Elements That Satisfy a Condition</A>]</UL>
<UL>using the equal algorithm [in <A HREF="13-6.htm#idx326">13.6.4 Test Two Sequences for Pairwise Equality</A>]</UL>
<UL>using the find algorithm [in <A HREF="13-3.htm#idx277">13.3.3 Find the First Occurrence of Any Value from a Sequence</A>]</UL>
<UL>using the heap algorithms [in <A HREF="14-7.htm#idx364">14.7 heap Operations</A>]</UL>
<UL>using the inner_product algorithm [in <A HREF="13-6.htm#idx324">13.6.3 Generalized Inner Product</A>]</UL>
<UL>using the inplace_merge algorithm [in <A HREF="13-4.htm#idx308">13.4.6 Merge Two Adjacent Sequences into One</A>]</UL>
<UL>using the lexicographical_compare algorithm [in <A HREF="13-6.htm#idx329">13.6.5 Lexical Comparison </A>]</UL>
<UL>using the merge algorithm [in <A HREF="14-5.htm#idx354">14.5 Merge Ordered Sequences</A>]</UL>
<UL>using the next_permutation algorithm [in <A HREF="13-4.htm#idx303">13.4.5 Generate Permutations in Sequence</A>]</UL>
<UL>using the nth_element algorithm [in <A HREF="14-3.htm#idx348">14.3 nth Element</A>]</UL>
<UL>using the partial sort algorithm [in <A HREF="14-2.htm#idx346">14.2.1 Partial Sort</A>]</UL>
<UL>using the partial sum algorithm [in <A HREF="13-7.htm#idx334">13.7.2 Partial Sums</A>]</UL>
<UL>using the partition algorithm [in <A HREF="13-4.htm#idx299">13.4.4 Partition a Sequence into Two Groups</A>]</UL>
<UL>using the random_shuffle algorithm [in <A HREF="13-4.htm#idx310">13.4.7 Randomly Rearrange Elements in a Sequence</A>]</UL>
<UL>using the remove algorithm [in <A HREF="13-5.htm#idx313">13.5.1 Remove Unwanted Elements</A>]</UL>
<UL>using the replace algorithm [in <A HREF="13-4.htm#idx293">13.4.2 Replace Certain Elements With Fixed Value</A>]</UL>
<UL>using the reverse algorithm [in <A HREF="13-4.htm#idx290">13.4.1 Reverse Elements in a Sequence</A>]</UL>
<UL>using the rotate algorithm [in <A HREF="13-4.htm#idx296">13.4.3 Rotate Elements Around a Midpoint</A>]</UL>
<UL>using the search algorithm [in <A HREF="13-3.htm#idx279">13.3.4 Find a Sub-Sequence within a Sequence</A>]</UL>
<UL>using the sort algorithm [in <A HREF="14-2.htm#idx343">14.2 Sorting Algorithms</A>]</UL>
<UL>using the transform algorithm [in <A HREF="13-7.htm#idx332">13.7.1 Transform One or Two Sequences</A>]</UL>
<UL>using the unique algorithm [in <A HREF="13-5.htm#idx316">13.5.2 Remove Runs of Similar Values</A>]</UL>
<BR>exception handling classes
<UL> hierarchy [in <A HREF="18-2.htm#idx410">18.2 The Standard Exception Hierarchy</A>]</UL>
<UL>include files [in <A HREF="18-1.htm#idx408">18.1.1 Include Files</A>]</UL>
<UL>using [in <A HREF="18-3.htm#idx412">18.3 Using Exceptions</A>]</UL>
<BR>exception handling [in <A HREF="18-1.htm#idx405">18.1 Overview</A>]
<BR>exponential functions [in <A HREF="20-2.htm#idx429">20.2.8 Transcendental Functions</A>]
<BR>extending the Standard C++ Library [in <A HREF="16-1.htm#idx377">16.1 Extending the Library</A>]
</DL>
<A NAME="f"><H3>f</H3></A>
<DL><BR>fill() [in <A HREF="13-2.htm#idx245">13.2.1 Fill a Sequence with An Initial Value</A>]
<BR>fill_n() [in <A HREF="13-2.htm#idx245">13.2.1 Fill a Sequence with An Initial Value</A>]
<BR>find()
<UL>[in <A HREF="12-2.htm#idx231">12.2.9 Searching Operations</A>]</UL>
<UL>[in <A HREF="13-3.htm#idx272">13.3.1 Find an Element Satisfying a Condition</A>]</UL>
<UL>[in <A HREF="13-3.htm#idx276">13.3.3 Find the First Occurrence of Any Value from a Sequence</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx132">8.2.5 Searching and Counting</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx168">9.2.6 Searching and Counting</A>]</UL>
<BR>find_end() [in <A HREF="13-3.htm#idx280">13.3.5 Find the Last Occurrence of a Sub-Sequence </A>]
<BR>find_first_not_of() [in <A HREF="12-2.htm#idx232">12.2.9 Searching Operations</A>]
<BR>find_first_of() [in <A HREF="12-2.htm#idx232">12.2.9 Searching Operations</A>]
<BR>find_if()
<UL>[in <A HREF="13-3.htm#idx272">13.3.1 Find an Element Satisfying a Condition</A>]</UL>
<UL>[in <A HREF="13-3.htm#idx276">13.3.3 Find the First Occurrence of Any Value from a Sequence</A>]</UL>
<BR>find_last_not_of() [in <A HREF="12-2.htm#idx232">12.2.9 Searching Operations</A>]
<BR>find_last_of() [in <A HREF="12-2.htm#idx232">12.2.9 Searching Operations</A>]
<BR>flip()
<UL>[in <A HREF="5-3.htm#idx93">5.3 Boolean Vectors</A>]</UL>
<UL>[in <A HREF="8-4.htm#idx149">8.4.3 Accessing and Testing Elements</A>]</UL>
<BR>forward iterators
<UL>[in <A HREF="2-2.htm#idx14">2.2 Varieties of Iterators</A>]</UL>
<UL>[in <A HREF="2-2.htm#idx26">2.2.3 Forward Iterators</A>]</UL>
<BR>for_each()
<UL>[in <A HREF="13-8.htm#idx337">13.8 The for_each Algorithm</A>]</UL>
<UL>[in <A HREF="3-1.htm#idx40">3.1 Functions</A>]</UL>
<BR>front()
<UL>[in <A HREF="5-2.htm#idx77">5.2.3 Subscripting a vector</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx113">6.2.6 Access and Iteration</A>]</UL>
<BR>front_inserter() [in <A HREF="2-4.htm#idx36">2.4 Insert Iterators</A>]
<BR>function adaptors
<UL>defined [in <A HREF="3-4.htm#idx49">3.4.1 Definition</A>]</UL>
<BR>function objects
<UL>[in <A HREF="3-3.htm#idx42">3.3.1 Definition</A>]</UL>
<UL>and implemented operations [in <A HREF="3-3.htm#idx45">3.3.2.1 To Employ Existing Standard Library Function Objects</A>]</UL>
<UL>in place of functions [in <A HREF="3-3.htm#idx43">3.3.2 Use</A>]</UL>
<UL>standard [in <A HREF="3-3.htm#idx44">3.3.2.1 To Employ Existing Standard Library Function Objects</A>]</UL>
<UL>to access or set state information [in <A HREF="3-3.htm#idx48">3.3.2.3 To Access or Set State Information</A>]</UL>
<UL>to improve execution [in <A HREF="3-3.htm#idx47">3.3.2.2 To Improve Execution</A>]</UL>
<BR>functions as arguments [in <A HREF="3-1.htm#idx40">3.1 Functions</A>]
<BR>fundamental datatypes [in <A HREF="21-2.htm#idx433">21.2 Fundamental Datatypes</A>]
<BR>future events [in <A HREF="11-1.htm#idx196">11.1 The priority queue Data Abstraction</A>]
</DL>
<A NAME="g"><H3>g</H3></A>
<DL><BR>generate() [in <A HREF="13-2.htm#idx262">13.2.3 Initialize a Sequence with Generated Values</A>]
<BR>generate_n() [in <A HREF="13-2.htm#idx262">13.2.3 Initialize a Sequence with Generated Values</A>]
<BR>generators
<UL>[in <A HREF="13-2.htm#idx266">13.2.3 Initialize a Sequence with Generated Values</A>]</UL>
<UL>defined [in <A HREF="3-3.htm#idx48">3.3.2.3 To Access or Set State Information</A>]</UL>
<BR>generic adaptor [in <A HREF="16-2.htm#idx386">16.2.2 Generic Inheritance</A>]
<BR>generic algorithms
<UL>categories of [in <A HREF="13-1.htm#idx234">13.1 Overview</A>]</UL>
<UL>include files [in <A HREF="13-1.htm#idx243">13.1.1 Include Files</A>]</UL>
<BR>generic composition [in <A HREF="16-2.htm#idx387">16.2.3 Generic Composition</A>]
<BR>generic inheritance [in <A HREF="16-2.htm#idx385">16.2.1 Inheritance </A>]
<BR>generic programming [in <A HREF="16-1.htm#idx377">16.1 Extending the Library</A>]
<BR>graph [in <A HREF="4-4.htm#idx64">4.4 Container Types Not Found in the Standard Library</A>]
</DL>
<A NAME="h"><H3>h</H3></A>
<DL><BR>hash table [in <A HREF="4-4.htm#idx66">4.4 Container Types Not Found in the Standard Library</A>]
<BR>heap
<UL>[in <A HREF="11-2.htm#idx205">11.2.1 Declaration and Initialization of priority queue</A>]</UL>
<UL>defined [in <A HREF="14-7.htm#idx359">14.7 heap Operations</A>]</UL>
<UL>operations [in <A HREF="14-7.htm#idx359">14.7 heap Operations</A>]</UL>
<BR>heterogeneous collection [in <A HREF="11-3.htm#idx207">11.3 Example Program - Event-Driven Simulation</A>]
</DL>
<A NAME="i"><H3>i</H3></A>
<DL><BR>imag() [in <A HREF="20-2.htm#idx422">20.2.2 Accessing Complex Number Values</A>]
<BR>in-place transformations [in <A HREF="13-4.htm#idx287">13.4 In-Place Transformations</A>]
<BR>includes()
<UL>[in <A HREF="14-6.htm#idx357">14.6 set Operations</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx138">8.2.7.1 Subset test</A>]</UL>
<BR>inheritance [in <A HREF="16-2.htm#idx384">16.2.1 Inheritance </A>]
<BR>initialization algorithms
<UL>[in <A HREF="13-2.htm#idx244">13.2 Initialization Algorithms</A>]</UL>
<UL>copying [in <A HREF="13-2.htm#idx252">13.2.2 Copy One Sequence Into Another Sequence</A>]</UL>
<UL>exchanging values [in <A HREF="13-2.htm#idx268">13.2.4 Swap Values from Two Parallel Ranges</A>]</UL>
<UL>fixed value [in <A HREF="13-2.htm#idx245">13.2.1 Fill a Sequence with An Initial Value</A>]</UL>
<UL>generated values [in <A HREF="13-2.htm#idx261">13.2.3 Initialize a Sequence with Generated Values</A>]</UL>
<BR>inner_product() [in <A HREF="13-6.htm#idx323">13.6.3 Generalized Inner Product</A>]
<BR>inplace_merge()
<UL>[in <A HREF="13-4.htm#idx307">13.4.6 Merge Two Adjacent Sequences into One</A>]</UL>
<UL>[in <A HREF="14-5.htm#idx355">14.5 Merge Ordered Sequences</A>]</UL>
<BR>input iterators
<UL>[in <A HREF="2-2.htm#idx16">2.2 Varieties of Iterators</A>]</UL>
<UL>[in <A HREF="2-2.htm#idx20">2.2.1 Input Iterators</A>]</UL>
<UL>container iterators [in <A HREF="2-2.htm#idx21">2.2.1.1 Kinds of Input Iterators</A>]</UL>
<UL>example [in <A HREF="2-2.htm#idx20">2.2.1 Input Iterators</A>]</UL>
<UL>input streams iterators [in <A HREF="2-2.htm#idx21">2.2.1.1 Kinds of Input Iterators</A>]</UL>
<UL>ordinary pointers [in <A HREF="2-2.htm#idx21">2.2.1.1 Kinds of Input Iterators</A>]</UL>
<BR>input streams iterators
<UL>[in <A HREF="2-2.htm#idx21">2.2.1.1 Kinds of Input Iterators</A>]</UL>
<UL>[in <A HREF="2-2.htm#idx24">2.2.1.1 Kinds of Input Iterators</A>]</UL>
<BR>insert iterators
<UL>[in <A HREF="13-2.htm#idx251">13.2.1 Fill a Sequence with An Initial Value</A>]</UL>
<UL>[in <A HREF="13-2.htm#idx260">13.2.2 Copy One Sequence Into Another Sequence</A>]</UL>
<UL>[in <A HREF="13-7.htm#idx330">13.7 Sequence-Generating Algorithms</A>]</UL>
<UL>[in <A HREF="2-4.htm#idx35">2.4 Insert Iterators</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx100">6.2.1 Declaration and Initialization of lists</A>]</UL>
<BR>insert()
<UL>[in <A HREF="12-2.htm#idx225">12.2.6 Insertion, Removal, and Replacement</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx86">5.2.5 Inserting and Removing Elements</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx105">6.2.3 Placing Elements into a list</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx129">8.2.3 Insertion</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx163">9.2.3 Insertion and Access</A>]</UL>
<BR>inserter() [in <A HREF="2-4.htm#idx37">2.4 Insert Iterators</A>]
<BR>iotaGen
<UL>[in <A HREF="13-2.htm#idx267">13.2.3 Initialize a Sequence with Generated Values</A>]</UL>
<UL>[in <A HREF="3-3.htm#idx48">3.3.2.3 To Access or Set State Information</A>]</UL>
<BR>istream_iterator [in <A HREF="2-3.htm#idx33">2.3.1 Input Stream Iterators</A>]
<BR>iterators
<UL>[in <A HREF="16-3.htm#idx392">16.3.3 Iterator Requirements</A>]</UL>
<UL>bidirectional [in <A HREF="2-2.htm#idx14">2.2 Varieties of Iterators</A>]</UL>
<UL><UL>[in <A HREF="2-2.htm#idx18">2.2 Varieties of Iterators</A>]</UL></UL>
<UL><UL>[in <A HREF="2-2.htm#idx27">2.2.4 Bidirectional Iterators</A>]</UL></UL>
<UL>constant [in <A HREF="2-2.htm#idx15">2.2 Varieties of Iterators</A>]</UL>
<UL>define ranges [in <A HREF="2-1.htm#idx12">2.1 Introduction to Iterators</A>]</UL>
<UL>defined [in <A HREF="2-1.htm#idx8">2.1 Introduction to Iterators</A>]</UL>
<UL>forms of [in <A HREF="2-2.htm#idx13">2.2 Varieties of Iterators</A>]</UL>
<UL>forward [in <A HREF="2-2.htm#idx14">2.2 Varieties of Iterators</A>]</UL>
<UL><UL>[in <A HREF="2-2.htm#idx26">2.2.3 Forward Iterators</A>]</UL></UL>
<UL>functions for manipulating [in <A HREF="2-5.htm#idx38">2.5 Iterator Operations</A>]</UL>
<UL>input [in <A HREF="2-2.htm#idx16">2.2 Varieties of Iterators</A>]</UL>
<UL><UL>[in <A HREF="2-2.htm#idx20">2.2.1 Input Iterators</A>]</UL></UL>
<UL>insert [in <A HREF="13-2.htm#idx260">13.2.2 Copy One Sequence Into Another Sequence</A>]</UL>
<UL><UL>[in <A HREF="2-4.htm#idx35">2.4 Insert Iterators</A>]</UL></UL>
<UL>iterator requirements [in <A HREF="16-3.htm#idx392">16.3.3 Iterator Requirements</A>]</UL>
<UL>output stream [in <A HREF="2-3.htm#idx34">2.3.2 Output Stream Iterators</A>]</UL>
<UL>output [in <A HREF="2-2.htm#idx17">2.2 Varieties of Iterators</A>]</UL>
<UL><UL>[in <A HREF="2-2.htm#idx25">2.2.2 Output Iterators</A>]</UL></UL>
<UL>pairs of [in <A HREF="2-1.htm#idx9">2.1 Introduction to Iterators</A>]</UL>
<UL>random access [in <A HREF="2-2.htm#idx14">2.2 Varieties of Iterators</A>]</UL>
<UL><UL>[in <A HREF="2-2.htm#idx19">2.2 Varieties of Iterators</A>]</UL></UL>
<UL><UL>[in <A HREF="2-2.htm#idx29">2.2.5 Random Access Iterators</A>]</UL></UL>
<UL>reachable [in <A HREF="2-1.htm#idx11">2.1 Introduction to Iterators</A>]</UL>
<UL>reverse [in <A HREF="2-2.htm#idx31">2.2.6 Reverse Iterators</A>]</UL>
<UL>stream [in <A HREF="2-3.htm#idx32">2.3 Stream Iterators</A>]</UL>
<BR>iterator_category
<UL>primitive [in <A HREF="16-4.htm#idx395">16.4.1 The iterator_traits Template</A>]</UL>
<BR>iterator_traits template [in <A HREF="16-4.htm#idx394">16.4 Tips and Techniques for Building Algorithms</A>]
<BR>iter_swap() [in <A HREF="13-2.htm#idx269">13.2.4 Swap Values from Two Parallel Ranges</A>]
</DL>
<A NAME="k"><H3>k</H3></A>
<DL><BR>key_comp() [in <A HREF="9-2.htm#idx171">9.2.7 Element Comparisons</A>]
</DL>
<A NAME="l"><H3>l</H3></A>
<DL><BR>length() [in <A HREF="12-2.htm#idx216">12.2.2 Resetting Size and Capacity</A>]
<BR>lexical comparison
<UL>defined [in <A HREF="13-6.htm#idx327">13.6.5 Lexical Comparison </A>]</UL>
<BR>lexicographical_compare() [in <A HREF="13-6.htm#idx328">13.6.5 Lexical Comparison </A>]
<BR>list operations example [in <A HREF="6-3.htm#idx115">6.3 Example Program - An Inventory System</A>]
<BR>list
<UL>declaring and initializing [in <A HREF="6-2.htm#idx99">6.2.1 Declaration and Initialization of lists</A>]</UL>
<UL>defined [in <A HREF="6-1.htm#idx96">6.1 The list Data Abstraction</A>]</UL>
<UL>example [in <A HREF="6-3.htm#idx115">6.3 Example Program - An Inventory System</A>]</UL>
<UL>include file [in <A HREF="6-1.htm#idx97">6.1.1 Include files</A>]</UL>
<UL>operations for [in <A HREF="6-2.htm#idx98">6.2 list Operations</A>]</UL>
<UL>type definitions for [in <A HREF="6-2.htm#idx103">6.2.2 Type Definitions</A>]</UL>
<BR>logic errors [in <A HREF="18-1.htm#idx406">18.1 Overview</A>]
<BR>logic_error [in <A HREF="18-2.htm#idx411">18.2 The Standard Exception Hierarchy</A>]
<BR>lower_bound()
<UL>[in <A HREF="14-4.htm#idx351">14.4 Binary Search</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx133">8.2.5 Searching and Counting</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx169">9.2.6 Searching and Counting</A>]</UL>
</DL>
<A NAME="m"><H3>m</H3></A>
<DL><BR>make_heap() [in <A HREF="14-7.htm#idx360">14.7 heap Operations</A>]
<BR>managing data storage [in <A HREF="15-1.htm#idx366">15.1 An Overview</A>]
<BR>map
<UL>comparing elements [in <A HREF="9-2.htm#idx171">9.2.7 Element Comparisons</A>]</UL>
<UL>declaring and initializing [in <A HREF="9-2.htm#idx160">9.2.1 Declaration and Initialization of map</A>]</UL>
<UL>defined [in <A HREF="9-1.htm#idx156">9.1 The map Data Abstraction</A>]</UL>
<UL>example [in <A HREF="9-3.htm#idx172">9.3.1 Example - A Telephone Database</A>]</UL>
<UL><UL>[in <A HREF="9-3.htm#idx173">9.3.2 An Example - Graphs</A>]</UL></UL>
<UL><UL>[in <A HREF="9-3.htm#idx176">9.3.3 Example - A Concordance</A>]</UL></UL>
<UL>include file [in <A HREF="9-1.htm#idx158">9.1.1 Include files</A>]</UL>
<UL>insertion and access [in <A HREF="9-2.htm#idx163">9.2.3 Insertion and Access</A>]</UL>
<UL>iterators for [in <A HREF="9-2.htm#idx166">9.2.5 Iterators</A>]</UL>
<UL>operations for [in <A HREF="9-2.htm#idx159">9.2 map and multimap Operations</A>]</UL>
<UL>removing values from [in <A HREF="9-2.htm#idx165">9.2.4 Removal of Values</A>]</UL>
<UL>searching and counting [in <A HREF="9-2.htm#idx170">9.2.6 Searching and Counting</A>]</UL>
<UL>type definitions for [in <A HREF="9-2.htm#idx162">9.2.2 Type Definitions</A>]</UL>
<BR>max() [in <A HREF="13-3.htm#idx282">13.3.6 Locate Maximum or Minimum Element</A>]
<BR>max_element() [in <A HREF="13-3.htm#idx283">13.3.6 Locate Maximum or Minimum Element</A>]
<BR>max_size()
<UL>[in <A HREF="12-2.htm#idx215">12.2.2 Resetting Size and Capacity</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx79">5.2.4 Extent and Size-Changing Operations</A>]</UL>
<BR>memory management [in <A HREF="4-3.htm#idx59">4.3 Memory Management Issues</A>]
<BR>mem_fun [in <A HREF="3-4.htm#idx51">3.4.3 Adapting Member Functions</A>]
<BR>merge ordered sequences algorithm [in <A HREF="14-5.htm#idx353">14.5 Merge Ordered Sequences</A>]
<BR>merge()
<UL>[in <A HREF="13-4.htm#idx307">13.4.6 Merge Two Adjacent Sequences into One</A>]</UL>
<UL>[in <A HREF="14-5.htm#idx353">14.5 Merge Ordered Sequences</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx107">6.2.3.1 Splicing</A>]</UL>
<BR>merge
<UL>defined [in <A HREF="13-4.htm#idx307">13.4.6 Merge Two Adjacent Sequences into One</A>]</UL>
<BR>min() [in <A HREF="13-3.htm#idx282">13.3.6 Locate Maximum or Minimum Element</A>]
<BR>min_element() [in <A HREF="13-3.htm#idx283">13.3.6 Locate Maximum or Minimum Element</A>]
<BR>mismatch()
<UL>[in <A HREF="13-3.htm#idx285">13.3.7 Locate the First Mismatched Elements in Parallel Sequences</A>]</UL>
<UL>[in <A HREF="13-6.htm#idx325">13.6.4 Test Two Sequences for Pairwise Equality</A>]</UL>
<BR>multidimensional array [in <A HREF="4-4.htm#idx63">4.4 Container Types Not Found in the Standard Library</A>]
<BR>multimap
<UL>comparing elements [in <A HREF="9-2.htm#idx171">9.2.7 Element Comparisons</A>]</UL>
<UL>defined [in <A HREF="9-1.htm#idx157">9.1 The map Data Abstraction</A>]</UL>
<UL>example [in <A HREF="9-3.htm#idx176">9.3.3 Example - A Concordance</A>]</UL>
<UL>include file [in <A HREF="9-1.htm#idx158">9.1.1 Include files</A>]</UL>
<UL>insertion and access [in <A HREF="9-2.htm#idx163">9.2.3 Insertion and Access</A>]</UL>
<UL>iterators for [in <A HREF="9-2.htm#idx166">9.2.5 Iterators</A>]</UL>
<UL>operations for [in <A HREF="9-2.htm#idx159">9.2 map and multimap Operations</A>]</UL>
<UL>removing values from [in <A HREF="9-2.htm#idx165">9.2.4 Removal of Values</A>]</UL>
<UL>searching and counting [in <A HREF="9-2.htm#idx170">9.2.6 Searching and Counting</A>]</UL>
<UL>type definitions for [in <A HREF="9-2.htm#idx162">9.2.2 Type Definitions</A>]</UL>
<BR>multiset
<UL>defined [in <A HREF="8-1.htm#idx123">8.1 The set Data Abstraction</A>]</UL>
<UL>include file [in <A HREF="8-1.htm#idx124">8.1.1 Include Files</A>]</UL>
<UL>inserting into [in <A HREF="8-2.htm#idx129">8.2.3 Insertion</A>]</UL>
<UL>iterators for [in <A HREF="8-2.htm#idx135">8.2.6 Iterators</A>]</UL>
<UL>operations for [in <A HREF="8-2.htm#idx125">8.2 set and multiset Operations</A>]</UL>
<UL><UL>[in <A HREF="8-2.htm#idx136">8.2.7 set Operations</A>]</UL></UL>
<UL>removing elements from [in <A HREF="8-2.htm#idx130">8.2.4 Removal of Elements from a set</A>]</UL>
<UL>searching and counting elements [in <A HREF="8-2.htm#idx132">8.2.5 Searching and Counting</A>]</UL>
<UL>subset test [in <A HREF="8-2.htm#idx137">8.2.7.1 Subset test</A>]</UL>
<UL>type definitions for [in <A HREF="8-2.htm#idx128">8.2.2 Type Definitions</A>]</UL>
<UL>union and intersection [in <A HREF="8-2.htm#idx141">8.2.7.2 Set Union or Intersection</A>]</UL>
</DL>
<A NAME="n"><H3>n</H3></A>
<DL><BR>negators
<UL>defined [in <A HREF="3-5.htm#idx52">3.5 Negators and Binders</A>]</UL>
<BR>new operator [in <A HREF="4-3.htm#idx59">4.3 Memory Management Issues</A>]
<BR>next_permutation() [in <A HREF="13-4.htm#idx302">13.4.5 Generate Permutations in Sequence</A>]
<BR>none() [in <A HREF="8-4.htm#idx148">8.4.3 Accessing and Testing Elements</A>]
<BR>norm() [in <A HREF="20-2.htm#idx425">20.2.6 Norm and Absolute Value</A>]
<BR>nth element algorithm [in <A HREF="14-3.htm#idx347">14.3 nth Element</A>]
<BR>nth_element() [in <A HREF="14-3.htm#idx347">14.3 nth Element</A>]
<BR>null pointers [in <A HREF="2-1.htm#idx10">2.1 Introduction to Iterators</A>]
<BR>numeric_limits
<UL>[in <A HREF="21-1.htm#idx432">21.1 Overview</A>]</UL>
<UL>common members [in <A HREF="21-3.htm#idx435">21.3.1 Members Common to All Types</A>]</UL>
<UL>floating point members [in <A HREF="21-3.htm#idx436">21.3.2 Members Specific to Floating Point Values</A>]</UL>
<UL>members [in <A HREF="21-3.htm#idx434">21.3 numeric_limits Members</A>]</UL>
</DL>
<A NAME="o"><H3>o</H3></A>
<DL><BR>operator new [in <A HREF="4-3.htm#idx59">4.3 Memory Management Issues</A>]
<BR>ordered collection algorithms
<UL>[in <A HREF="14-1.htm#idx338">14.1 Overview</A>]</UL>
<UL>include files [in <A HREF="14-1.htm#idx340">14.1.1 Include Files</A>]</UL>
<BR>ordered sequence
<UL>defined [in <A HREF="14-1.htm#idx339">14.1 Overview</A>]</UL>
<BR>ordinary pointers [in <A HREF="2-2.htm#idx22">2.2.1.1 Kinds of Input Iterators</A>]
<BR>ostream_iterator [in <A HREF="2-3.htm#idx34">2.3.2 Output Stream Iterators</A>]
<BR>output iterators
<UL>[in <A HREF="2-2.htm#idx17">2.2 Varieties of Iterators</A>]</UL>
<UL>[in <A HREF="2-2.htm#idx25">2.2.2 Output Iterators</A>]</UL>
<BR>output stream iterators [in <A HREF="2-3.htm#idx34">2.3.2 Output Stream Iterators</A>]
</DL>
<A NAME="p"><H3>p</H3></A>
<DL><BR>pairwise equality [in <A HREF="13-6.htm#idx325">13.6.4 Test Two Sequences for Pairwise Equality</A>]
<BR>partial sort algorithm [in <A HREF="14-2.htm#idx344">14.2.1 Partial Sort</A>]
<BR>partial sum
<UL>defined [in <A HREF="13-7.htm#idx333">13.7.2 Partial Sums</A>]</UL>
<BR>partial_sort() [in <A HREF="14-2.htm#idx344">14.2.1 Partial Sort</A>]
<BR>partial_sort_copy() [in <A HREF="14-2.htm#idx345">14.2.1 Partial Sort</A>]
<BR>partial_sum() [in <A HREF="13-7.htm#idx333">13.7.2 Partial Sums</A>]
<BR>partition() [in <A HREF="13-4.htm#idx298">13.4.4 Partition a Sequence into Two Groups</A>]
<BR>permutation
<UL>defined [in <A HREF="13-4.htm#idx301">13.4.5 Generate Permutations in Sequence</A>]</UL>
<BR>phase angle
<UL>complex [in <A HREF="20-2.htm#idx426">20.2.6 Norm and Absolute Value</A>]</UL>
<BR>pointers
<UL>as container values [in <A HREF="11-3.htm#idx207">11.3 Example Program - Event-Driven Simulation</A>]</UL>
<UL><UL>[in <A HREF="4-3.htm#idx59">4.3 Memory Management Issues</A>]</UL></UL>
<UL>null [in <A HREF="2-1.htm#idx10">2.1 Introduction to Iterators</A>]</UL>
<BR>pointer_to_binary_function [in <A HREF="3-4.htm#idx50">3.4.2 Adapting Global Functions</A>]
<BR>pointer_to_unary_function [in <A HREF="3-4.htm#idx50">3.4.2 Adapting Global Functions</A>]
<BR>polar() [in <A HREF="20-2.htm#idx420">20.2.1 Declaring Complex Numbers</A>]
<BR>pop()
<UL>[in <A HREF="10-2.htm#idx184">10.2 The stack Data Abstraction</A>]</UL>
<UL>[in <A HREF="11-2.htm#idx201">11.2 The priority queue Operations</A>]</UL>
<BR>pop_back() [in <A HREF="5-2.htm#idx85">5.2.5 Inserting and Removing Elements</A>]
<BR>pop_heap() [in <A HREF="14-7.htm#idx362">14.7 heap Operations</A>]
<BR>predicates
<UL>defined [in <A HREF="3-2.htm#idx41">3.2 Predicates</A>]</UL>
<BR>prev_permutation() [in <A HREF="13-4.htm#idx302">13.4.5 Generate Permutations in Sequence</A>]
<BR>primitives [in <A HREF="16-4.htm#idx396">16.4.1 The iterator_traits Template</A>]
<BR>priority queue
<UL>[in <A HREF="9-3.htm#idx174">9.3.2 An Example - Graphs</A>]</UL>
<UL>declaring and initializing [in <A HREF="11-2.htm#idx204">11.2.1 Declaration and Initialization of priority queue</A>]</UL>
<UL>defined [in <A HREF="11-1.htm#idx195">11.1 The priority queue Data Abstraction</A>]</UL>
<UL>example [in <A HREF="11-3.htm#idx206">11.3 Example Program - Event-Driven Simulation</A>]</UL>
<UL>include file [in <A HREF="11-1.htm#idx197">11.1.1 Include Files</A>]</UL>
<UL>operations for [in <A HREF="11-2.htm#idx198">11.2 The priority queue Operations</A>]</UL>
<BR>push(newElement) [in <A HREF="10-2.htm#idx183">10.2 The stack Data Abstraction</A>]
<BR>push(T) [in <A HREF="11-2.htm#idx199">11.2 The priority queue Operations</A>]
<BR>push_back()
<UL>[in <A HREF="14-7.htm#idx361">14.7 heap Operations</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx84">5.2.5 Inserting and Removing Elements</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx104">6.2.3 Placing Elements into a list</A>]</UL>
<BR>push_front() [in <A HREF="6-2.htm#idx104">6.2.3 Placing Elements into a list</A>]
<BR>push_heap() [in <A HREF="14-7.htm#idx361">14.7 heap Operations</A>]
</DL>
<A NAME="q"><H3>q</H3></A>
<DL><BR>queue
<UL>declaring and initializing [in <A HREF="10-3.htm#idx192">10.3.2 Declaration and Initialization of queue</A>]</UL>
<UL>defined [in <A HREF="10-1.htm#idx177">10.1 Overview</A>]</UL>
<UL><UL>[in <A HREF="10-3.htm#idx189">10.3 The queue Data Abstraction</A>]</UL></UL>
<UL>example program [in <A HREF="10-3.htm#idx194">10.3.3 Example Program - Bank Teller Simulation</A>]</UL>
<UL>include file [in <A HREF="10-3.htm#idx190">10.3.1 Include Files</A>]</UL>
<UL>operations for [in <A HREF="10-3.htm#idx189">10.3 The queue Data Abstraction</A>]</UL>
</DL>
<A NAME="r"><H3>r</H3></A>
<DL><BR>radix sort [in <A HREF="7-3.htm#idx120">7.3 Example Program - Radix Sort</A>]
<BR>random access iterators
<UL>[in <A HREF="2-2.htm#idx14">2.2 Varieties of Iterators</A>]</UL>
<UL>[in <A HREF="2-2.htm#idx19">2.2 Varieties of Iterators</A>]</UL>
<UL>[in <A HREF="2-2.htm#idx29">2.2.5 Random Access Iterators</A>]</UL>
<BR>random number generators [in <A HREF="3-3.htm#idx48">3.3.2.3 To Access or Set State Information</A>]
<BR>randomInteger()
<UL>[in <A HREF="11-3.htm#idx210">11.3.1 Example Program - An Ice Cream Store Simulation</A>]</UL>
<UL>[in <A HREF="2-2.htm#idx30">2.2.5 Random Access Iterators</A>]</UL>
<BR>random_shuffle() [in <A HREF="13-4.htm#idx309">13.4.7 Randomly Rearrange Elements in a Sequence</A>]
<BR>rbegin()
<UL>[in <A HREF="5-2.htm#idx87">5.2.6 Iteration</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx135">8.2.6 Iterators</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx166">9.2.5 Iterators</A>]</UL>
<BR>reachable iterators [in <A HREF="2-1.htm#idx11">2.1 Introduction to Iterators</A>]
<BR>real() [in <A HREF="20-2.htm#idx422">20.2.2 Accessing Complex Number Values</A>]
<BR>removal algorithms
<UL>[in <A HREF="13-5.htm#idx311">13.5 Removal Algorithms</A>]</UL>
<UL>for runs of similar values [in <A HREF="13-5.htm#idx314">13.5.2 Remove Runs of Similar Values</A>]</UL>
<UL>for unwanted elements [in <A HREF="13-5.htm#idx312">13.5.1 Remove Unwanted Elements</A>]</UL>
<BR>remove()
<UL>[in <A HREF="12-2.htm#idx225">12.2.6 Insertion, Removal, and Replacement</A>]</UL>
<UL>[in <A HREF="13-5.htm#idx312">13.5.1 Remove Unwanted Elements</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx109">6.2.4 Removing Elements</A>]</UL>
<BR>remove_copy() [in <A HREF="13-5.htm#idx312">13.5.1 Remove Unwanted Elements</A>]
<BR>remove_copy_if() [in <A HREF="13-5.htm#idx312">13.5.1 Remove Unwanted Elements</A>]
<BR>remove_if()
<UL>[in <A HREF="13-5.htm#idx312">13.5.1 Remove Unwanted Elements</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx109">6.2.4 Removing Elements</A>]</UL>
<BR>rend()
<UL>[in <A HREF="5-2.htm#idx87">5.2.6 Iteration</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx135">8.2.6 Iterators</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx166">9.2.5 Iterators</A>]</UL>
<BR>replace() [in <A HREF="13-4.htm#idx291">13.4.2 Replace Certain Elements With Fixed Value</A>]
<BR>replace_copy() [in <A HREF="13-4.htm#idx292">13.4.2 Replace Certain Elements With Fixed Value</A>]
<BR>replace_copy_if() [in <A HREF="13-4.htm#idx292">13.4.2 Replace Certain Elements With Fixed Value</A>]
<BR>replace_if() [in <A HREF="13-4.htm#idx291">13.4.2 Replace Certain Elements With Fixed Value</A>]
<BR>reserve()
<UL>[in <A HREF="12-2.htm#idx215">12.2.2 Resetting Size and Capacity</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx80">5.2.4 Extent and Size-Changing Operations</A>]</UL>
<BR>reset() [in <A HREF="8-4.htm#idx149">8.4.3 Accessing and Testing Elements</A>]
<BR>resize()
<UL>[in <A HREF="12-2.htm#idx216">12.2.2 Resetting Size and Capacity</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx82">5.2.4 Extent and Size-Changing Operations</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx112">6.2.5 Extent and Size-Changing Operations</A>]</UL>
<BR>reverse iterators [in <A HREF="2-2.htm#idx31">2.2.6 Reverse Iterators</A>]
<BR>reverse()
<UL>[in <A HREF="13-4.htm#idx288">13.4.1 Reverse Elements in a Sequence</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx114">6.2.10 In-Place Transformations</A>]</UL>
<BR>reverse_copy() [in <A HREF="2-2.htm#idx28">2.2.4 Bidirectional Iterators</A>]
<BR>rfind() [in <A HREF="12-2.htm#idx231">12.2.9 Searching Operations</A>]
<BR>rotate() [in <A HREF="13-4.htm#idx295">13.4.3 Rotate Elements Around a Midpoint</A>]
<BR>rotation
<UL>defined [in <A HREF="13-4.htm#idx294">13.4.3 Rotate Elements Around a Midpoint</A>]</UL>
<BR>runtime errors [in <A HREF="18-1.htm#idx407">18.1 Overview</A>]
<BR>runtime_error [in <A HREF="18-2.htm#idx411">18.2 The Standard Exception Hierarchy</A>]
</DL>
<A NAME="s"><H3>s</H3></A>
<DL><BR>scalar-producing algorithms
<UL>counting elements that satisfy conditions [in <A HREF="13-6.htm#idx318">13.6.1 Count the Number of Elements That Satisfy a Condition</A>]</UL>
<UL>defined [in <A HREF="13-6.htm#idx317">13.6 Scalar-Producing Algorithms</A>]</UL>
<UL>for computing an inner product [in <A HREF="13-6.htm#idx322">13.6.3 Generalized Inner Product</A>]</UL>
<UL>reducing to single values [in <A HREF="13-6.htm#idx319">13.6.1 Count the Number of Elements That Satisfy a Condition</A>]</UL>
<UL><UL>[in <A HREF="13-6.htm#idx320">13.6.2 Reduce Sequence to a Single Value</A>]</UL></UL>
<UL>testing for pairwise equality [in <A HREF="13-6.htm#idx325">13.6.4 Test Two Sequences for Pairwise Equality</A>]</UL>
<BR>Schonfinkel, Moses [in <A HREF="3-5.htm#idx54">3.5 Negators and Binders</A>]
<BR>search() [in <A HREF="13-3.htm#idx278">13.3.4 Find a Sub-Sequence within a Sequence</A>]
<BR>searching algorithms
<UL>[in <A HREF="13-3.htm#idx271">13.3 Searching Operations</A>]</UL>
<UL>for a sub-sequence [in <A HREF="13-3.htm#idx278">13.3.4 Find a Sub-Sequence within a Sequence</A>]</UL>
<UL>for consecutive duplicate elements [in <A HREF="13-3.htm#idx272">13.3.1 Find an Element Satisfying a Condition</A>]</UL>
<UL><UL>[in <A HREF="13-3.htm#idx274">13.3.2 Find Consecutive Duplicate Elements</A>]</UL></UL>
<UL>for elements satisfying conditions [in <A HREF="13-3.htm#idx272">13.3.1 Find an Element Satisfying a Condition</A>]</UL>
<UL>for first occurences [in <A HREF="13-3.htm#idx276">13.3.3 Find the First Occurrence of Any Value from a Sequence</A>]</UL>
<UL>for maximum or minimum element [in <A HREF="13-3.htm#idx282">13.3.6 Locate Maximum or Minimum Element</A>]</UL>
<UL>for mismatched elements [in <A HREF="13-3.htm#idx282">13.3.6 Locate Maximum or Minimum Element</A>]</UL>
<UL><UL>[in <A HREF="13-3.htm#idx285">13.3.7 Locate the First Mismatched Elements in Parallel Sequences</A>]</UL></UL>
<UL>for the last occurrence [in <A HREF="13-3.htm#idx280">13.3.5 Find the Last Occurrence of a Sub-Sequence </A>]</UL>
<BR>sequence generators [in <A HREF="3-3.htm#idx48">3.3.2.3 To Access or Set State Information</A>]
<BR>sequence [in <A HREF="16-1.htm#idx379">16.1 Extending the Library</A>]
<BR>sequence-generating algorithms
<UL>[in <A HREF="13-7.htm#idx330">13.7 Sequence-Generating Algorithms</A>]</UL>
<UL>for adjacent differences [in <A HREF="13-7.htm#idx335">13.7.3 Adjacent Differences</A>]</UL>
<UL>for partial sums [in <A HREF="13-7.htm#idx333">13.7.2 Partial Sums</A>]</UL>
<UL>transform [in <A HREF="13-7.htm#idx331">13.7.1 Transform One or Two Sequences</A>]</UL>
<BR>set operations algorithms [in <A HREF="14-6.htm#idx356">14.6 set Operations</A>]
<BR>set
<UL>[in <A HREF="4-4.htm#idx67">4.4 Container Types Not Found in the Standard Library</A>]</UL>
<UL>[in <A HREF="8-1.htm#idx122">8.1 The set Data Abstraction</A>]</UL>
<BR>set() [in <A HREF="8-4.htm#idx149">8.4.3 Accessing and Testing Elements</A>]
<BR>set
<UL>declaring and initializing [in <A HREF="8-2.htm#idx126">8.2.1 Declaration and Initialization of set</A>]</UL>
<UL>defined [in <A HREF="8-1.htm#idx121">8.1 The set Data Abstraction</A>]</UL>
<UL>difference [in <A HREF="8-2.htm#idx142">8.2.7.3 Set Difference</A>]</UL>
<UL>example [in <A HREF="8-3.htm#idx144">8.3 Example Program - A Spelling Checker</A>]</UL>
<UL>generic algorithms for [in <A HREF="8-2.htm#idx143">8.2.8 Other Generic Algorithms</A>]</UL>
<UL>include file [in <A HREF="8-1.htm#idx124">8.1.1 Include Files</A>]</UL>
<UL>inserting into [in <A HREF="8-2.htm#idx129">8.2.3 Insertion</A>]</UL>
<UL>operations for [in <A HREF="8-2.htm#idx125">8.2 set and multiset Operations</A>]</UL>
<UL><UL>[in <A HREF="8-2.htm#idx136">8.2.7 set Operations</A>]</UL></UL>
<UL>removing elements from [in <A HREF="8-2.htm#idx130">8.2.4 Removal of Elements from a set</A>]</UL>
<UL>searching and counting elements [in <A HREF="8-2.htm#idx132">8.2.5 Searching and Counting</A>]</UL>
<UL>subset test [in <A HREF="8-2.htm#idx137">8.2.7.1 Subset test</A>]</UL>
<UL>type definitions for [in <A HREF="8-2.htm#idx128">8.2.2 Type Definitions</A>]</UL>
<UL>union and intersection [in <A HREF="8-2.htm#idx139">8.2.7.2 Set Union or Intersection</A>]</UL>
<BR>set_difference()
<UL>[in <A HREF="14-6.htm#idx357">14.6 set Operations</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx142">8.2.7.3 Set Difference</A>]</UL>
<BR>set_intersection()
<UL>[in <A HREF="14-6.htm#idx357">14.6 set Operations</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx140">8.2.7.2 Set Union or Intersection</A>]</UL>
<BR>set_symmetric_difference()
<UL>[in <A HREF="14-6.htm#idx357">14.6 set Operations</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx142">8.2.7.3 Set Difference</A>]</UL>
<BR>set_union()
<UL>[in <A HREF="14-5.htm#idx353">14.5 Merge Ordered Sequences</A>]</UL>
<UL>[in <A HREF="14-6.htm#idx357">14.6 set Operations</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx139">8.2.7.2 Set Union or Intersection</A>]</UL>
<BR>shallow copy [in <A HREF="4-3.htm#idx58">4.3 Memory Management Issues</A>]
<BR>sieve of Eratosthenes [in <A HREF="5-4.htm#idx94">5.4 Example Program - The Sieve of Eratosthenes</A>]
<BR>simulation framework example [in <A HREF="11-3.htm#idx209">11.3.1 Example Program - An Ice Cream Store Simulation</A>]
<BR>simulation programs [in <A HREF="11-1.htm#idx196">11.1 The priority queue Data Abstraction</A>]
<BR>size()
<UL>[in <A HREF="10-2.htm#idx181">10.2 The stack Data Abstraction</A>]</UL>
<UL>[in <A HREF="11-2.htm#idx202">11.2 The priority queue Operations</A>]</UL>
<UL>[in <A HREF="12-2.htm#idx215">12.2.2 Resetting Size and Capacity</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx79">5.2.4 Extent and Size-Changing Operations</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx111">6.2.5 Extent and Size-Changing Operations</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx131">8.2.5 Searching and Counting</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx167">9.2.6 Searching and Counting</A>]</UL>
<BR>sort() [in <A HREF="14-2.htm#idx342">14.2 Sorting Algorithms</A>]
<BR>sorting algorithms
<UL>[in <A HREF="14-2.htm#idx341">14.2 Sorting Algorithms</A>]</UL>
<UL>partial sort [in <A HREF="14-2.htm#idx344">14.2.1 Partial Sort</A>]</UL>
<BR>sort_heap() [in <A HREF="14-7.htm#idx363">14.7 heap Operations</A>]
<BR>sparse array [in <A HREF="4-4.htm#idx65">4.4 Container Types Not Found in the Standard Library</A>]
<BR>splice() [in <A HREF="6-2.htm#idx106">6.2.3.1 Splicing</A>]
<BR>stable_partition() [in <A HREF="13-4.htm#idx300">13.4.4 Partition a Sequence into Two Groups</A>]
<BR>stable_sort() [in <A HREF="14-2.htm#idx342">14.2 Sorting Algorithms</A>]
<BR>stack
<UL>declaring and initializing [in <A HREF="10-2.htm#idx186">10.2.2 Declaration and Initialization of stack</A>]</UL>
<UL>defined [in <A HREF="10-1.htm#idx177">10.1 Overview</A>]</UL>
<UL>example [in <A HREF="10-2.htm#idx188">10.2.3 Example Program - An RPN Calculator</A>]</UL>
<UL>include file [in <A HREF="10-2.htm#idx185">10.2.1 Include Files</A>]</UL>
<BR>Standard C++ Library
<UL>and Tools.h++ [in <A HREF="1-2.htm#idx4">1.2.3 Relationship to Tools.h++</A>]</UL>
<UL>components [in <A HREF="1-2.htm#idx2">1.2.1 Components</A>]</UL>
<BR>Standard Template Library [in <A HREF="1-2.htm#idx3">1.2.1 Components</A>]
<BR>stream iterator [in <A HREF="2-3.htm#idx32">2.3 Stream Iterators</A>]
<BR>string traits class [in <A HREF="17-2.htm#idx403">17.2 Using the Traits Technique</A>]
<BR>string
<UL>appending to [in <A HREF="12-2.htm#idx219">12.2.3 Assignment, Append, and Swap</A>]</UL>
<UL>assigning value [in <A HREF="12-2.htm#idx218">12.2.3 Assignment, Append, and Swap</A>]</UL>
<UL>comparisons [in <A HREF="12-2.htm#idx228">12.2.7 Copy and Substring</A>]</UL>
<UL>declaring and initializing [in <A HREF="12-2.htm#idx214">12.2.1 Declaration and Initialization of string</A>]</UL>
<UL>defined [in <A HREF="12-1.htm#idx211">12.1 The string Abstraction</A>]</UL>
<UL>example [in <A HREF="12-3.htm#idx233">12.3  Example Function - Split a Line into Words</A>]</UL>
<UL>include file [in <A HREF="12-1.htm#idx213">12.1.1 Include Files</A>]</UL>
<UL>individual character access [in <A HREF="12-2.htm#idx222">12.2.4 Character Access</A>]</UL>
<UL>inserting, removing, replacing [in <A HREF="12-2.htm#idx225">12.2.6 Insertion, Removal, and Replacement</A>]</UL>
<UL>iterators for [in <A HREF="12-2.htm#idx224">12.2.5 Iterators</A>]</UL>
<UL>resetting size [in <A HREF="12-2.htm#idx215">12.2.2 Resetting Size and Capacity</A>]</UL>
<UL>searching operations [in <A HREF="12-2.htm#idx230">12.2.8 string Comparisons</A>]</UL>
<UL>substrings [in <A HREF="12-2.htm#idx226">12.2.7 Copy and Substring</A>]</UL>
<UL>swapping values [in <A HREF="12-2.htm#idx221">12.2.3 Assignment, Append, and Swap</A>]</UL>
<BR>string_char_trait [in <A HREF="17-2.htm#idx404">17.2 Using the Traits Technique</A>]
<BR>Stroustrup, Bjarne [in <A HREF="1-1.htm#idx1">1.1 Welcome</A>]
<BR>subscript operator
<UL>[in <A HREF="12-2.htm#idx222">12.2.4 Character Access</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx75">5.2.3 Subscripting a vector</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx164">9.2.3 Insertion and Access</A>]</UL>
<BR>substr() [in <A HREF="12-2.htm#idx227">12.2.7 Copy and Substring</A>]
<BR>swap()
<UL>[in <A HREF="12-2.htm#idx221">12.2.3 Assignment, Append, and Swap</A>]</UL>
<UL>[in <A HREF="13-2.htm#idx268">13.2.4 Swap Values from Two Parallel Ranges</A>]</UL>
<UL>[in <A HREF="5-2.htm#idx73">5.2.1 Declaration and Initialization of vectors</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx102">6.2.1 Declaration and Initialization of lists</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx127">8.2.1 Declaration and Initialization of set</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx161">9.2.1 Declaration and Initialization of map</A>]</UL>
<BR>swap_ranges() [in <A HREF="13-2.htm#idx269">13.2.4 Swap Values from Two Parallel Ranges</A>]
<BR>symbolic constants [in <A HREF="21-1.htm#idx431">21.1 Overview</A>]
</DL>
<A NAME="t"><H3>t</H3></A>
<DL><BR>test() [in <A HREF="8-4.htm#idx148">8.4.3 Accessing and Testing Elements</A>]
<BR>Tools.h++ [in <A HREF="1-2.htm#idx4">1.2.3 Relationship to Tools.h++</A>]
<BR>top()
<UL>[in <A HREF="10-2.htm#idx182">10.2 The stack Data Abstraction</A>]</UL>
<UL>[in <A HREF="11-2.htm#idx200">11.2 The priority queue Operations</A>]</UL>
<BR>to_string() [in <A HREF="8-4.htm#idx155">8.4.5 Conversions</A>]
<BR>to_ulong() [in <A HREF="8-4.htm#idx154">8.4.5 Conversions</A>]
<BR>traits parameter [in <A HREF="17-1.htm#idx400">17.1 Defining the Problem</A>]
<BR>traits template example [in <A HREF="17-2.htm#idx401">17.2 Using the Traits Technique</A>]
<BR>traits [in <A HREF="17-2.htm#idx402">17.2 Using the Traits Technique</A>]
<BR>transcendental functions [in <A HREF="20-2.htm#idx428">20.2.8 Transcendental Functions</A>]
<BR>transform() [in <A HREF="13-7.htm#idx331">13.7.1 Transform One or Two Sequences</A>]
<BR>transformation algorithms
<UL>[in <A HREF="13-4.htm#idx287">13.4 In-Place Transformations</A>]</UL>
<UL>for merging [in <A HREF="13-4.htm#idx307">13.4.6 Merge Two Adjacent Sequences into One</A>]</UL>
<UL>for partitioning elements [in <A HREF="13-4.htm#idx297">13.4.4 Partition a Sequence into Two Groups</A>]</UL>
<UL>for permutations [in <A HREF="13-4.htm#idx301">13.4.5 Generate Permutations in Sequence</A>]</UL>
<UL>for replacing fixed-value elements [in <A HREF="13-4.htm#idx291">13.4.2 Replace Certain Elements With Fixed Value</A>]</UL>
<UL>for reversing elements in a sequence [in <A HREF="13-4.htm#idx288">13.4.1 Reverse Elements in a Sequence</A>]</UL>
<UL>for rotating elements [in <A HREF="13-4.htm#idx295">13.4.3 Rotate Elements Around a Midpoint</A>]</UL>
<UL>for rotation [in <A HREF="13-4.htm#idx294">13.4.3 Rotate Elements Around a Midpoint</A>]</UL>
<UL>rearranging sequence elements [in <A HREF="13-4.htm#idx309">13.4.7 Randomly Rearrange Elements in a Sequence</A>]</UL>
<BR>tree [in <A HREF="4-4.htm#idx61">4.4 Container Types Not Found in the Standard Library</A>]
<BR>trigonometric functions [in <A HREF="20-2.htm#idx427">20.2.7 Trigonometric Functions</A>]
</DL>
<A NAME="u"><H3>u</H3></A>
<DL><BR>unary_function [in <A HREF="3-3.htm#idx46">3.3.2.1 To Employ Existing Standard Library Function Objects</A>]
<BR>unique()
<UL>[in <A HREF="13-5.htm#idx314">13.5.2 Remove Runs of Similar Values</A>]</UL>
<UL>[in <A HREF="6-2.htm#idx110">6.2.4 Removing Elements</A>]</UL>
<BR>unique_copy() [in <A HREF="13-5.htm#idx315">13.5.2 Remove Runs of Similar Values</A>]
<BR>upper_bound()
<UL>[in <A HREF="14-4.htm#idx351">14.4 Binary Search</A>]</UL>
<UL>[in <A HREF="8-2.htm#idx133">8.2.5 Searching and Counting</A>]</UL>
<UL>[in <A HREF="9-2.htm#idx169">9.2.6 Searching and Counting</A>]</UL>
<BR>user-defined algorithms [in <A HREF="16-1.htm#idx378">16.1 Extending the Library</A>]
<BR>user-defined containers [in <A HREF="16-1.htm#idx378">16.1 Extending the Library</A>]
</DL>
<A NAME="v"><H3>v</H3></A>
<DL><BR>valarray
<UL>[in <A HREF="22-1.htm#idx437">22.1 Overview</A>]</UL>
<UL>assignment operators [in <A HREF="22-3.htm#idx445">22.3 Assignment Operators</A>]</UL>
<UL><UL>[in <A HREF="22-5.htm#idx454">22.5 Computed Assignment Operators</A>]</UL></UL>
<UL>auxiliary array classes [in <A HREF="22-4.htm#idx452">22.4.2.4  Indirect Operation </A>]</UL>
<UL>auxiliary classes [in <A HREF="22-1.htm#idx442">22.1.3 Other Unique Features</A>]</UL>
<UL>binary operators [in <A HREF="22-7.htm#idx456">22.7.1 Binary Operators</A>]</UL>
<UL>boolean mask [in <A HREF="22-4.htm#idx450">22.4.2.3 Boolean Mask</A>]</UL>
<UL>class that doesn't meet retrictions [in <A HREF="22-1.htm#idx441">22.1.2.2 A Class That Doesn't Meet the Type Restrictions</A>]</UL>
<UL>class that meets restrictions [in <A HREF="22-1.htm#idx440">22.1.2.1 A Class That Meets the Type Restrictions</A>]</UL>
<UL>declaring [in <A HREF="22-2.htm#idx444">22.2 Declaring a valarray</A>]</UL>
<UL>gslice operation [in <A HREF="22-4.htm#idx449">22.4.2.2 The gslice Operation</A>]</UL>
<UL>include file [in <A HREF="22-1.htm#idx443">22.1.4 Header Files</A>]</UL>
<UL>index operators [in <A HREF="22-4.htm#idx446">22.4.1 Ordinary Index Operators</A>]</UL>
<UL>indirect operation [in <A HREF="22-4.htm#idx451">22.4.2.4  Indirect Operation </A>]</UL>
<UL>member functions [in <A HREF="22-6.htm#idx455">22.6 Member Functions</A>]</UL>
<UL>performance issues [in <A HREF="22-1.htm#idx438">22.1.1 Performance Issues</A>]</UL>
<UL>slice operation [in <A HREF="22-4.htm#idx448">22.4.2.1 The Slice Operation</A>]</UL>
<UL>subset operators [in <A HREF="22-4.htm#idx447">22.4.2 Subset Operators</A>]</UL>
<UL>transcendental functions [in <A HREF="22-7.htm#idx457">22.7.2 Transcendental Functions</A>]</UL>
<UL>type restrictions [in <A HREF="22-1.htm#idx439">22.1.2 Type Restrictions</A>]</UL>
<UL>unary operators [in <A HREF="22-4.htm#idx453">22.4.3 Unary Operators</A>]</UL>
<BR>value_comp() [in <A HREF="9-2.htm#idx171">9.2.7 Element Comparisons</A>]
<BR>value_type [in <A HREF="16-4.htm#idx397">16.4.2 The distance and advance Primitives</A>]
<BR>vector&lt;bool&gt;
<UL>defined [in <A HREF="5-3.htm#idx92">5.3 Boolean Vectors</A>]</UL>
<BR>vector
<UL>boolean [in <A HREF="5-3.htm#idx92">5.3 Boolean Vectors</A>]</UL>
<UL>declaring and initializing [in <A HREF="5-2.htm#idx71">5.2.1 Declaration and Initialization of vectors</A>]</UL>
<UL>defined [in <A HREF="5-1.htm#idx68">5.1 The vector Data Abstraction</A>]</UL>
<UL>determining maximum values in [in <A HREF="5-2.htm#idx90">5.2.9 Useful Generic Algorithms</A>]</UL>
<UL>example program [in <A HREF="5-4.htm#idx94">5.4 Example Program - The Sieve of Eratosthenes</A>]</UL>
<UL>include file [in <A HREF="5-1.htm#idx69">5.1.1 Include Files</A>]</UL>
<UL>inserting and removing elements [in <A HREF="5-2.htm#idx83">5.2.5 Inserting and Removing Elements</A>]</UL>
<UL>operations for [in <A HREF="5-2.htm#idx70">5.2 vector Operations</A>]</UL>
<UL>size and extent changing [in <A HREF="5-2.htm#idx78">5.2.4 Extent and Size-Changing Operations</A>]</UL>
<UL>sorting [in <A HREF="5-2.htm#idx89">5.2.8 Sorting and Sorted vector Operations</A>]</UL>
<UL>test for inclusion [in <A HREF="5-2.htm#idx88">5.2.7 Test for Inclusion</A>]</UL>
<UL>type definitions for [in <A HREF="5-2.htm#idx74">5.2.2 Type Definitions</A>]</UL>
<UL>useful algorithms for [in <A HREF="5-2.htm#idx91">5.2.9 Useful Generic Algorithms</A>]</UL>
</DL>
<A NAME="w"><H3>w</H3></A>
<DL><BR>wstring [in <A HREF="12-1.htm#idx212">12.1 The string Abstraction</A>]
</DL>
<A NAME=""><H3></H3></A>
<DL></DL>
<P><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=O></A></P>
<P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY>
</HTML>