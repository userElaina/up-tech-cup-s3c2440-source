<HTML><HEAD><TITLE>17.4 The Example</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="17-3.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="17-5.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>17.4 The Example</H2>
<A NAME="idx421"><!></A>
<P>Let's return now to our example, in which we are creating a new stream class by derivation.</P>

<A NAME="1741"><H3>17.4.1  The Derived Stream Class</H3></A>
<A NAME="idx422"><!></A>
<P>Let us derive a new stream type <SAMP>odatstream</SAMP> that has an additional data member <SAMP>fmt_</SAMP> for storing a date format string, together with a corresponding member function <SAMP>fmt()</SAMP> for setting the date format specification. </P>
<UL>
<PRE>
template &lt;class charT, class Traits=char_traits&lt;charT&gt; &gt;
class odatstream : public basic_ostream &lt;charT,Traits&gt;
{
public:
 odatstream(basic_ostream&lt;charT,Traits&gt;&amp; ostr,
            const char* fmt = "%x")                            //1
 : basic_ostream&lt;charT,Traits&gt;(ostr.rdbuf())
 {
   fmt_=new charT[strlen(fmt)];
   use_facet&lt;ctype&lt;charT&gt; &gt;(ostr.getloc()).
       widen(fmt, fmt+strlen(fmt), fmt_);                     //2
 }
 
 basic_ostream&lt;charT,Traits&gt;&amp; fmt(const char* f)              //3
 {
   delete[] fmt_;
   fmt_=new charT[strlen(f)];
   use_facet&lt;ctype&lt;charT&gt; &gt;(os.getloc()).
       widen(f, f+strlen(f), fmt_);
   return *this;
 }
 
 charT const* fmt() const                                    //4
 {
  charT * p = new charT[Traits::length(fmt_)];
  Traits::copy(p,fmt_,Traits::length(fmt_));
  return p;
 }
 ~odatstream()                                                //5
 { delete[] fmt_; }
 

private:
 charT* fmt_;                                                 //6
 
 
 template &lt;class charT, class Traits&gt;                         //7
 friend basic_ostream&lt;charT, Traits&gt; &amp;
 operator &lt;&lt; (basic_ostream&lt;charT, Traits &gt;&amp; os, const date&amp; dat);
};</PRE>
</UL>
<TABLE CELLPADDING="3">

<TR VALIGN="top"><TD>//1</TD><TD>A date output stream borrows the stream buffer of an already existing output stream, so that the two streams share the stream buffer.
<BR><BR>The constructor also takes an optional argument, the date format string. This is always a sequence of tiny characters.
<TR VALIGN="top"><TD>//2</TD><TD>The format string is widened or translated into the stream's character type <SAMP>charT</SAMP>. This is because the format string is provided to the time facet of the stream's locale, which expects an array of characters of type <SAMP>charT</SAMP>.
<TR VALIGN="top"><TD>//3</TD><TD>This version of function <SAMP>fmt()</SAMP> allows you to set the format string. 
<TR VALIGN="top"><TD>//4</TD><TD>This version of function <SAMP>fmt()</SAMP> returns the current format string setting.
<TR VALIGN="top"><TD>//5</TD><TD>The date stream class needs a destructor that deletes the format string.
<TR VALIGN="top"><TD>//6</TD><TD>A pointer to the date format specification is stored as a private data member <SAMP>fmt_</SAMP>.
<TR VALIGN="top"><TD>//7</TD><TD>The inserter for dates must access the date format specification. For this reason, we make it a friend of class <SAMP>odatstream</SAMP>.
</TABLE>

<A NAME="1742"><H3>17.4.2  The Date Inserter</H3></A>
<A NAME="idx423"><!></A>
<P>We would like to be able to insert <SAMP>date</SAMP> objects into all kinds of output streams. Whenever the output stream is a date output stream of type <SAMP>odatstream</SAMP>, we would also like to take advantage of its ability to carry additional information for formatting date output. How can this be achieved?</P>
<P>It would be ideal if the inserter for <SAMP>date</SAMP> objects were a virtual member function of all output stream classes that we could implement differently for different types of output streams. For example, when a date object is inserted into an <SAMP>odatstream,</SAMP> the formatting would use the available date formatting string; when inserted into an arbitrary output stream, default formatting would be performed. Unfortunately, we cannot modify the existing output stream classes, since they are part of a library you will not want to modify.</P>
<A NAME="fn22"><!></A>
<P>This kind of problem is typically solved using dynamic casts. Since the stream classes have a virtual destructor, inherited from class <SAMP>basic_ios</SAMP>, we can use dynamic casts to achieve the desired virtual behavior.<SUP><A HREF="endnotes.htm#fn22">22</A></SUP> </P>
<A NAME="idx424"><!></A>
<P>Here is the implementation of the date inserter:</P>
<UL>
<PRE>
template&lt;class charT, class Traits&gt;
basic_ostream&lt;charT, Traits&gt; &amp;
operator &lt;&lt; (basic_ostream&lt;charT, Traits &gt;&amp; os, const date&amp; dat)
{
 ios_base::iostate err = 0;
 
 try {
  typename basic_ostream&lt;charT, Traits&gt;::sentry opfx(os);
 
  if(opfx)
  {
    charT* fmt;
    charT buf[3];
 
    try {                                                     //1
      odatstream&lt;charT,Traits&gt;* 
      p = dynamic_cast&lt;odatstream&lt;charT,Traits&gt;*&gt;(&amp;os);       //2
    }
    catch (bad_cast)                                          //3
    {
      char patt[3] = "%x";
 
      use_facet(os.getloc(),
        (ctype&lt;charT&gt;*)0).widen(patt,patt+3,buf);
    }
    fmt = (p) ? p-&gt;fmt_ : buf;                                //4
 
    if (use_facet&lt;time_put&lt;charT,ostreambuf_iterator&lt;charT,Traits&gt; &gt; &gt;(os.getloc())
       .put(os,os,os.fill(),&amp;dat.tm_date,fmt,fmt+Traits::length(fmt)).failed())
       err  = ios_base::badbit;
    os.width(0);
  }
 } //try
 catch(...)
 {
    bool flag = FALSE;
    try {
           os.setstate(ios_base::failbit);
     }
    catch( ios_base::failure ) { flag= TRUE; }
    if ( flag ) throw;
 }
 
 if ( err ) os.setstate(err);
 
 return os;
}
</PRE>
</UL>
<TABLE CELLPADDING="3">

<A NAME="idx425"><!></A>
<TR VALIGN="top"><TD>//1</TD><TD>We perform a dynamic cast in statement <SAMP>//2</SAMP>. A dynamic cast throws an exception in case of mismatch. Naturally, we do not want to confront our user with <SAMP>bad_cast</SAMP> exceptions because the mismatch does not signify an error condition, but only that the default formatting is performed. For this reason, we try to catch the potential <SAMP>bad_cast</SAMP> exception.
<TR VALIGN="top"><TD>//2</TD><TD>This is the dynamic cast to find out whether the stream is a date stream or any other kind of output stream.
<TR VALIGN="top"><TD>//3</TD><TD>In case of mismatch, we prepare the default date format specification <SAMP>"%x"</SAMP>.
<TR VALIGN="top"><TD>//4</TD><TD>If the stream is not of type <SAMP>odatstream</SAMP>, the default format specification prepared in the catch clause is used. Otherwise, the format specification is taken from the private data member <SAMP>fmt_</SAMP>.
</TABLE>

<A NAME="1743"><H3>17.4.3  The Manipulator</H3></A>
<A NAME="idx426"><!></A>
<P>The date output stream has a member function for setting the format specification. Analogous to the standard stream format functions, we would like to provide a manipulator for setting the format specification. This manipulator affects only output streams. Therefore, we must define a manipulator base class for output stream manipulators, <SAMP>osmanip</SAMP>, along with the necessary inserter for this manipulator. We do this in the code below. See <A HREF="12-3.htm#1233">Section 12.3.3</A> for a detailed discussion of the technique we are using here:</P>
<UL>
<PRE>
template &lt;class Ostream, class Arg&gt;
class osmanip {
  public:
    typedef Ostream ostream_type;
    typedef Arg argument_type;
 
    osmanip(Ostream&amp; (*pf)(Ostream&amp;, Arg), Arg arg)
    : pf_(pf) , arg_(arg) { ; }
 
  protected:
    Ostream&amp;     (*pf_)(Ostream&amp;, Arg);
    Arg          arg_;
 
  friend Ostream&amp;
    operator&lt;&lt; (Ostream&amp; ostr, const osmanip&lt;Ostream,Arg&gt;&amp; manip);
};
 
template &lt;class Ostream, class Arg&gt;
Ostream&amp; operator&lt;&lt; (Ostream&amp; ostr,const osmanip&lt;Ostream,Arg&gt;&amp; manip)
{
   (*manip.pf_)(ostr,manip.arg_);
   return ostr;
}</PRE>
</UL>
<A NAME="idx427"><!></A>
<P>After these preliminaries, we can now implement the <SAMP>setfmt</SAMP> manipulator itself:</P>
<UL>
<PRE>
template &lt;class charT, class Traits&gt;
inline basic_ostream&lt;charT,Traits&gt;&amp;
sfmt(basic_ostream&lt;charT,Traits&gt;&amp; ostr, const char* f)        //1
{
 try {                                                        //2
 odatstream&lt;charT,Traits&gt;* p = dynamic_cast&lt;odatstream&lt;charT,Traits&gt;*&gt;(&amp;ostr);
}
catch (bad_cast)                                              //3
{ return ostr; }
 
 p-&gt;fmt(f);                                                   //4
 return ostr;
}

template &lt;class charT,class Traits&gt;
inline osmanip&lt;basic_ostream&lt;charT,Traits&gt;,const char*&gt;
setfmt(const char* fmt)
{ return osmanip&lt;basic_ostream&lt;charT,Traits&gt;,const char*&gt;(sfmt,fmt); }  //5</PRE>
</UL>
<TABLE CELLPADDING="3">

<TR VALIGN="top"><TD>//1</TD><TD>The function <SAMP>sfmt()</SAMP> is the function associated with the <SAMP>setfmt</SAMP> manipulator. Its task is to take a format specification and hand it over to the stream. This happens only if the stream is a date output stream; otherwise, nothing is done.
<TR VALIGN="top"><TD>//2</TD><TD>We determine the stream's type through a dynamic cast. As it would be rather drastic to let a manipulator call result in an exception thrown, we catch the potential <SAMP>bad_cast</SAMP> exception. 
<TR VALIGN="top"><TD>//3</TD><TD>In case of mismatch, we don't do anything and simply return.
<TR VALIGN="top"><TD>//4</TD><TD>In case the stream actually is a date output stream, we store the format specification by calling the stream's <SAMP>fmt()</SAMP> function.
<TR VALIGN="top"><TD>//5</TD><TD>The manipulator itself is a function that creates an output manipulator object.
</TABLE>

<A NAME="idx428"><!></A>
<A NAME="1744"><H3>17.4.4  A Remark on Performance</H3></A>
<A NAME="idx429"><!></A>
<P>The solution suggested in <A HREF="17-4.htm#1743">Section 17.4.3</A> uses dynamic casts and exception handling to implement the date inserter and the date format manipulator. Although this technique is elegant and makes proper use of the C++ language, it might introduce some loss in runtime performance due to the use of exception handling. This is particularly true since the dynamic cast expression, and the exception it raises, is used as a sort of branching statement. In other words, the "exceptional" case occurs relatively often and is not really an exception. </P>
<A NAME="idx430"><!></A>
<P>If optimal performance is important, you can choose an alternative approach: in the proposed solution that uses dynamic casts, extend the date inserter for arbitrary output streams <SAMP>basic_ostream&lt;charT,Traits&gt;&amp; operator&lt;&lt; (basic_ostream &lt;charT,Traits&gt;&amp;, const date&amp;)</SAMP> so that it formats dates differently, depending on the type of output stream. Alternatively, you can leave the existing date inserter for output streams unchanged and implement an additional date inserter that works for output <I>date</I> streams only; its signature would be <SAMP>odatstream&lt;charT,Traits&gt;&amp; operator&lt;&lt; (odatstream&lt;charT,Traits&gt;&amp;, const date&amp;)</SAMP>. Also, you would have two manipulator functions, one for arbitrary output streams and one for output date streams only, that is, <SAMP>basic_ostream&lt;charT,Traits&gt;&amp; sfmt (basic_ostream&lt;charT,Traits&gt;&amp;, const char*)</SAMP> and <SAMP>odatstream&lt;charT,Traits&gt;&amp; sfmt <br>(odatstream&lt;charT,Traits&gt;&amp;, const char*)</SAMP>. In each of the functions for date streams, you would replace those operations that are specific for output <I>date</I> streams.</P>
<P>This technique has the drawback of duplicating most of the inserter's code, which in turn might introduce maintenance problems. The advantage is that the runtime performance is likely to be improved.</P>

<HR>
<A HREF="17-3.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="17-5.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
