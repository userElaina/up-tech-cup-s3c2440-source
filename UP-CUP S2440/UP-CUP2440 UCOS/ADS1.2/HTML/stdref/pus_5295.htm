<HTML><HEAD><TITLE>push_heap</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="ptr_4059.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="que_0953.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>push_heap</H2>
<PRE><HR>Algorithms
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Places a new element into a heap.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;algorithm&gt;
template &lt;class RandomAccessIterator&gt;
  void
  <B>push_heap</B>(RandomAccessIterator first,
            RandomAccessIterator last);

template &lt;class RandomAccessIterator, class Compare&gt;
  void
  <B>push_heap</B>(RandomAccessIterator first,
            RandomAccessIterator last, Compare comp);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>A heap is a particular organization of elements in a range between two random access iterators <SAMP>[a, b)</SAMP>. Its two key properties are:</P>
<OL>
<LI><P><SAMP>*a</SAMP> is the largest element in the range.</P>
</LI>
<LI><P><SAMP>*a</SAMP> may be removed by the <B><I><A HREF="pop_9596.htm">pop_heap</A></I></B> <SAMP></SAMP>algorithm, or a new element may be added by the <B><I>push_heap</I></B> algorithm, in <SAMP>O(logN)</SAMP> time.</P>
</LI>
</OL>
<P>These properties make heaps useful as priority queues.</P>
<P>The <B><I>push_heap</I></B> algorithms uses the less than (<SAMP>&lt;</SAMP>) operator as the default comparison. As with all of the heap manipulation algorithms, an alternate comparison function can be specified.</P>
<P>The <B><I>push_heap</I></B> algorithm is used to add a new element to the heap. First, a new element for the heap is added to the end of a range. (For example, you can use the <B><I><A HREF="vec_0251.htm">vector</A></I></B> or <B><I><A HREF="deq_4164.htm">deque</A></I></B> member function <SAMP>push_back()</SAMP>to add the element to the end of either of those containers.) The <B><I>push_heap</I></B> algorithm assumes that the range <SAMP>[first, last - 1)</SAMP> is a valid heap. Then it properly positions the element in the location <SAMP>last - 1</SAMP> into its proper position in the heap, resulting in a heap over the range <SAMP>[first, last)</SAMP>.</P>
<P>Note that the <B><I>push_heap</I></B> algorithm does not place an element into the heap's underlying container. You must user another function to add the element to the end of the container before applying <B><I>push_heap</I></B>.</P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P>For <B><I>push_heap</I></B> at most <SAMP>log(last - first)</SAMP> comparisons are performed.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// heap_ops.cpp
//
 #include &lt;algorithm&gt;
 #include &lt;vector&gt;
 #include &lt;iostream&gt;
 using namespace std;

 int main(void)
 {
   int d1[4] = {1,2,3,4};
   int d2[4] = {1,3,2,4};  

   // Set up two vectors
   vector&lt;int&gt; v1(d1,d1 + 4), v2(d2,d2 + 4);

   // Make heaps
   make_heap(v1.begin(),v1.end());
   make_heap(v2.begin(),v2.end(),less&lt;int&gt;());
   // v1 = (4,x,y,z)  and  v2 = (4,x,y,z)
   // Note that x, y and z represent the remaining
   // values in the container (other than 4). 
   // The definition of the heap and heap operations 
   // does not require any particular ordering
   // of these values.

   // Copy both vectors to cout
   ostream_iterator&lt;int,char&gt; out(cout," ");
   copy(v1.begin(),v1.end(),out);
   cout &lt;&lt; endl;
   copy(v2.begin(),v2.end(),out);
   cout &lt;&lt; endl;

   // Now let's pop
   pop_heap(v1.begin(),v1.end());
   pop_heap(v2.begin(),v2.end(),less&lt;int&gt;());
   // v1 = (3,x,y,4) and v2 = (3,x,y,4)

   // Copy both vectors to cout
   copy(v1.begin(),v1.end(),out);
   cout &lt;&lt; endl;
   copy(v2.begin(),v2.end(),out);
   cout &lt;&lt; endl;
   
   // And push
   <B>push_heap</B>(v1.begin(),v1.end());
   <B>push_heap</B>(v2.begin(),v2.end(),less&lt;int&gt;());
   // v1 = (4,x,y,z) and v2 = (4,x,y,z)

   // Copy both vectors to cout
   copy(v1.begin(),v1.end(),out);
   cout &lt;&lt; endl;
   copy(v2.begin(),v2.end(),out);
   cout &lt;&lt; endl;

   // Now sort those heaps
   sort_heap(v1.begin(),v1.end());
   sort_heap(v2.begin(),v2.end(),less&lt;int&gt;());
   // v1 = v2 = (1,2,3,4)
      
   
// Copy both vectors to cout
   copy(v1.begin(),v1.end(),out);
   cout &lt;&lt; endl;
   copy(v2.begin(),v2.end(),out);
   cout &lt;&lt; endl;

   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
4 2 3 1
4 3 2 1
3 2 1 4
3 1 2 4
4 3 1 2
4 3 2 1
1 2 3 4
1 2 3 4 </PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you need to write:</P>
<P><SAMP>vector&lt;int, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="mak_0285.htm">make_heap</A></I></B>, <B><I><A HREF="pop_9596.htm">pop_heap</A></I></B>, <B><I><A HREF="sor_3899.htm">sort_heap</A></I></B></P>


<BR>
<HR>
<A HREF="ptr_4059.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="que_0953.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
