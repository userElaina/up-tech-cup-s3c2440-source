<HTML><HEAD><TITLE>4.3 Accessing a Locale's Facets</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="4-2.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="4-4.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>4.3 Accessing a Locale's Facets</H2>
<A NAME="idx105"><!></A>
<P>A locale object is like a container or a map, to be more precise, but it is indexed by type at compile time. The indexing operator, therefore, is not operator[], but rather the template operator &lt;&gt;. Access to the facet objects of a locale object is via two member function templates, use_facet and has_facet:</P>
<UL>
<PRE>
template &lt;class Facet&gt; const Facet&amp;     use_facet(const locale&amp;);
template &lt;class Facet&gt; bool             has_facet(const locale&amp;);</PRE>
</UL>
<A NAME="idx106"><!></A>
<P>The code below demonstrates how they are used. It is an example of the ctype facet's usage; all upper case letters of a string read from the standard input stream are converted to lower case letters and written to the standard output stream.</P>
<UL>
<PRE>
string in;
cin &gt;&gt; in;
if (has_facet&lt; ctype&lt;char&gt; &gt;(locale()))               //1
{  cout &lt;&lt; use_facet&lt; ctype&lt;char&gt; &gt;(locale())         //2
               .tolower(in.begin(),in.end());         //3
}</PRE>
</UL>
<TABLE CELLPADDING="3">

<TR VALIGN="top"><TD>//1</TD><TD>In the call to has_facet&lt;...&gt;(), the template argument chooses a base facet class. If no facet of this type is present in a locale object, has_facet returns false. 
<TR VALIGN="top"><TD>//2</TD><TD>The function template use_facet&lt;...&gt;() returns a reference to the locale's facet object of the specified base facet type. As locale objects are immutable, the reference stays valid throughout the lifetime of the locale object. If no facet of the specified type is present in the locale, <SAMP>use_facet</SAMP> throws a <SAMP>runtime_error</SAMP> exception.
<TR VALIGN="top"><TD>//3</TD><TD>The facet object's member function tolower() is called. It has the functionality of the C function tolower(); it converts all upper case letters in the string into lower case letters.
</TABLE>
<P>In this example, the call to <SAMP>has_facet</SAMP> is actually unnecessary because <SAMP>ctype&lt;char&gt;</SAMP> is a standard facet. Every locale always contains a complete complement of the standard facets, so <SAMP>has_facet&lt;ctype&lt;char&gt; &gt;</SAMP> always returns <SAMP>TRUE</SAMP>. However, a call to has_facet() can be useful when you are dealing with nonstandard facets, such as the <SAMP>mythical</SAMP> facet described earlier in this chapter, which may not be present in every locale.</P>
<A NAME="idx107"><!></A>
<P>When you are coding <SAMP>use_facet</SAMP> and <SAMP>has_facet</SAMP> calls, it is important that the facet type you specify as the template parameter is a base facet type, and not a derived facet type. The following is an error:</P>
<UL>
<PRE>
locale loc;
const numpunct_byname&lt;char&gt; &amp;np =             // Error, use_facet 
      use_facet&lt;numpunct_byname&lt;char&gt; &gt;(loc); // instantiated on 
                                              // a non-base facet
                                              // type</PRE>
</UL>
<P>Depending on the facet type, and on your compiler, this will probably cause a compile-time error. If it does not, it may result in unpredictable runtime behavior. The <SAMP>use_facet</SAMP> call returns the facet that occupies the slot for the type <SAMP>numpunct_byname&lt;char&gt;</SAMP>. But in fact, as described earlier, this is the same as the slot for the base facet type, <SAMP>numpunct&lt;char&gt;</SAMP>. So the above code may cause <SAMP>np</SAMP> to be initialized to a reference to an object that is not, in fact, of type <SAMP>numpunct_byname&lt;char&gt;</SAMP>.</P>
<P>To avoid errors like this, make sure that you only instantiate <SAMP>use_facet</SAMP> and <SAMP>has_face</SAMP> on base facet types, that is, on facet types that contain a static <SAMP>locale::id</SAMP> member.</P>
<UL>
<PRE>
locale loc;
const numpunct&lt;char&gt; &amp;np =                      // Correct
      use_facet&lt;numpunct&lt;char&gt; &gt;(loc);</PRE>
</UL>

<HR>
<A HREF="4-2.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="4-4.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
