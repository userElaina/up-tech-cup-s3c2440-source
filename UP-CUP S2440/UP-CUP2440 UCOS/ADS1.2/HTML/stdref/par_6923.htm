<HTML><HEAD><TITLE>partial_sum</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="par_1563.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="par_0264.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>partial_sum</H2>
<PRE><HR>Generalized Numeric Operation
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Complexity">Complexity</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Calculates successive partial sums of a range of values.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;numeric&gt;
template &lt;class InputIterator, class OutputIterator&gt;
OutputIterator <B>partial_sum</B> (InputIterator first,
                            InputIterator last,
                            OutputIterator result);

template &lt;class InputIterator,
          class OutputIterator,
          class BinaryOperation&gt;
OutputIterator <B>partial_sum</B> (InputIterator first,
                            InputIterator last,
                            OutputIterator result,
                            BinaryOperation binary_op);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>partial_sum</I></B> algorithm creates a new sequence in which every element is formed by adding all the values of the previous elements, or, in the second form of the algorithm, by applying the operation <SAMP>binary_op</SAMP> successively on every previous element. That is, <B><I>partial_sum</I></B> assigns to every iterator <SAMP>i</SAMP> in the range <SAMP>[result,  result  +  (last - first))</SAMP> a value equal to:</P>
<UL>
<PRE>((...(*first + *(first + 1)) + ... ) + 
      *(first + (i - result)))</PRE>

</UL>
<P> or, in the second version of the algorithm:</P>
<UL>
<PRE>binary_op(binary_op(..., binary_op (*first, 
          *(first + 1)),...),*(first + (i - result)))</PRE>

</UL>
<P>For instance, applying <B><I>partial_sum</I></B> to (1,2,3,4,) yields (1,3,6,10).</P>
<P>The <B><I>partial_sum</I></B> algorithm returns <SAMP>result</SAMP> <SAMP>+ (last - first)</SAMP>.</P>
<P>If <SAMP>result</SAMP> is equal to <SAMP>first</SAMP>, the elements of the new sequence successively replace the elements in the original sequence, effectively turning <B><I>partial_sum</I></B> into an inplace transformation. </P>

<A NAME="Complexity"><H3>Complexity</H3></A>
<P>Exactly <SAMP>(last - first) - 1</SAMP> applications of the default <SAMP>+</SAMP> operator or <SAMP>binary_op</SAMP> are performed.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// partsum.cpp
//
 #include &lt;numeric&gt;   //for accumulate
 #include &lt;vector&gt;    //for vector
 #include &lt;functional&gt; //for times
 #include &lt;iostream&gt;
 using namespace std;

 int main()
 {
   //Initialize a vector using an array of ints
   int d1[10] = {1,2,3,4,5,6,7,8,9,10};
   vector&lt;int&gt; v(d1, d1+10);

   //Create an empty vectors to store results
   vector&lt;int&gt; sums((size_t)10), prods((size_t)10);

   //Compute partial_sums and partial_products
   <B>partial_sum</B>(v.begin(), v.end(), sums.begin());
   <B>partial_sum</B>(v.begin(), v.end(), prods.begin(),
               times&lt;int&gt;());
   //Output the results
   cout &lt;&lt; "For the series: " &lt;&lt; endl &lt;&lt; "     ";
   copy(v.begin(),v.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl &lt;&lt; endl;

   cout &lt;&lt; "The partial sums: " &lt;&lt; endl &lt;&lt; "     " ;
   copy(sums.begin(),sums.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt;" should each equal (N*N + N)/2" &lt;&lt; endl &lt;&lt; endl;

   cout &lt;&lt; "The partial products: " &lt;&lt; endl &lt;&lt; "     ";
   copy(prods.begin(),prods.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; " should each equal N!" &lt;&lt; endl;

   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
For the series:
  1 2 3 4 5 6 7 8 9 10
The partial sums:
  1 3 6 10 15 21 28 36 45 55  should each equal (N*N + N)/2
The partial products:
  1 2 6 24 120 720 5040 40320 362880 3628800  should each equal N!</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, then you always need to include the <SAMP>Allocator</SAMP> template argument. For instance, you need to write:</P>
<P><SAMP>vector&lt;int, allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>


<BR>
<HR>
<A HREF="par_1563.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="par_0264.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
