<HTML><HEAD><TITLE>7.1 The deque Data Abstraction</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="7.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="7-2.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>7.1 The deque Data Abstraction</H2>
<A NAME="idx117"><!></A>
<P>The name <I>deque</I> is short for <I>double-ended queue</I>, and is pronounced like <I>deck</I>. Traditionally, the term is used to describe any data structure that permits both insertions and removals from either the front or the back of a collection. The <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B> container class permits this and much more. In fact, the capabilities of the <B><I>deque</I></B> data structure are almost a union of those provided by the <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B> and <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B> classes.</P>
<P>Like a <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B>, the <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B> is an indexed collection. Values can be accessed by subscript, using the position within the collection as a key. This capability is not provided by the <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B> class.</P>
<P>Like a <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B>, however, values can be efficiently added either to the front or to the back of a <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B>. This capability is provided only in part by the vector class.</P>
<P>As with both the <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B> and <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B> classes, insertions can be made into the middle of the sequence held by a <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B>. Such insertion operations are not as efficient as with a <B><I>list</I></B>, but slightly more efficient that they are in a <B><I>vector</I></B>.</P>
<P>In short, a <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B> can often be used in situations that require a <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B> and in situations that require a <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B>. Often, using a <B><I>deque</I></B> in place of either a <B><I>vector</I></B> or a <B><I>list</I></B> results in faster programs. To determine which data structure should be used, you can refer to the set of questions described in <A HREF="4-2.htm">Section 4.2</A></P>

<A NAME="711"><H3>7.1.1 Include Files</H3></A>
<A NAME="idx118"><!></A>
<P>The <SAMP>deque</SAMP> header file must appear in all programs that use the <B><I><A HREF="../../stdref/deq_4164.htm">deque</A></I></B> datatype:</P>
<UL>
<PRE>
# include &lt;deque&gt;</PRE>
</UL>

<HR>
<A HREF="7.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="7-2.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
