<HTML><HEAD><TITLE>21.1 Overview</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="21.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="21-2.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>21.1 Overview</H2>
<A NAME="idx431"><!></A>
<P>A new feature of the Standard C++ Library is an organized mechanism for describing the characteristics of the fundamental types provided in the execution environment. In older C and C++ libraries, these characteristics were often described by large collections of symbolic constants. For example, the smallest representable value that could be maintained in a character would be found in the constant named <SAMP>CHAR_MIN</SAMP>; the similar constant for a <SAMP>short</SAMP> would be known as <SAMP>SHRT_MIN</SAMP>; a float would be <SAMP>FLT_MIN</SAMP>, and so on.</P>
<A NAME="idx432"><!></A>
<P>The template class <B><I><A HREF="../../stdref/num_5679.htm">numeric_limits</A></I></B> provides a new and uniform way of representing this information for all numeric types. Instead of using a different symbolic name for each new datatype, the class defines a single static function, named <SAMP>min()</SAMP>, which returns the appropriate values. Specializations of this class then provide the exact value for each supported type. In this way, the smallest character value is found as the result of invoking the function <SAMP>numeric_limits&lt;char&gt;::min()</SAMP>, while the smallest floating point value is found by invoking <SAMP>numeric_limits&lt;float&gt;::min()</SAMP>, and so on.</P>
<P>Using a template class not only greatly reduces the number of symbolic names that need to be defined to describe the operating environment, but it also ensures consistency between the descriptions of the various types.</P>
<P>For the sake of compatibility, the <SAMP>numeric_limits</SAMP> mechanism is used as an addition to the symbolic constants used in older C++ libraries, rather than a strict replacement. Thus both mechanisms exist in parallel for the present. However, as the <SAMP>numeric_limits</SAMP> technique is more uniform and extensible, it should be expected that over time the older symbolic constants will become outmoded.</P>

<HR>
<A HREF="21.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="21-2.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
