<HTML><HEAD><TITLE>7.2 Input and Output Operators</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="7-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="7-3.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>7.2 Input and Output Operators</H2>
<A NAME="idx222"><!></A>
<P>Now let's try to do some simple input and output to the predefined streams. The iostreams facility defines shift operators for formatted stream input and output. The output operator is the shift operator <SAMP>operator&lt;&lt;()</SAMP>, also called the <I>inserter:</I></P>
<UL>
<PRE>
cout &lt;&lt; "result: " &lt;&lt; x &lt;&lt; '\n';</PRE>
</UL>
<A NAME="idx223"><!></A>
<P>Input is done through another shift operator <SAMP>operator&gt;&gt;()</SAMP>, often referred to as the <I>extractor</I>:</P>
<UL>
<PRE>
cin &gt;&gt; x &gt;&gt; y;</PRE>
</UL>
<P>Both operators are overloaded for all built-in types in C++, as well as for some of the types defined in the Standard C++ Library; for example, there are inserters and extractors for <SAMP>bool</SAMP>, <SAMP>char</SAMP>, <SAMP>int</SAMP>, <SAMP>long</SAMP>, <SAMP>float</SAMP>, <SAMP>double</SAMP>, <SAMP>string</SAMP>, etc. When you insert or extract a value to or from a stream, the C++ function overload resolution chooses the correct extractor operator, based on the value's type. This is what makes C++ iostreams type-safe and better than C stdio (see <A HREF="6.htm">Chapter 6</A>).</P>
<A NAME="idx224"><!></A>
<P>It is possible to print several units in one expression. For example:</P>
<UL>
<PRE>
cout &lt;&lt; "result: " &lt;&lt; x;</PRE>
</UL>
<P>is equivalent to:</P>
<UL>
<PRE>
(cout.operator&lt;&lt;("result: ")).operator&lt;&lt;(x);</PRE>
</UL>
<A NAME="idx225"><!></A>
<A NAME="fn1"><!></A>
<P>This is possible because each shift operator returns a reference to the respective stream. Almost all shift operators for built-in types are member functions of their respective stream class.<SUP><A HREF="endnotes.htm#fn1">1</A></SUP> They are defined according to the following patterns:</P>
<UL>
<PRE>
template&lt;class charT, class traits&gt;
basic_istream&lt;charT, traits&gt;&amp; 
basic_istream&lt;charT, traits&gt;::operator&gt;&gt;(type&amp; x)
{
  // read x
  return *this;
}</PRE>
</UL>
<P>and: </P>
<UL>
<PRE>
template&lt;class charT, class traits&gt;
basic_ostream&lt;charT, traits&gt;&amp;
basic_ostream&lt;charT, traits&gt;::operator&lt;&lt;(type x)
{
  // write x
  return *this;
}</PRE>
</UL>
<A NAME="idx226"><!></A>
<P>Simple input and output of units as shown above is useful, yet not sufficient in many cases. For example, you may want to vary the way output is formatted, or input is parsed. Iostreams allow you to control the formatting features of its input and output operators in many ways. With the standard iostreams, you can specify:</P>
<UL>
<LI><P>The width of an output field and the adjustment of the output within this field</P>
</LI>
<LI><P>The precision and format of floating point numbers, and whether or not the decimal point should always be included</P>
</LI>
<LI><P>Whether you want to skip white spaces when reading from an input stream</P>
</LI>
<LI><P>Whether integral values are displayed in decimal, octal or hexadecimal format</P>
</LI>
</UL>
<P>and many other formatting options. </P>
<P>There are two mechanisms that have an impact on formatting:</P>
<UL>
<LI><P>Formatting control through a stream's format state</P>
</LI>
<LI><P>Localization through a stream's locale</P>
</LI>
</UL>
<P>The stream's format state is the main means of format control, as we demonstrate in the next section.</P>

<HR>
<A HREF="7-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="7-3.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
