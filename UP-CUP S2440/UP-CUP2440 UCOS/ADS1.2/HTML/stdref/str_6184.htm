<HTML><HEAD><TITLE>strstream</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="str_8586.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="str_4456.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>strstream</H2>
<PRE><HR>                                <IMG SRC="images/inherits.gif" WIDTH=69 HEIGHT=11>basic_ostream
strstream<IMG SRC="images/inherits.gif" WIDTH=69 HEIGHT=11>basic_iostream                      <IMG SRC="images/inherits.gif" WIDTH=69 HEIGHT=11>basic_ios<IMG SRC="images/inherits.gif" WIDTH=69 HEIGHT=11>ios_base
                                <IMG SRC="images/inherits.gif" WIDTH=69 HEIGHT=11>basic_istream
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Interface">Interface</A></LI>
<LI><A HREF="#Types">Types</A></LI>
<LI><A HREF="#Constructors">Constructors</A></LI>
<LI><A HREF="#Destructors">Destructors</A></LI>
<LI><A HREF="#Member Functions">Member Functions</A></LI>
<LI><A HREF="#Examples">Examples</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>
<LI><A HREF="#Standards Conformance">Standards Conformance</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Reads and writes to an array in memory.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<UL><TABLE CELLPADDING=3>
<TR><TD><B>Data Types</B></TD></TR><TR><TD VALIGN=top><A HREF="#Typeschar_type">char_type</A><BR>
 <A HREF="#Typesint_type">int_type</A><BR>
 <A HREF="#Typesoff_type">off_type</A><BR>
 <A HREF="#Typespos_type">pos_type</A><BR>
</TD>
<TD VALIGN=top> <A HREF="#Typestraits">traits</A><BR>
</TD></TR>
</TABLE></UL>
<UL><TABLE CELLPADDING=3>
<TR><TD><B>Member Functions</B></TD></TR><TR><TD VALIGN=top><A HREF="#Member Functionsfreeze()">freeze()</A><BR>
 <A HREF="#Member Functionspcount()">pcount()</A><BR>
 <A HREF="#Member Functionsrdbuf()">rdbuf()</A><BR>
 <A HREF="#Member Functionsstr()">str()</A><BR>
</TD></TR>
</TABLE></UL>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;strstream&gt; 
class strstream
: public basic_iostream&lt;char&gt;</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The class <B><I>strstream</I></B> reads and writes to an array in memory. It uses a private <B><I><A HREF="str_4456.htm">strstreambuf</A></I></B> object to control the associated array. It inherits from <B><I><A HREF="bas_3138.htm">basic_iostream&lt;char&gt;</A></I></B> and therefore can use all the formatted and unformatted output and input functions.</P>
<P>This is a deprecated feature and might not be available in future versions.</P>

<A NAME="Interface"><H3>Interface</H3></A>
<UL>
<PRE>class strstream 
: public basic_iostream&lt;char&gt; {

 public:

  typedef char_traits&lt;char&gt;           traits;
    
  typedef char                       char_type;
  typedef typename traits::int_type  int_type;
  typedef typename traits::pos_type  pos_type;
  typedef typename traits::off_type  off_type;

  strstream();
  strstream(char *s, int n,
            ios_base::openmode = 
            ios_base::out | ios_base::in);

  void freeze(int freezefl = 1);
  int pcount() const;

  virtual ~strstream();
  strstreambuf *rdbuf() const;

  char *str();

};</PRE>

</UL>

<A NAME="Types"><H3>Types</H3></A>


<A NAME="Typeschar_type"></A><PRE><B>char_type</B></PRE>

<UL>
<P>The type <SAMP>char_type</SAMP> is a synonym of type <SAMP>char</SAMP>.</P>
</UL>



<A NAME="Typesint_type"></A><PRE><B>int_type</B></PRE>

<UL>
<P>The type <SAMP>int_type</SAMP> is a synonym of type <SAMP>traits::in_type</SAMP>.</P>
</UL>



<A NAME="Typesoff_type"></A><PRE><B>off_type</B></PRE>

<UL>
<P>The type <SAMP>off_type</SAMP> is a synonym of type <SAMP>traits::off_type</SAMP>.</P>
</UL>



<A NAME="Typespos_type"></A><PRE><B>pos_type</B></PRE>

<UL>
<P>The type <SAMP>pos_type</SAMP> is a synonym of type <SAMP>traits::pos_type</SAMP>.</P>
</UL>



<A NAME="Typestraits"></A><PRE><B>traits</B></PRE>

<UL>
<P>The type <SAMP>traits</SAMP> is a synonym of type <SAMP>char_traits&lt;char&gt;</SAMP>.</P>
</UL>


<A NAME="Constructors"><H3>Constructors</H3></A>


<PRE><B>strstream</B>();</PRE>

<UL>
<P>Constructs an object of class <SAMP>strstream</SAMP>, initializing the base class <SAMP>basic_iostream&lt;char&gt;</SAMP> with the associated <SAMP>strstreambuf</SAMP> object. The <SAMP>strstreambuf</SAMP> object is initialized by calling its default constructor <SAMP>strstreambuf()</SAMP>.</P>
</UL>



<PRE><B>strstream</B>(char* s, int n, ios_base::openmode
          mode = ios_base::out | ios_base::in); </PRE>

<UL>
<P>Constructs an object of class <SAMP>strstream</SAMP>, initializing the base class <SAMP>basic_iostream&lt;char&gt;</SAMP> with the associated <SAMP>strstreambuf</SAMP> object. The <SAMP>strstreambuf</SAMP> object is initialized by calling one of two constructors:</P>
</UL>

<UL><UL>
<LI><P>If <SAMP>mode &amp; app == 0</SAMP>, calls <SAMP>strstreambuf(s,n,s)</SAMP></P>
</LI>
<LI><P>Otherwise calls <SAMP>strstreambuf(s,n,s + ::strlen(s))</SAMP></P>
</LI>
</UL></UL>

<A NAME="Destructors"><H3>Destructors</H3></A>


<PRE>virtual <B>~strstream</B>();</PRE>

<UL>
<P>Destroys an object of class <SAMP>strstream</SAMP>. </P>
</UL>


<A NAME="Member Functions"><H3>Member Functions</H3></A>


<A NAME="Member Functionsfreeze()"></A><PRE>void 
<B>freeze</B>(int freezefl = 1); </PRE>

<UL>
<P>If the mode is dynamic, alters the freeze status of the dynamic array object as follows:</P>
</UL>

<UL><UL>
<LI><P>If <SAMP>freezefl</SAMP> is <SAMP>false</SAMP>, the function sets the freeze status to <SAMP>frozen</SAMP>.</P>
</LI>
<LI><P>Otherwise, it clears the freeze status.</P>
</LI>
</UL></UL>


<A NAME="Member Functionspcount()"></A><PRE>int 
<B>pcount</B>() const; </PRE>

<UL>
<P>Returns the size of the output sequence.</P>
</UL>



<A NAME="Member Functionsrdbuf()"></A><PRE>strstreambuf* 
<B>rdbuf</B>() const; </PRE>

<UL>
<P>Returns a pointer to the <SAMP>strstreambuf</SAMP> object associated with the stream.</P>
</UL>



<A NAME="Member Functionsstr()"></A><PRE>char* 
<B>str</B>();</PRE>

<UL>
<P>Returns a pointer to the underlying array object, which may be null.</P>
</UL>


<A NAME="Examples"><H3>Examples</H3></A>
<UL>
<PRE>//
// stdlib/examples/manual/strstream.cpp
//
#include&lt;strstream&gt;
using namespace std;

void main ( )
{
  using namespace std;

  // create a bi-directional strstream object 
  strstream inout;

  // output characters
  inout &lt;&lt; "Das ist die rede von einem man" &lt;&lt; endl;
  inout &lt;&lt; "C'est l'histoire d'un home" &lt;&lt; endl;
  inout &lt;&lt; "This is the story of a man" &lt;&lt; endl;

  char p[100];

  // extract the first line
  inout.getline(p,100);

  // output the first line to stdout
  cout &lt;&lt; endl &lt;&lt; "Deutch :" &lt;&lt; endl;
  cout &lt;&lt; p;

  // extract the second line
  inout.getline(p,100);

  // output the second line to stdout
  cout &lt;&lt; endl &lt;&lt; "Francais :" &lt;&lt; endl;
  cout &lt;&lt; p;

  // extract the third line
  inout.getline(p,100);

  // output the third line to stdout
  cout &lt;&lt; endl &lt;&lt; "English :" &lt;&lt; endl;
  cout &lt;&lt; p;
 
  // output the all content of the
  // strstream object to stdout
  cout &lt;&lt; endl &lt;&lt; endl &lt;&lt; inout.str();

}</PRE>

</UL>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="cha_3696.htm">char_traits</A></I></B>(3C++), <B><I><A HREF="ios_8948.htm">ios_base</A></I></B>(3C++), <B><I><A HREF="bas_6405.htm">basic_ios</A></I></B>(3C++), <B><I><A HREF="str_4456.htm">strstreambuf</A></I></B>(3C++), <B><I><A HREF="ist_1286.htm">istrstream</A></I></B>(3C++), <B><I><A HREF="ost_0723.htm">ostrstream</A></I></B>(3c++) </P>
<P><I>Working Paper for Draft Proposed International Standard for Information Systems--Programming Language C++, Annex D Compatibility features Section D.6.4</I></P>

<A NAME="Standards Conformance"><H3>Standards Conformance</H3></A>
<P>ANSI X3J16/ISO WG21 Joint C++ Committee</P>


<BR>
<HR>
<A HREF="str_8586.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="str_4456.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
