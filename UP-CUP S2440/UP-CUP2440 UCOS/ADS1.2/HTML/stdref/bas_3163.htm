<HTML><HEAD><TITLE>basic_filebuf</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="bac_0189.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="bas_9653.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>basic_filebuf</H2>
<PRE><HR>basic_filebuf<IMG SRC="images/inherits.gif" WIDTH=69 HEIGHT=11>basic_streambuf
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Interface">Interface</A></LI>
<LI><A HREF="#Types">Types</A></LI>
<LI><A HREF="#Constructors">Constructors</A></LI>
<LI><A HREF="#Destructors">Destructors</A></LI>
<LI><A HREF="#Member Functions">Member Functions</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>
<LI><A HREF="#Standards Conformance">Standards Conformance</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Class that associates the input or output sequence with a file.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<UL><TABLE CELLPADDING=3>
<TR><TD><B>Data Types</B></TD></TR><TR><TD VALIGN=top><A HREF="#Typeschar_type">char_type</A><BR>
 <A HREF="#Typesfilebuf">filebuf</A><BR>
 <A HREF="#Typesint_type">int_type</A><BR>
 <A HREF="#Typesoff_type">off_type</A><BR>
</TD>
<TD VALIGN=top> <A HREF="#Typespos_type">pos_type</A><BR>
 <A HREF="#Typestraits_type">traits_type</A><BR>
 <A HREF="#Typeswfilebuf">wfilebuf</A><BR>
</TD></TR>
</TABLE></UL>
<UL><TABLE CELLPADDING=3>
<TR><TD><B>Member Functions</B></TD></TR><TR><TD VALIGN=top><A HREF="#Member Functionsclose()">close()</A><BR>
 <A HREF="#Member Functionsis_open()">is_open()</A><BR>
 <A HREF="#Member Functionsopen()">open()</A><BR>
 <A HREF="#Member Functionsoverflow()">overflow()</A><BR>
 <A HREF="#Member Functionspbackfail()">pbackfail()</A><BR>
 <A HREF="#Member Functionsseekoff()">seekoff()</A><BR>
</TD>
<TD VALIGN=top> <A HREF="#Member Functionsseekpos()">seekpos()</A><BR>
 <A HREF="#Member Functionssetbuf()">setbuf()</A><BR>
 <A HREF="#Member Functionssync()">sync()</A><BR>
 <A HREF="#Member Functionsunderflow()">underflow()</A><BR>
 <A HREF="#Member Functionsxsputn()">xsputn()</A><BR>
</TD></TR>
</TABLE></UL>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;fstream&gt; 
template&lt;class charT, class traits = char_traits&lt;charT&gt; &gt;
class basic_filebuf
: public basic_streambuf&lt;charT, traits&gt;</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The template class <B><I>basic_filebuf</I></B> is derived from <B><I><A HREF="bas_0582.htm">basic_streambuf</A></I></B>. It associates the input or output sequence with a file. Each object of type <B><I>basic_filebuf&lt;charT, traits&gt;</I></B> controls two character sequences:</P>
<UL>
<LI><P>A character input sequence</P>
</LI>
<LI><P>A character output sequence</P>
</LI>
</UL>
<P>The restrictions on reading and writing a sequence controlled by an object of class <B><I>basic_filebuf&lt;charT,traits&gt;</I></B> are the same as for reading and writing with the Standard C library files.</P>
<P>If the file is not open for reading, the input sequence cannot be read. If the file is not open for writing, the output sequence cannot be written. A joint file position is maintained for both the input and output sequences.</P>
<P>A file has byte sequences, so the <B><I>basic_filebuf</I></B> class treats a file as the external source (or sink) byte sequence. In order to provide the contents of a file as wide character sequences, a wide-oriented file buffer called wfilebuf converts wide character sequences to multibytes character sequences (and vice versa) according to the current locale being used in the stream buffer. </P>

<A NAME="Interface"><H3>Interface</H3></A>
<UL>
<PRE>template&lt;class charT, class traits = char_traits&lt;charT&gt; &gt;
class basic_filebuf 
: public basic_streambuf&lt;charT, traits&gt; {

 public:

  typedef traits                       traits_type;
  typedef charT                        char_type;
  typedef typename traits::int_type    int_type;
  typedef typename traits::pos_type    pos_type;
  typedef typename traits::off_type    off_type;

  basic_filebuf();
  basic_filebuf(int fd);

  virtual ~basic_filebuf();

  bool is_open() const;
  basic_filebuf&lt;charT, traits&gt;* open(const char *s,
                                    ios_base::openmode,
                                    long protection = 0666);

  basic_filebuf&lt;charT, traits&gt;* open(int fd);
  basic_filebuf&lt;charT, traits&gt;* close();

 protected:

  virtual int      showmanyc();
  virtual int_type underflow();
  virtual int_type overflow(int_type c = traits::eof());
  virtual int_type pbackfail(int_type c = traits::eof());

  virtual basic_streambuf&lt;charT,traits&gt;* 
    setbuf(char_type *s,streamsize n);

  virtual pos_type seekoff(off_type off,
                           ios_base::seekdir way,
                           ios_base::openmode which =
                           ios_base::in | ios_base::out);

  virtual pos_type seekpos(pos_type sp,
                           ios_base::openmode which =
                           ios_base::in | ios_base::out);
  virtual int sync();
  virtual streamsize xsputn(const char_type* s, 
                            streamsize n);

};</PRE>

</UL>

<A NAME="Types"><H3>Types</H3></A>


<A NAME="Typeschar_type"></A><PRE><B>char_type</B></PRE>

<UL>
<P>The type <SAMP>char_type</SAMP> is a synonym for the template parameter <SAMP>charT</SAMP>.</P>
</UL>



<A NAME="Typesfilebuf"></A><PRE><B>filebuf</B></PRE>

<UL>
<P>The type <SAMP>filebuf</SAMP> is an instantiation of class <SAMP>basic_filebuf</SAMP> on type <SAMP>char</SAMP>:</P>
<P><SAMP>typedef basic_filebuf&lt;char&gt; filebuf;</SAMP></P>
</UL>



<A NAME="Typesint_type"></A><PRE><B>int_type</B></PRE>

<UL>
<P>The type <SAMP>int_type</SAMP> is a synonym of type <SAMP>traits::in_type</SAMP>.</P>
</UL>



<A NAME="Typesoff_type"></A><PRE><B>off_type</B></PRE>

<UL>
<P>The type <SAMP>off_type</SAMP> is a synonym of type <SAMP>traits::off_type</SAMP>.</P>
</UL>



<A NAME="Typespos_type"></A><PRE><B>pos_type</B></PRE>

<UL>
<P>The type <SAMP>pos_type</SAMP> is a synonym of type <SAMP>traits::pos_type</SAMP>.</P>
</UL>



<A NAME="Typestraits_type"></A><PRE><B>traits_type</B></PRE>

<UL>
<P>The type <SAMP>traits_type</SAMP> is a synonym for the template parameter <SAMP>traits</SAMP>.</P>
</UL>



<A NAME="Typeswfilebuf"></A><PRE><B>wfilebuf</B> </PRE>

<UL>
<P>The type <SAMP>wfilebuf</SAMP> is an instantiation of class <SAMP>basic_filebuf</SAMP> on type <SAMP>wchar_t</SAMP>:</P>
<P><SAMP>typedef basic_filebuf&lt;wchar_t&gt; wfilebuf;</SAMP></P>
</UL>


<A NAME="Constructors"><H3>Constructors</H3></A>


<PRE><B>basic_filebuf</B>();</PRE>

<UL>
<P>Constructs an object of class <SAMP>basic_filebuf&lt;charT,traits&gt;</SAMP>, initializing the base class with <SAMP>basic_streambuf&lt;charT,traits&gt;()</SAMP>.</P>
</UL>



<PRE><B>basic_filebuf</B>(int fd);</PRE>

<UL>
<P>Constructs an object of class <SAMP>basic_filebuf&lt;charT,traits&gt;</SAMP>, initializing the base class with <SAMP>basic_streambuf&lt;charT,traits&gt;()</SAMP>. It then calls <SAMP>open(fd)</SAMP> with file descriptor <SAMP>fd</SAMP>. This function is not described in the C++ standard, and is included as an extension to manipulate pipes, sockets, or other UNIX devices that can be accessed through file descriptor.</P>
</UL>


<A NAME="Destructors"><H3>Destructors</H3></A>


<PRE>virtual <B>~basic_filebuf</B>();</PRE>

<UL>
<P>Calls <SAMP>close()</SAMP> and destroys the object. </P>
</UL>


<A NAME="Member Functions"><H3>Member Functions</H3></A>


<A NAME="Member Functionsclose()"></A><PRE>basic_filebuf&lt;charT,traits&gt;* 
<B>close</B>();</PRE>

<UL>
<P>If <SAMP>is_open() == false</SAMP>, returns a null pointer. Otherwise, closes the file, and returns <SAMP>*this</SAMP>.</P>
</UL>



<A NAME="Member Functionsis_open()"></A><PRE>bool 
<B>is_open</B>() const; </PRE>

<UL>
<P>Returns <SAMP>true</SAMP> if the associated file is open.</P>
</UL>



<A NAME="Member Functionsopen()"></A><PRE>basic_filebuf&lt;charT,traits&gt;* 
<B>open</B>(const char* s, ios_base::openmode mode, 
   long protection = 0666); </PRE>

<UL>
<P>If <SAMP>is_open() == true</SAMP>, returns a null pointer. Otherwise opens the file, whose name is stored in the null-terminated byte-string <SAMP>s</SAMP>. The file open modes are given by their C-equivalent description (see the C function <SAMP>fopen</SAMP>):</P>
<UL>
<PRE>in                      "w"
in|binary               "rb"
out                     "w"
out|app                 "a"
out|binary              "wb"
out|binary|app          "ab"
out|in                  "r+"
out|in|app              "a+"
out|in|binary           "r+b"
out|in|binary|app       "a+b"
trunc|out               "w"
trunc|out|binary        "wb"
trunc|out|in            "w+"
trunc|out|in|binary     "w+b"</PRE>

</UL>
<P>The third argument, <SAMP>protection</SAMP>, is used as the file permission. It does not appear in the Standard C++ description of the function <SAMP>open</SAMP> and is included as an extension. It determines the file read/write/execute permissions under UNIX. It is more limited under DOS, since files are always readable and do not have special execute permission. If the <SAMP>open</SAMP> function fails, it returns a null pointer.</P>
</UL>



<PRE>basic_filebuf&lt;charT,traits&gt;*
<B>open</B>(int fd);</PRE>

<UL>
<P>Attaches the previously opened file, which is identified by its file descriptor <SAMP>fd</SAMP>, to the <SAMP>basic_filebuf</SAMP> object. This function is not described in the C++ standard, and is included as an extension in order to manipulate pipes, sockets, or other UNIX devices that can be accessed through file descriptors.</P>
</UL>



<A NAME="Member Functionsoverflow()"></A><PRE>int_type 
<B>overflow</B>(int_type c = traits::eof() ); </PRE>

<UL>
<P>If the output sequence has a put position available, and <SAMP>c</SAMP> is not <SAMP>traits::eof()</SAMP>, then writes <SAMP>c</SAMP> into it. If there is no position available, the function outputs the contents of the buffer to the associated file and then writes <SAMP>c</SAMP> at the new current put position. If the operation fails, the function returns <SAMP>traits::eof()</SAMP>. Otherwise it returns <SAMP>traits::not_eof(c)</SAMP>. In wide characters file buffer, <SAMP>overflow</SAMP> converts the internal wide characters to their external multibytes representation by using the <SAMP>locale::codecvt</SAMP> facet located in the locale object imbued in the stream buffer. </P>
</UL>



<A NAME="Member Functionspbackfail()"></A><PRE>int_type 
<B>pbackfail</B>(int_type c = traits::eof() ); </PRE>

<UL>
<P>Puts back the character designated by <SAMP>c</SAMP> into the input sequence. If <SAMP>traits::eq_int_type(c,traits::eof())</SAMP> returns <SAMP>true</SAMP>, moves the input sequence one position backward. If the operation fails, the function returns <SAMP>traits::eof()</SAMP>. Otherwise it returns <SAMP>traits::not_eof(c)</SAMP>.</P>
</UL>



<A NAME="Member Functionsseekoff()"></A><PRE>pos_type 
<B>seekoff</B>(off_type off, ios_base::seekdir way,
        ios_base::openmode which = ios_base::in |
        ios_base::out); </PRE>

<UL>
<P>If the open mode is <SAMP>in | out</SAMP>, alters the stream position of both the input and the output sequence. If the open mode is <SAMP>in</SAMP>, alters the stream position of only the input sequence, and if it is <SAMP>out</SAMP>, alters the stream position of only the output sequence. The new position is calculated by combining the two parameters <SAMP>off</SAMP> (displacement) and <SAMP>way</SAMP> (reference point). If the current position of the sequence is invalid before repositioning, the operation fails and the return value is <SAMP>pos_type(off_type(-1))</SAMP>. Otherwise the function returns the current new position. File buffers using <SAMP>locale::codecvt</SAMP> facet and performing state dependent conversion support only seeking to the beginning of the file, to the current position, or to a position previously obtained by a call to one of the iostreams seeking functions.</P>
</UL>



<A NAME="Member Functionsseekpos()"></A><PRE>pos_type 
<B>seekpos</B>(pos_type sp,ios_base::openmode      which = ios_base::in | ios_base::out); </PRE>

<UL>
<P>If the open mode is <SAMP>in | out</SAMP>, alters the stream position of both the input and the output sequence. If the open mode is <SAMP>in</SAMP>, alters the stream position of only the input sequence, and if it is <SAMP>out</SAMP>, alters the stream position of only the output sequence. If the current position of the sequence is invalid before repositioning, the operation fails and the return value is <SAMP>pos_type(off_type(-1))</SAMP>. Otherwise the function returns the current new position. File buffers using <SAMP>locale::codecvt</SAMP> facet performing state dependent conversion, only support seeking to the beginning of the file, to the current position, or to a position previously obtained by a call to one of the iostreams seeking functions.</P>
</UL>



<A NAME="Member Functionssetbuf()"></A><PRE>basic_filebuf&lt;charT,traits&gt;* 
<B>setbuf</B>(char_type*s, streamsize n); </PRE>

<UL>
<P>If <SAMP>s</SAMP> is not a null pointer, outputs the content of the current buffer to the associated file, then deletes the current buffer and replaces it by <SAMP>s</SAMP>. Otherwise resizes the current buffer to size <SAMP>n</SAMP> after outputting its contents to the associated file, if necessary.</P>
</UL>



<A NAME="Member Functionssync()"></A><PRE>int 
<B>sync</B>();</PRE>

<UL>
<P>Synchronizes the contents of the external file, with its image maintained in memory by the file buffer. If the function fails, it returns <SAMP>-1</SAMP>; otherwise it returns <SAMP>0</SAMP>.</P>
</UL>



<A NAME="Member Functionsunderflow()"></A><PRE>int_type 
<B>underflow</B>();</PRE>

<UL>
<P>If the input sequence has a read position available, returns the contents of this position. Otherwise fills up the buffer by reading characters from the associated file, and if it succeeds, returns the contents of the new current position. The function returns <SAMP>traits::eof()</SAMP> to indicate failure. In wide characters file buffer, <SAMP>underflow</SAMP> converts the external multibytes characters to their wide character representation by using the <SAMP>locale::codecvt</SAMP> facet located in the locale object imbued in the stream buffer. </P>
</UL>



<A NAME="Member Functionsxsputn()"></A><PRE>streamsize 
<B>xsputn</B>(const char_type* s, streamsize n); </PRE>

<UL>
<P>Writes up to <SAMP>n</SAMP> characters to the output sequence. The characters written are obtained from successive elements of the array whose first element is designated by <SAMP>s</SAMP>. The function returns the number of characters written.</P>
</UL>


<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// stdlib/examples/manual/filebuf.cpp
//
#include&lt;iostream&gt;
#include&lt;fstream&gt;

void main ( )
{
  using namespace std;

  // create a read/write file-stream object on tiny char
  // and attach it to the file "filebuf.out"
  ofstream out("filebuf.out",ios_base::in |
                ios_base::out);

  // tie the istream object to the ofstream object
  istream in(out.rdbuf());   

  // output to out
  out &lt;&lt; "Il errait comme un ame en peine";
 
  // seek to the beginning of the file
  in.seekg(0);

  // output in to the standard output
  cout &lt;&lt; in.rdbuf() &lt;&lt; endl;

  // close the file "filebuf.out"
  out.close();

  // open the existing file "filebuf.out"
  // and truncate it
  out.open("filebuf.out",ios_base::in | ios_base::out |
           ios_base::trunc);

  // set the buffer size
  out.rdbuf()-&gt;pubsetbuf(0,4096);
 
  // open the source code file
  ifstream ins("filebuf.cpp");

  //output it to filebuf.out
  out &lt;&lt; ins.rdbuf();

  // seek to the beginning of the file
  out.seekp(0);

  // output the all file to the standard output
  cout &lt;&lt; out.rdbuf(); 
}</PRE>

</UL>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I> <A HREF="cha_3696.htm">char_traits</A></I></B>(3C++),<B><I><A HREF="ios_8948.htm">ios_base</A></I></B>(3C++), <B><I><A HREF="bas_6405.htm">basic_ios</A></I></B>(3C++), <B><I><A HREF="bas_0582.htm">basic_streambuf</A></I></B>(3C++), <B><I><A HREF="bas_7446.htm">basic_ifstream</A></I></B>(3C++), <B><I><A HREF="bas_4928.htm">basic_ofstream</A></I></B>(3C++), <B><I><A HREF="bas_9653.htm">basic_fstream</A></I></B>(3C++) </P>
<P><I>Working Paper for Draft Proposed International Standard for Information Systems--Programming Language C++, Section 27.8.1.1</I> </P>

<A NAME="Standards Conformance"><H3>Standards Conformance</H3></A>
<P>ANSI X3J16/ISO WG21 Joint C++ Committee</P>


<BR>
<HR>
<A HREF="bac_0189.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="bas_9653.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
