<HTML><HEAD><TITLE>13.2 Initialization Algorithms</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="13-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="13-3.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>13.2 Initialization Algorithms</H2>

<A NAME="idx244"><!></A>
<P>The first set of algorithms we cover are used chiefly, although not exclusively, to initialize a newly created sequence with certain values. The Standard C++ Library provides several initialization algorithms. The initialization algorithms all overwrite every element in a container. The difference between the algorithms is the source for the values used in initialization. The <SAMP>fill()</SAMP> algorithm repeats a single value, the <SAMP>copy()</SAMP> algorithm reads values from a second container, and the <SAMP>generate()</SAMP> algorithm invokes a function for each new value. In our discussion we provide examples of how to apply these algorithms, and suggest how to choose one algorithm over another.</P>
<BLOCKQUOTE><HR>
<B>NOTE: The sample programs described in the following sections are in the file alg1.cpp. We generally omit output statements from the descriptions of the programs provided here, although they are included in the executable versions.
</B><HR></BLOCKQUOTE>

<A NAME="1321"><H3>13.2.1 Fill a Sequence with An Initial Value</H3></A>
<A NAME="idx245"><!></A>
<P>The <SAMP>fill()</SAMP> and <SAMP>fill_n()</SAMP> algorithms are used to initialize or reinitialize a sequence with a fixed value. Their declarations are as follows:</P>
<UL>
<PRE>
void fill (ForwardIterator first, ForwardIterator last, const T&amp;);
void fill_n (OutputIterator, Size, const T&amp;);</PRE>
</UL>
<A NAME="idx246"><!></A>
<P>The example program illustrates several uses of the algorithm:</P>
<UL>
<PRE>
void fill_example ()
   // illustrates the use of the fill algorithm
   // see alg1.cpp for complete source code
{</PRE>
<A NAME="idx247"><!></A>
<PRE>      // example 1, fill an array with initial values
   char buffer[100], * bufferp = buffer;
   fill (bufferp, bufferp + 100, '\0');
   fill_n (bufferp, 10, 'x');
</PRE>
<A NAME="idx248"><!></A>
<PRE>      // example 2, use fill to initialize a list
   list&lt;string&gt; aList(5, "nothing");
   fill_n (inserter(aList, aList.begin()), 10, "empty");
</PRE>
<A NAME="idx249"><!></A>
<PRE>      // example 3, use fill to overwrite values in list
   fill (aList.begin(), aList.end(), "full");
</PRE>
<A NAME="idx250"><!></A>
<PRE>      // example 4, fill in a portion of a collection
   vector&lt;int&gt; iVec(10);
   generate (iVec.begin(), iVec.end(), iotaGen(1));
   vector&lt;int&gt;::iterator &amp; seven = 
         find(iVec.begin(), iVec.end(), 7);
   fill (iVec.begin(), seven, 0);
}</PRE>
</UL>
<P>In example 1, an array of character values is declared. The <SAMP>fill()</SAMP> algorithm is invoked to initialize each location in this array with a null character value. The first 10 positions are then replaced with the character <SAMP>'x'</SAMP> by using the algorithm <SAMP>fill_n()</SAMP>. Note that the <SAMP>fill()</SAMP> algorithm requires both starting and past-end <B><I><A HREF="../../stdref/ite_5554.htm">iterator</A></I></B>s as arguments, whereas the <SAMP>fill_n()</SAMP> algorithm uses a starting <B><I>iterator</I></B> and a count.</P>
<A NAME="idx251"><!></A>
<P>By applying an <I>insert iterator</I> (<A HREF="2-4.htm">Section 2.4</A>), example 2 illustrates how the <SAMP>fill_n()</SAMP> algorithm can be used to initialize a variable length container, such as a <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B>. In this case the <B><I>list</I></B> initially contains five elements, all holding the text <SAMP>"nothing"</SAMP>. The call on <SAMP>fill_n()</SAMP> then inserts ten instances of the string <SAMP>"empty"</SAMP>. The resulting <B><I>list</I></B> contains fifteen elements.</P>
<P>Examples 3 and 4 illustrate how <SAMP>fill()</SAMP> can be used to change the values in an existing container. In example 3 each of the fifteen elements in the <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B> created in example 2 is replaced by the string <SAMP>"full"</SAMP>. </P>
<P>Example 4 overwrites only a portion of a <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B>. Using the algorithm <SAMP>generate()</SAMP> and the function object <B><I>iotaGen</I></B> (see <A HREF="3-3.htm">Section 3.3</A> and <A HREF="13-2.htm#1323">Section 13.2.3</A>), a vector is initialized to the values <SAMP>1 2 3 ... 10</SAMP>. The <SAMP>find()</SAMP> algorithm (see <A HREF="13-3.htm#1331">Section 13.3.1</A>) is used to locate the position of the element 7, saving the location in an iterator appropriate for the <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B> datatype. The <SAMP>fill()</SAMP> call then replaces all values up to, but not including, the <SAMP>7</SAMP> entry with the value <SAMP>0</SAMP>. The resulting vector has six zero fields, followed by the values <SAMP>7</SAMP>, <SAMP>8</SAMP>, <SAMP>9</SAMP> and <SAMP>10</SAMP>.</P>
<P>The <SAMP>fill()</SAMP> and <SAMP>fill_n()</SAMP> algorithm can be used with all the container classes contained in the Standard C++ Library, although insert iterators must be used with ordered containers, such as <B><I><A HREF="../../stdref/set_1649.htm">set</A></I></B>s.</P>

<A NAME="1322"><H3>13.2.2 Copy One Sequence Into Another Sequence</H3></A>
<A NAME="idx252"><!></A>
<P>The algorithms <SAMP>copy()</SAMP> and <SAMP>copy_backward()</SAMP> are versatile functions that can be used for a number of different purposes, and are probably the most commonly executed algorithms in the Standard C++ Library. The declarations for these algorithms are as follows:</P>
<UL>
<PRE>
OutputIterator copy (InputIterator first, InputIterator last, 
         OutputIterator result);

BidirectionalIterator copy_backward 
   (BidirectionalIterator first, BidirectionalIterator last,
    BidirectionalIterator result);</PRE>
</UL>
<A NAME="idx253"><!></A>
<P>The result returned by the <SAMP>copy()</SAMP> function is a pointer to the end of the copied sequence.   However, the result of one <SAMP>copy()</SAMP> operation can be used as a starting iterator in a subsequent <SAMP>copy()</SAMP> to make a <I>catenation</I> of values.</P>
<P>Uses of the copy algorithm include:</P>
<UL>
<LI><P>Duplicating an entire sequence by copying into a new sequence</P>
</LI>
<LI><P>Creating sub-sequences of an existing sequence</P>
</LI>
<LI><P>Adding elements into a sequence</P>
</LI>
<LI><P>Copying a sequence from input or to output</P>
</LI>
<LI><P>Converting a sequence from one form into another</P>
</LI>
</UL>
<A NAME="idx254"><!></A>
<P>The uses of the copy algorithm are illustrated in the following sample program:</P>
<UL>
<PRE>
void copy_example()</PRE>
<A NAME="idx255"><!></A>
<PRE>   // illustrates the use of the copy algorithm
   // see alg1.cpp for complete source code

{
   char * source = "reprise";
   char * surpass = "surpass";
   char buffer[120], * bufferp = buffer;
</PRE>
<A NAME="idx256"><!></A>
<PRE>      // example 1, a simple copy
   copy (source, source + strlen(source) + 1, bufferp);
</PRE>
<A NAME="idx257"><!></A>
<PRE>      // example 2, self copies
   copy (bufferp + 2, bufferp + strlen(buffer) + 1, bufferp);
   int buflen = strlen(buffer) + 1;
   copy_backward (bufferp, bufferp + buflen, bufferp + buflen + 3);
   copy (surpass, surpass + 3, bufferp);
</PRE>
<A NAME="idx258"><!></A>
<PRE>      // example 3, copy to output
   copy (bufferp, bufferp + strlen(buffer), 
            ostream_iterator&lt;char,char&gt;(cout));
   cout &lt;&lt; endl;
</PRE>
<A NAME="idx259"><!></A>
<PRE>      // example 4, use copy to convert type
   list&lt;char&gt; char_list;
   copy (bufferp, bufferp + strlen(buffer), 
            inserter(char_list, char_list.end()));
   char * big = "big ";
   copy (big, big + 4, inserter(char_list, char_list.begin()));

   char buffer2 [120], * buffer2p = buffer2;
   * copy (char_list.begin(), char_list.end(), buffer2p) = '\0';
   cout &lt;&lt; buffer2 &lt;&lt; endl;
}</PRE>
</UL>
<P>In example 1, the first call on <SAMP>copy()</SAMP> simply copies the string pointed to by the variable <SAMP>source</SAMP> into a buffer, resulting in the buffer containing the text <SAMP>"reprise"</SAMP>. Note that the ending position for the copy is one past the terminating null character, thus ensuring the null character is included in the copy operation.</P>
<P>The <SAMP>copy()</SAMP> operation is specifically designed to permit <I>self-copies</I>, which are copies of a sequence onto itself, as long as the destination <B><I><A HREF="../../stdref/ite_5554.htm">iterator</A></I></B> does not fall within the range formed by the source <B><I>iterator</I></B>s. This is illustrated by example 2. Here the copy begins at position 2 of the buffer and extends to the end, copying characters into the beginning of the buffer. This results in the buffer holding the value <SAMP>"prise"</SAMP>. </P>
<P>The second half of example 2 illustrates the use of the <SAMP>copy_backward()</SAMP> algorithm. This function performs the same task as the <SAMP>copy()</SAMP> algorithm, but moves elements from the end of the sequence first, progressing to the front of the sequence. If you think of the argument as a string, characters are moved starting from the right and progressing to the left. In this case the result is that <SAMP>buffer</SAMP> is assigned the value <SAMP>"priprise"</SAMP>. The first three characters are then modified by another <SAMP>copy()</SAMP> operation to the values <SAMP>"sur"</SAMP>, resulting in <SAMP>buffer</SAMP> holding the <SAMP>value "surprise"</SAMP>.</P>
<BLOCKQUOTE><HR>
<B>NOTE: In the copy_backwards algorithm, note that it is the order of transfer that is backwards, not the elements themselves; the relative placement of moved values in the target is the same as in the source.
</B><HR></BLOCKQUOTE>
<P>Example 3 illustrates <SAMP>copy()</SAMP> being used to move values to an output stream (see <A HREF="2-3.htm#232">Section 2.3.2</A>). The target in this case is an <SAMP>ostream_iterator</SAMP> generated for the output stream <SAMP>cout</SAMP>. A similar mechanism can be used for input values. For example, a simple mechanism to copy every word in the input stream into a <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B> is the following call on <SAMP>copy()</SAMP>:</P>
<UL>
<PRE>
list&lt;string&gt; words;
istream_iterator&lt;string, char&gt; in_stream(cin), eof;

copy(in_stream, eof, inserter(words, words.begin()));</PRE>
</UL>
<P>This technique is used in the spell checking program described in <A HREF="8-3.htm">Section 8.3</A>.</P>
<A NAME="idx260"><!></A>
<P>Copy can also be used to convert from one type of stream to another. For example, the call in example 4 of the sample program copies the characters held in the buffer one by one into a <B><I><A HREF="../../stdref/lis_3222.htm">list</A></I></B> of characters. The call on <SAMP>inserter()</SAMP> creates an insert iterator, used to insert values into the <B><I>list</I></B>. The first call on <SAMP>copy()</SAMP> places the string <SAMP>surprise</SAMP>, created in example 2, into the <B><I>list</I></B>. The second call on <SAMP>copy()</SAMP> inserts the values from the string <SAMP>"big"</SAMP> onto the front of the <B><I>list</I></B>, resulting in the <B><I>list</I></B> containing the characters <SAMP>big surprise</SAMP>. The final call on <SAMP>copy()</SAMP> illustrates the reverse process, copying characters from a <B><I>list</I></B> back into a character buffer.</P>

<A NAME="1323"><H3>13.2.3 Initialize a Sequence with Generated Values</H3></A>
<A NAME="idx261"><!></A>
<P>A <I>generator</I> is a function that returns a series of values on successive invocations. Probably the generator you are most familiar with is a random number generator. However, generators can be constructed for a variety of different purposes, including initializing sequences.</P>
<A NAME="idx262"><!></A>
<P>Like <SAMP>fill()</SAMP> and <SAMP>fill_n()</SAMP>, the algorithms <SAMP>generate()</SAMP> and <SAMP>generate_n()</SAMP> are used to initialize or reinitialize a sequence. However, instead of a fixed argument, these algorithms draw their values from a generator. The declarations of these algorithms are as follows:</P>
<UL>
<PRE>
void generate (ForwardIterator, ForwardIterator, Generator);
void generate_n (OutputIterator, Size, Generator);</PRE>
</UL>
<A NAME="idx263"><!></A>
<P>Our example program shows several uses of the generate algorithm to initialize a sequence:</P>
<UL>
<PRE>
string generateLabel () {
   // generate a unique label string of the form L_ddd
   // see alg1.cpp for complete source code
   static int lastLabel = 0;
   char labelBuffer[80];
   ostrstream ost(labelBuffer, 80);
   ost &lt;&lt; "L_" &lt;&lt; lastLabel++ &lt;&lt; '\0';
   return string(labelBuffer);
}

void generate_example ()
   // illustrate the use of the generate and generate_n algorithms
{</PRE>
<A NAME="idx264"><!></A>
<PRE>      // example 1, generate a list of label values
   list&lt;string&gt; labelList;
   generate_n (inserter(labelList, labelList.begin()), 
         4, generateLabel);
</PRE>
<A NAME="idx265"><!></A>
<PRE>      // example 2, generate an arithmetic progression
   vector&lt;int&gt; iVec(10);
   generate (iVec.begin(), iVec.end(), iotaGen(2));
   generate_n (iVec.begin(), 5, iotaGen(7));
   }</PRE>
</UL>
<A NAME="idx266"><!></A>
<P>A generator can be constructed as a simple function that <I>remembers</I> information about its previous history in one or more static variables. An example is shown in the beginning of the example program, where the function <SAMP>generateLabel()</SAMP> is described. This function creates a sequence of unique string labels, such as might be needed by a compiler. Each invocation on the function <SAMP>generateLabel()</SAMP> results in a new string of the form <SAMP>L_ddd</SAMP>, each with a unique digit value. Because the variable named <SAMP>lastLabel</SAMP> is declared as <SAMP>static</SAMP>, its value is remembered from one invocation to the next. The first example of the sample program illustrates how this function might be used in combination with the <SAMP>generate_n()</SAMP> algorithm to initialize a list of four label values.</P>
<A NAME="idx267"><!></A>
<P>As we described in <A HREF="3.htm">Chapter 3</A>, a function is any object that will respond to the function call operator. Using this definition, classes can easily be constructed as functions. The class <B><I>iotaGen</I></B>, is an example (see <A HREF="3-3.htm">Section 3.3</A>). The <B><I>iotaGen</I></B> function object creates a generator for an integer arithmetic sequence. In the second example in the sample program, this sequence is used to initialize a <B><I><A HREF="../../stdref/vec_0251.htm">vector</A></I></B> with the integer values 2 through 11. A call on <SAMP>generate_n()</SAMP> is then used to overwrite the first 5 positions of the <B><I>vector</I></B> with the values 7 through 11, resulting in the <B><I>vector</I></B> <SAMP>7 8 9 10 11 7 8 9 10 11</SAMP>.</P>

<A NAME="1324"><H3>13.2.4 Swap Values from Two Parallel Ranges</H3></A>
<A NAME="idx268"><!></A>
<P>The template function <SAMP>swap()</SAMP> can be used to exchange the values of two objects of the same type. It has the following definition:</P>
<UL>
<PRE>
template &lt;class T&gt; void swap (T&amp; a, T&amp; b)
{
   T temp(a);
   a = b;
   b = temp;
}</PRE>
</UL>
<A NAME="idx269"><!></A>
<P>The function is generalized to <B><I><A HREF="../../stdref/ite_5554.htm">iterator</A></I></B>s in the function named <SAMP>iter_swap().</SAMP> The algorithm <SAMP>swap_ranges()</SAMP> extends this to entire sequences. The values denoted by the first sequence are exchanged with the values denoted by a second, parallel sequence. The description of the <SAMP>swap_ranges()</SAMP> algorithm is as follows:</P>
<UL>
<PRE>
ForwardIterator swap_ranges 
   (ForwardIterator first, ForwardIterator last, 
         ForwardIterator first2);</PRE>
</UL>
<P>The second range is described only by a starting <B><I><A HREF="../../stdref/ite_5554.htm">iterator</A></I></B>. It is assumed but not verified that the second range has at least as many elements as the first range. </P>
<BLOCKQUOTE><HR>
<B>NOTE: A number of algorithms operate on two parallel sequences. In most cases, the second sequence is identified using only a starting iterator, not a starting and ending iterator pair. It is assumed, but never verified, that the second sequence is at least as large as the first. Errors will occur if this condition is not satisfied.
</B><HR></BLOCKQUOTE>
<P>In the example program, both <SAMP>swap()</SAMP> and <SAMP>iter_swap()</SAMP> are used separately and in combination:</P>
<UL>
<PRE>
void swap_example () </PRE>
<A NAME="idx270"><!></A>
<PRE>       // illustrates the use of the algorithm swap_ranges
       // see alg1.cpp for complete source code
{
      // first make two parallel sequences
   int data[] = {12, 27, 14, 64}, *datap = data;
   vector&lt;int&gt; aVec(4);
   generate(aVec.begin(), aVec.end(), iotaGen(1));

      // illustrate swap and iter_swap
   swap(data[0], data[2]);
   vector&lt;int&gt;::iterator last = aVec.end(); last--;
   iter_swap(aVec.begin(), last);

      // now swap the entire sequence
   swap_ranges (aVec.begin(), aVec.end(), datap);
}</PRE>
</UL>

<HR>
<A HREF="13-1.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="13-3.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
