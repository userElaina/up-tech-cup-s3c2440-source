<HTML><HEAD><TITLE>advance</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="adj_8817.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="Alg_5157.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>advance</H2>
<PRE><HR>Iterator Operation
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>Moves an iterator forward or backward (if available) by a certain distance.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<P>None</P>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;iterator&gt;
template &lt;class InputIterator, class Distance&gt;
void advance (InputIterator&amp; i, Distance n);</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>The <B><I>advance</I></B> template function allows an iterator to be advanced through a container by some arbitrary distance. For bidirectional and random access iterators, this distance may be negative. For random access iterators, this function uses <SAMP>operator+</SAMP> and <SAMP>operator-</SAMP> for constant time implementations. For input, forward, and bidirectional iterators, <B><I>advance</I></B> uses <SAMP>operator++</SAMP> for linear time implementations. <B><I>advance</I></B> also uses <SAMP>operator--</SAMP> with bidirectional iterators for linear time implementations of negative distances. </P>
<P>If <SAMP>n</SAMP> is positive, <B><I>advance</I></B> increments iterator reference <SAMP>i</SAMP> by <SAMP>n</SAMP>. For negative <SAMP>n</SAMP>, <B><I>advance</I></B> decrements reference <SAMP>i</SAMP>. Remember that <B><I>advance</I></B> accepts a negative argument <SAMP>n</SAMP> for random access and bidirectional iterators only.</P>

<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// advance.cpp
//
 #include&lt;iterator&gt;
 #include&lt;list&gt;
 #include&lt;iostream&gt;
 using namespace std;

 int main()
 {

   //
   //Initialize a list using an array
   //
   int arr[6] = {3,4,5,6,7,8};
   list&lt;int&gt; l(arr,arr+6);
   //
   //Declare a list iterator, s.b. a ForwardIterator
   //
   list&lt;int&gt;::iterator itr = l.begin();
   //
   //Output the original list
   //
   cout &lt;&lt; "For the list: ";
   copy(l.begin(),l.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl &lt;&lt; endl;
   cout &lt;&lt; "When the iterator is initialized to l.begin()," 
        &lt;&lt; endl &lt;&lt; "it points to " &lt;&lt; *itr &lt;&lt; endl &lt;&lt; endl;
   //
   // operator+ is not available for a ForwardIterator, 
   // so use advance.
   //

   advance(itr, 4);
   cout &lt;&lt; "After advance(itr,4), the iterator points to " 
        &lt;&lt; *itr &lt;&lt; endl;
   return 0;
 }</PRE>

</UL>
<P>Program Output :</P>
<UL>
<PRE>
For the list: 3 4 5 6 7 8
When the iterator is initialized to l.begin(),
it points to 3
After advance(itr,4), the iterator points to 7</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, then you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you have to write:</P>
<P><SAMP>vector&lt;int,allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="Seq_6405.htm">Sequences</A></I></B>, <B><I><A HREF="Ran_7821.htm">Random Access Iterators</A></I></B>, <B><I><A HREF="dis_0186.htm">distance</A></I></B></P>


<BR>
<HR>
<A HREF="adj_8817.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="Alg_5157.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
