<HTML><HEAD><TITLE>4.1 Overview</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF>
<A HREF="../index.htm"><IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0></A><BR>
<A HREF="4.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="4-2.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<H2>4.1 Overview</H2>
<A NAME="idx55"><!></A>
<P>The Standard C++ Library provides ten alternative forms of containers and three container adaptors. In this chapter we briefly identify these forms, consider their characteristics, and discuss how you might go about selecting which form to use in solving a particular problem. Subsequent chapters then go over each of the different forms in more detail.</P>
<P><A HREF="#Table 6">Table 6</A> lists the container types provided by the Standard C++ Library, and describes the most significant characteristic of each. <A HREF="#Table 7">Table 7</A> does the same for the container adaptors.</P>
<TABLE BORDER CELLPADDING=3 CELLSPACING=3>
<H4><A NAME="Table 6">Table 6 -- Container types provided by the Standard C++ Library</A> </H4><tr><td valign=top><B>Name</B><td valign=top><B>Characteristic</B>&nbsp;
<tr><td valign=top>
<SAMP>vector</SAMP><BR>
<td valign=top>
Random access to elements, efficient insertion at end<BR>

<tr><td valign=top>
vector&lt;bool&gt;<BR>
<td valign=top>
Specialization of <SAMP>vector</SAMP> optimized for <SAMP>bool</SAMP><BR>

<tr><td valign=top>
<SAMP>list</SAMP><BR>
<td valign=top>
Efficient insertion and removal throughout<BR>

<tr><td valign=top>
<SAMP>deque</SAMP><BR>
<td valign=top>
Random access, efficient insertion at front or back<BR>

<tr><td valign=top>
<SAMP>set</SAMP><BR>
<td valign=top>
Elements maintained in order, efficient test for inclusion, insertion, and removal<BR>

<tr><td valign=top>
<SAMP>multiset</SAMP><BR>
<td valign=top>
Set with repeated copies<BR>

<tr><td valign=top>
bitset<BR>
<td valign=top>
Bit container templated on size rather than contained type<BR>

<tr><td valign=top>
<SAMP>map</SAMP><BR>
<td valign=top>
Access to values via keys, efficient insertion and removal<BR>

<tr><td valign=top>
<SAMP>multimap</SAMP><BR>
<td valign=top>
Map permitting duplicate keys<BR>

<tr><td valign=top>
string<BR>
<td valign=top>
Character container enhanced for string operations<BR>


</TABLE>


</P>
<TABLE BORDER CELLPADDING=3 CELLSPACING=3>
<A NAME="idx56"><!></A>
<H4><A NAME="Table 7">Table 7 -- Container adaptors of the Standard C++ Library</A></H4><tr><td valign=top><B>Name</B><td valign=top><B>Characteristic</B>&nbsp;
<tr><td valign=top>
<SAMP>stack</SAMP><BR>
<td valign=top>
Insertions and removals only from top<BR>

<tr><td valign=top>
<SAMP>queue</SAMP><BR>
<td valign=top>
Insertions at back, removals from front<BR>

<tr><td valign=top>
<SAMP>priority_queue</SAMP><BR>
<td valign=top>
Efficient access and removal of largest values<BR>


</TABLE>


</P>

<HR>
<A HREF="4.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of Document" BORDER=O></A><A HREF="booktoc.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="4-2.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><P>OEM Edition, &copy;Copyright 1999, Rogue Wave Software, Inc.<BR><A HREF="contact.htm">Contact</A> Rogue Wave about documentation or support issues.</P>
</BODY></HTML>
