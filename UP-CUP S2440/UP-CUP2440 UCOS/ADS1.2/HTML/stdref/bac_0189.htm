<HTML><HEAD><TITLE>back_insert_iterator, back_inserter</TITLE></HEAD><BODY BGCOLOR=#FFFFFF>
<IMG SRC="images/banner.gif" WIDTH=405 HEIGHT=57 ALT="Rogue Wave banner" BORDER=0><BR>
<A HREF="aut_3512.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="bas_3163.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A><BR>

<H2>back_insert_iterator, back_inserter</H2>
<PRE><HR>Insert Iterator
<HR></PRE>
<UL>
<LI><A HREF="#Summary">Summary</A></LI>
<LI><A HREF="#memindex">Data Type and Member Function Indexes</A></LI>
<LI><A HREF="#Synopsis">Synopsis</A></LI>
<LI><A HREF="#Description">Description</A></LI>
<LI><A HREF="#Interface">Interface</A></LI>
<LI><A HREF="#Types">Types</A></LI>
<LI><A HREF="#Constructors">Constructors</A></LI>
<LI><A HREF="#Operators">Operators</A></LI>
<LI><A HREF="#Helper Functions">Helper Functions</A></LI>
<LI><A HREF="#Example">Example</A></LI>
<LI><A HREF="#Warnings">Warnings</A></LI>
<LI><A HREF="#See Also">See Also</A></LI>

</UL>
<A NAME="Summary"><H3>Summary</H3></A>
<P>An insert iterator used to insert items at the end of a collection.</P>
<A NAME="memindex"><H3>Data Type and Member Function Indexes<BR>(exclusive of constructors and destructors)</H3></A>
<UL><TABLE CELLPADDING=3>
<TR><TD><B>Data Types</B></TD></TR><TR><TD VALIGN=top><A HREF="#Typescontainer_type">container_type</A><BR>
</TD></TR>
</TABLE></UL>
<UL><TABLE CELLPADDING=3>
<TR><TD><B>Member Functions</B></TD></TR><TR><TD VALIGN=top><A HREF="#Helper Functionsback_inserter()">back_inserter()</A><BR>
 <A HREF="#Operatorsoperator*()">operator*()</A><BR>
 <A HREF="#Operatorsoperator++()">operator++()</A><BR>
 <A HREF="#Operatorsoperator=()">operator=()</A><BR>
</TD></TR>
</TABLE></UL>

<A NAME="Synopsis"><H3>Synopsis</H3></A>
<PRE>
<PRE>#include &lt;iterator&gt;
template &lt;class Container&gt; 
class back_insert_iterator;</PRE>

</PRE>

<A NAME="Description"><H3>Description</H3></A>
<P>Insert iterators let you insert new elements into a collection rather than copy a new element's value over the value of an existing element. The class <B><I>back_insert_iterator</I></B> is used to insert items at the end of a collection. The function <SAMP>back_inserter</SAMP> creates an instance of a <B><I>back_insert_iterator</I></B> for a particular collection type. A <B><I>back_insert_iterator</I></B> can be used with <B><I><A HREF="vec_0251.htm">vector</A></I></B>s, <B><I><A HREF="deq_4164.htm">deque</A></I></B>s, and <B><I><A HREF="lis_3222.htm">list</A></I></B>s, but not with <B><I><A HREF="map_8018.htm">map</A></I></B>s or <B><I><A HREF="set_1649.htm">set</A></I></B>s.</P>

<A NAME="Interface"><H3>Interface</H3></A>
<UL>
<PRE>template &lt;class Container&gt;
 class back_insert_iterator 
   : public iterator &lt;output_iterator_tag, void, void, void,
     void&gt; {

protected:
   Container* container;
public:
   typedef Container container_type;
   explicit back_insert_iterator (Container&amp;);
   back_insert_iterator&lt;Container&gt;&amp;
    operator= 
          (const typename Container::const_reference value);
   back_insert_iterator&lt;Container&gt;&amp; operator* ();
   back_insert_iterator&lt;Container&gt;&amp; operator++ ();
   back_insert_iterator&lt;Container&gt; operator++ (int);
};

template &lt;class Container&gt;
 back_insert_iterator&lt;Container&gt; back_inserter (Container&amp;);</PRE>

</UL>

<A NAME="Types"><H3>Types</H3></A>


<A NAME="Typescontainer_type"></A><PRE><B>container_type</B></PRE>

<P>The type of container acted on by this iterator.</P>

<A NAME="Constructors"><H3>Constructors</H3></A>


<PRE><B>explicit</B>
<B>back_insert_iterator</B> (Container&amp; x);</PRE>

<UL>
<P>Constructor. Creates an instance of a <B><I>back_insert_iterator</I></B> associated with container <SAMP>x.</SAMP></P>
</UL>


<A NAME="Operators"><H3>Operators</H3></A>


<A NAME="Operatorsoperator=()"></A><PRE>back_insert_iterator&lt;Container&gt;&amp;
<B>operator=</B> (const typename Container::value_type&amp; value);</PRE>

<UL>
<P>Inserts a copy of <SAMP>value</SAMP> on the end of the container, and returns <SAMP>*this</SAMP>.</P>
</UL>



<A NAME="Operatorsoperator*()"></A><PRE>back_insert_iterator&lt;Container&gt;&amp; 
<B>operator*</B> ();</PRE>

<UL>
<P>Returns <SAMP>*this</SAMP>.</P>
</UL>



<A NAME="Operatorsoperator++()"></A><PRE>back_insert_iterator&lt;Container&gt;&amp; 
<B>operator++</B> ();
back_insert_iterator&lt;Container&gt; 
<B>operator++</B> (int);</PRE>

<UL>
<P>Increments the input iterator and returns <SAMP>*this</SAMP>.</P>
</UL>


<A NAME="Helper Functions"><H3>Helper Functions</H3></A>


<PRE>template &lt;class Container&gt;
<A NAME="Helper Functionsback_inserter()"></A>back_insert_iterator&lt;Container&gt;
<B>back_inserter</B> (Container&amp; x)</PRE>

<UL>
<P>Returns a <B><I>back_insert_iterator</I></B> that inserts elements at the end of container <SAMP>x</SAMP>. This function allows you to create insert iterators inline.</P>
</UL>


<A NAME="Example"><H3>Example</H3></A>
<UL>
<PRE>//
// ins_itr.cpp
//
 #include &lt;iterator&gt;
 #include &lt;deque&gt;
 #include &lt;iostream&gt;
 using namespace std;

 int main ()
 {
   //
   // Initialize a deque using an array.
   //
   int arr[4] = { 3,4,7,8 };
   deque&lt;int&gt; d(arr+0, arr+4);
   //
   // Output the original deque.
   //
   cout &lt;&lt; "Start with a deque: " &lt;&lt; endl &lt;&lt; "     ";
   copy(d.begin(), d.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   //
   // Insert into the middle.
   //
   insert_iterator&lt;deque&lt;int&gt; &gt; ins(d, d.begin()+2);
   *ins = 5; *ins = 6;
   //
   // Output the new deque.
   //
   cout &lt;&lt; endl &lt;&lt; endl;
   cout &lt;&lt; "Use an insert_iterator: " &lt;&lt; endl &lt;&lt; "     ";
   copy(d.begin(), d.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   //
   // A deque of four 1s.
   //
   deque&lt;int&gt; d2(4, 1);
   //
   // Insert d2 at front of d.
   //
   copy(d2.begin(), d2.end(), front_inserter(d));
   //
   // Output the new deque.
   //
   cout &lt;&lt; endl &lt;&lt; endl;
   cout &lt;&lt; "Use a front_inserter: " &lt;&lt; endl &lt;&lt; "     ";
   copy(d.begin(), d.end(),
        ostream_iterator&lt;int,char&gt;(cout," "));
   //
   // Insert d2 at back of d.
   //
   copy(d2.begin(), d2.end(), back_inserter(d));
   //
   // Output the new deque.
   //
   cout &lt;&lt; endl &lt;&lt; endl;
   cout &lt;&lt; "Use a back_inserter: " &lt;&lt; endl &lt;&lt; "     ";
   copy(d.begin(), d.end(),              
        ostream_iterator&lt;int,char&gt;(cout," "));
   cout &lt;&lt; endl;

   return 0;
 }</PRE>

</UL>
<P><B>Program Output</B></P>
<UL>
<PRE>
Start with a deque:
     3 4 7 8
Use an insert_iterator:
     3 4 5 6 7 8
Use a front_inserter:
     1 1 1 1 3 4 5 6 7 8
Use a back_inserter:
     1 1 1 1 3 4 5 6 7 8 1 1 1 1</PRE>

</UL>

<A NAME="Warnings"><H3>Warnings</H3></A>
<P>If your compiler does not support default template parameters, then you always need to supply the <SAMP>Allocator</SAMP> template argument. For instance, you have to write:</P>
<P><SAMP>vector&lt;int,allocator&lt;int&gt; &gt;</SAMP></P>
<P>instead of:</P>
<P><SAMP>vector&lt;int&gt;</SAMP></P>
<P>If your compiler does not support namespaces, then you do not need the using declaration for <SAMP>std</SAMP>.</P>

<A NAME="See Also"><H3>See Also</H3></A>
<P><B><I><A HREF="Ins_9479.htm">Insert Iterators</A></I></B></P>


<BR>
<HR>
<A HREF="aut_3512.htm"><IMG SRC="images/prev.gif" WIDTH=20 HEIGHT=21 ALT="Previous file" BORDER=0></A><A HREF="index.htm"><IMG SRC="images/top.gif" WIDTH=56 HEIGHT=21 ALT="Top of document" BORDER=0></A><A HREF="classref.htm"><IMG SRC="images/toc.gif" WIDTH=56 HEIGHT=21 ALT="Contents" BORDER=0></A><A HREF="tindex.htm"><IMG SRC="images/index.gif" WIDTH=56 HEIGHT=21 ALT="Index" BORDER=0></A><A HREF="bas_3163.htm"><IMG SRC="images/next.gif" WIDTH=19 HEIGHT=21 ALT="Next file" BORDER=0></A>
<BR>&copy;Copyright 1999, Rogue Wave Software, Inc.<BR>Send <A HREF="mailto:onlinedocs@roguewave.com">mail</A> to report errors or comment on the documentation.
<BR>
OEM Release</BODY></HTML>
